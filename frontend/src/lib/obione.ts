/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Root
     * @description Root endpoint.
     */
    get: operations["root__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health
     * @description Health endpoint.
     */
    get: operations["health_health_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Version
     * @description Version endpoint.
     */
    get: operations["version_version_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/declared/neuron-morphology-metrics/{reconstruction_morphology_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Neuron morphology metrics
     * @description This calculates neuron morphology metrics for a given reconstruction                     morphology.
     */
    get: operations["neuron_morphology_metrics_endpoint_declared_neuron_morphology_metrics__reconstruction_morphology_id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/declared/electrophysiologyrecording-metrics/{trace_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * electrophysiology recording metrics
     * @description This calculates electrophysiology traces metrics for a particular recording
     */
    get: operations["electrophysiologyrecording_metrics_endpoint_declared_electrophysiologyrecording_metrics__trace_id__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/generated/simulations-generate-grid": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Simulation Campaign
     * @description SONATA simulation campaign
     */
    post: operations["endpoint_generated_simulations_generate_grid_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/generated/simulations-generate-grid-save": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Simulation Campaign
     * @description SONATA simulation campaign
     */
    post: operations["endpoint_generated_simulations_generate_grid_save_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/generated/morphology-metrics-run-grid": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Morphology Metrics
     * @description Calculates morphology metrics for a given morphologies.
     */
    post: operations["endpoint_generated_morphology_metrics_run_grid_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/generated/contribute-morphology-generate-grid": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Contribute a Morphology
     * @description Form to contribute a morphology to the OBI.
     */
    post: operations["endpoint_generated_contribute_morphology_generate_grid_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/subject_data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Subject Data */
    get: operations["get_subject_data_api_subject_data_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/licenses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get License Data */
    get: operations["get_license_data_api_licenses_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/mtypes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Mtype Data */
    get: operations["get_mtype_data_api_mtypes_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AgePeriod
     * @enum {string}
     */
    AgePeriod: "prenatal" | "postnatal" | "unknown";
    /**
     * All Neurons
     * @description All biophysical neurons.
     */
    AllNeurons: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "AllNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage: number | number[];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** Assets */
    Assets: {
      /**
       * Type
       * @constant
       */
      type: "Assets";
      /**
       * Swc File
       * @description SWC file for the morphology.
       */
      swc_file?: string | null;
      /**
       * Asc File
       * @description ASC file for the morphology.
       */
      asc_file?: string | null;
      /**
       * H5 File
       * @description H5 file for the morphology.
       */
      h5_file?: string | null;
    };
    /** Author */
    Author: {
      /** Given Name */
      given_name?: string | null;
      /** Family Name */
      family_name?: string | null;
    };
    /**
     * Circuit
     * @description Class representing a circuit.
     *
     *     It points to a SONATA config and possible additional assets.
     */
    Circuit: {
      /** Name */
      name: string;
      /** Path */
      path: string;
      /** Matrix Path */
      matrix_path?: string | null;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "Circuit";
    };
    /** CircuitFromID */
    CircuitFromID: {
      /**
       * Id Str
       * @description ID of the entity in string format.
       */
      id_str: string;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "CircuitFromID";
    };
    /**
     * Constant Somatic Current Clamp (Absolute)
     * @description A constant current injection at a fixed absolute amplitude.
     */
    ConstantCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "ConstantCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Amplitude
       * @description The injected current. Given in nanoamps.
       * @default 0.1
       */
      amplitude: number | number[];
    };
    /**
     * ContributeMorphologyForm
     * @description Contribute Morphology Form.
     */
    ContributeMorphologyForm: {
      /**
       * Type
       * @constant
       */
      type: "ContributeMorphologyForm";
      /** @description Morphology files. */
      assets?: components["schemas"]["Assets"];
      /** @description Contributor. */
      contribution?: components["schemas"]["Contribution"];
      /**
       * Morphology
       * @description Information about contributors.
       */
      morphology?: components["schemas"]["ReconstructionMorphology"];
      /** @description Information about the subject. */
      subject?: components["schemas"]["Subject"];
      /**
       * Publication Details
       * @description Publication details.
       */
      publication?: components["schemas"]["Publication"];
      /** @description The license used. */
      license?: components["schemas"]["License"];
      /**
       * Scientific Artifact
       * @description Information about the artifact.
       */
      scientificartifact?: components["schemas"]["ScientificArtifact"];
      /**
       * Mtype Classification
       * @description The mtype.
       */
      mtype?: components["schemas"]["MTypeClassification"];
    };
    /** Contribution */
    Contribution: {
      /**
       * Name
       * @description Contribution name
       * @default
       */
      name: string;
    };
    /**
     * ElectrophysiologyMetricsOutput
     * @description Output schema for electrophysiological metrics extracted using BluePyEfe.
     */
    ElectrophysiologyMetricsOutput: {
      /**
       * Feature Dict
       * @description Mapping of feature name to its metric values. Each entry contains at least an 'avg', and optionally 'unit', 'num_traces', etc.
       */
      feature_dict: {
        [key: string]: {
          [key: string]: unknown;
        };
      };
    };
    /**
     * All Excitatory Neurons
     * @description All biophysical excitatory neurons.
     */
    ExcitatoryNeurons: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "ExcitatoryNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage: number | number[];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /**
     * Fully Synchronous Spikes (Efferent)
     * @description Spikes sent at the same time from all neurons in the source neuron set.
     *
     *     to efferently connected neurons in the target neuron set.
     */
    FullySynchronousSpikeStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "FullySynchronousSpikeStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /** Neuron Set (Source) */
      source_neuron_set: components["schemas"]["NeuronSetReference"];
      /** Neuron Set (Target) */
      targeted_neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * Hyperpolarizing Somatic Current Clamp
     * @description A hyperpolarizing current injection which brings a cell to base membrance voltage.
     *
     *     The holding current is pre-defined for each cell.
     */
    HyperpolarizingCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "HyperpolarizingCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
    };
    /**
     * ID Neuron Set
     * @description Neuron set definition by providing a list of neuron IDs.
     */
    IDNeuronSet: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "IDNeuronSet";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage: number | number[];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
      /** Neuron Ids */
      neuron_ids:
        | components["schemas"]["NamedTuple"]
        | components["schemas"]["NamedTuple"][];
    };
    /** Info */
    Info: {
      /**
       * Type
       * @constant
       */
      type: "Info";
      /**
       * Campaign Name
       * @description Name of the simulation campaign.
       */
      campaign_name: string;
      /**
       * Campaign Description
       * @description Description of the simulation campaign.
       */
      campaign_description: string;
    };
    /**
     * All Inhibitory Neurons
     * @description All inhibitory neurons.
     */
    InhibitoryNeurons: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "InhibitoryNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage: number | number[];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** Lic */
    Lic: {
      /** License Label */
      license_label: string;
      /** License Id */
      license_id: string;
    };
    /** License */
    License: {
      /**
       * Type
       * @constant
       */
      type: "License";
      /** License Id */
      license_id?: string | null;
    };
    /**
     * Linear Somatic Current Clamp (Absolute)
     * @description A current injection which changes linearly in absolute ampltude over time.
     */
    LinearCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "LinearCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Start Amplitude
       * @description The amount of current initially injected when the stimulus activates. Given in nanoamps.
       * @default 0.1
       */
      amplitude_start: number | number[];
      /**
       * End Amplitude
       * @description If given, current is interpolated such that current reaches this value when the stimulus concludes. Otherwise, current stays at 'Start Amplitude'. Given in nanoamps.
       * @default 0.2
       */
      amplitude_end: number | number[];
    };
    /** MTypeClassification */
    MTypeClassification: {
      /**
       * Type
       * @constant
       */
      type: "MTypeClassification";
      /**
       * Mtype Class Id
       * @description UUID for MType classification
       */
      mtype_class_id?: string | null;
    };
    /** MorphologyMetricsForm */
    MorphologyMetricsForm: {
      /**
       * Type
       * @constant
       */
      type: "MorphologyMetricsForm";
      initialize: components["schemas"]["obi_one__scientific__morphology_metrics__morphology_metrics__MorphologyMetricsForm__Initialize"];
    };
    /** MorphologyMetricsOutput */
    MorphologyMetricsOutput: {
      /**
       * aspect_ratio
       * @description Calculates the min/max ratio of the principal direction extents                 along the plane.
       */
      aspect_ratio?: number | null;
      /**
       * circularity
       * @description Calculates the circularity of the morphology points along the plane.
       */
      circularity?: number | null;
      /**
       * length_fraction_above_soma
       * @description Returns the length fraction of the segments that have their midpoints                             higher than the soma.
       */
      length_fraction_above_soma?: number | null;
      /**
       * max_radial_distance
       * @description The maximum radial distance from the soma in micrometers.
       */
      max_radial_distance?: number | null;
      /**
       * number_of_neurites
       * @description Number of neurites in a morphology.
       */
      number_of_neurites?: number | null;
      /**
       * soma_radius [μm]
       * @description The radius of the soma in micrometers.
       */
      soma_radius?: number | null;
      /**
       * soma_surface_area [μm^2]
       * @description The surface area of the soma in square micrometers.
       */
      soma_surface_area?: number | null;
      /**
       * total_length [μm]
       * @description The total length of the morphology neurites in micrometers.
       */
      total_length?: number | null;
      /**
       * total_width [μm]
       * @description The total width (X-range) of the morphology in micrometers.
       */
      total_height?: number | null;
      /**
       * total_depth [μm]
       * @description The total depth (Z-range) of the morphology in micrometers.
       */
      total_depth?: number | null;
      /**
       * total_area [μm^2]
       * @description The total surface area of all sections in square micrometers.
       */
      total_area?: number | null;
      /**
       * total_volume [μm^3]
       * @description The total volume of all sections in cubic micrometers.
       */
      total_volume?: number | null;
      /**
       * section_lengths [μm]
       * @description The distribution of lengths per section in micrometers.
       */
      section_lengths?: number[] | null;
      /**
       * segment_radii [μm]
       * @description The distribution of radii of the morphology in micrometers.
       */
      segment_radii?: number[] | null;
      /**
       * number_of_sections
       * @description The number of sections in the morphology.
       */
      number_of_sections?: number | null;
      /**
       * local_bifurcation_angles [rad]
       * @description Angles between two sections computed at the bifurcation (local).
       */
      local_bifurcation_angles?: number[] | null;
      /**
       * remote_bifurcation_angles [rad]
       * @description Angles between two sections computed at the end of the sections (remote).
       */
      remote_bifurcation_angles?: number[] | null;
      /**
       * section_path_distances [μm]
       * @description Path distances from the soma to section endpoints in micrometers.
       */
      section_path_distances?: number[] | null;
      /**
       * section_radial_distances [μm]
       * @description Radial distance from the soma to section endpoints in micrometers.
       */
      section_radial_distances?: number[] | null;
      /**
       * section_branch_orders
       * @description The distribution of branch orders of sections, computed from soma.
       */
      section_branch_orders?: number[] | null;
      /**
       * section_strahler_orders
       * @description The distribution of strahler branch orders of sections, computed from                 terminals.
       */
      section_strahler_orders?: number[] | null;
    };
    /** Mty */
    Mty: {
      /** Mtype Label */
      mtype_label: string;
      /** Mtype Id */
      mtype_id: string;
    };
    /**
     * Multi Pulse Somatic Current Clamp (Absolute)
     * @description A series of current pulses injected at a fixed frequency, with each pulse having a fixed
     *     absolute amplitude and temporal width.
     */
    MultiPulseCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "MultiPulseCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Amplitude
       * @description The amount of current initially injected when each pulse activates. Given in nanoamps (nA).
       * @default 0.1
       */
      amplitude: number | number[];
      /**
       * Pulse Width
       * @description The length of time each pulse lasts. Given in milliseconds (ms).
       * @default 1
       */
      width: number | number[];
      /**
       * Pulse Frequency
       * @description The frequency of pulse trains. Given in Hertz (Hz).
       * @default 1
       */
      frequency: number | number[];
    };
    /**
     * NamedTuple
     * @description Helper class to assign a name to a tuple of elements.
     */
    NamedTuple: {
      /** Name */
      name: string;
      /** Elements */
      elements: number[];
      /**
       * Type
       * @constant
       */
      type: "NamedTuple";
    };
    /**
     * NeuronSetReference
     * @description A reference to a NeuronSet block.
     */
    NeuronSetReference: {
      /**
       * Block Dict Name
       * @default
       */
      block_dict_name: string;
      /** Block Name */
      block_name: string;
      /**
       * Type
       * @constant
       */
      type: "NeuronSetReference";
    };
    /**
     * Normally Distributed Somatic Current Clamp (Absolute)
     * @description Normally distributed current injection with a mean absolute amplitude.
     */
    NormallyDistributedCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "NormallyDistributedCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Mean Amplitude
       * @description The mean value of current to inject. Given in nanoamps (nA).
       * @default 0.01
       */
      mean_amplitude: number | number[];
      /**
       * Variance
       * @description The variance around the mean of current to inject using a                     normal distribution.
       * @default 0.01
       */
      variance: number | number[];
    };
    /**
     * Poisson Spikes (Efferent)
     * @description Spike times drawn from a Poisson process with a given frequency.
     *
     *     Sent from all neurons in the source neuron set to efferently connected
     *     neurons in the target neuron set.
     */
    PoissonSpikeStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "PoissonSpikeStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /** Neuron Set (Source) */
      source_neuron_set: components["schemas"]["NeuronSetReference"];
      /** Neuron Set (Target) */
      targeted_neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1000
       */
      duration: number | number[];
      /**
       * Frequency
       * @description Mean frequency (Hz) of the Poisson input.
       * @default 1
       */
      frequency: number | number[];
      /**
       * Random Seed
       * @description Seed for the random number generator to ensure reproducibility of the spike generation.
       * @default 0
       */
      random_seed: number | number[];
    };
    /** Publication */
    Publication: {
      /**
       * Type
       * @constant
       */
      type: "Publication";
      /**
       * Name
       * @description Publication name
       * @default
       */
      name: string;
      /**
       * Description
       * @description Publication description
       * @default
       */
      description: string;
      /**
       * Doi
       * @default
       */
      DOI: string | null;
      /**
       * Publication Title
       * @default
       */
      publication_title: string | null;
      authors?: components["schemas"]["Author"] | null;
      /** Publication Year */
      publication_year?: number | null;
      /**
       * Abstract
       * @default
       */
      abstract: string | null;
    };
    /** ReconstructionMorphology */
    ReconstructionMorphology: {
      /**
       * Type
       * @constant
       */
      type: "ReconstructionMorphology";
      /**
       * Name
       * @description Name of the morphology
       */
      name: string;
      /**
       * Description
       * @description Description
       */
      description: string;
      /** Species Id */
      species_id?: string | null;
      /** Strain Id */
      strain_id?: string | null;
      /** Brain Region Id */
      brain_region_id?: string | null;
    };
    /** ReconstructionMorphologyFromID */
    ReconstructionMorphologyFromID: {
      /**
       * Id Str
       * @description ID of the entity in string format.
       */
      id_str: string;
      /**
       * Type
       * @constant
       */
      type: "ReconstructionMorphologyFromID";
    };
    /**
     * Regular Timestamps
     * @description A series of timestamps at regular intervals.
     */
    RegularTimestamps: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "RegularTimestamps";
      /**
       * Start Time
       * @description Sart time of the timestamps in milliseconds (ms).
       * @default 0
       */
      start_time: number | number[];
      /**
       * Interval
       * @description Interval between timestamps in milliseconds (ms).
       * @default 10
       */
      interval: number | number[];
      /**
       * Number Of Repetitions
       * @description Number of timestamps to generate.
       * @default 10
       */
      number_of_repetitions: number | number[];
    };
    /**
     * Constant Somatic Current Clamp (Relative)
     * @description A constant current injection at a percentage of each cell's threshold current.
     */
    RelativeConstantCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "RelativeConstantCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Percentage of Threshold Current
       * @description The percentage of a cell's threshold current to inject when the stimulus                     activates.
       * @default 10
       */
      percentage_of_threshold_current: number | number[];
    };
    /**
     * Linear Somatic Current Clamp (Relative)
     * @description A current injection which changes linearly as a percentage of each cell's threshold current
     *     over time.
     */
    RelativeLinearCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "RelativeLinearCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Percentage of Threshold Current (Start)
       * @description The percentage of a cell's threshold current to inject when the stimulus activates.
       * @default 10
       */
      percentage_of_threshold_current_start: number | number[];
      /**
       * Percentage of Threshold Current (End)
       * @description If given, the percentage of a cell's threshold current is interpolated such that the percentage reaches this value when the stimulus concludes.
       * @default 100
       */
      percentage_of_threshold_current_end: number | number[];
    };
    /**
     * Normally Distributed Somatic Current Clamp (Relative)
     * @description Normally distributed current injection around a mean percentage of each cell's threshold
     *     current.
     */
    RelativeNormallyDistributedCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "RelativeNormallyDistributedCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Percentage of Threshold Current (Mean)
       * @description The mean value of current to inject as a percentage of a cell's                     threshold current.
       * @default 0.01
       */
      mean_percentage_of_threshold_current: number | number[];
      /**
       * Variance
       * @description The variance around the mean of current to inject using a                     normal distribution.
       * @default 0.01
       */
      variance: number | number[];
    };
    /**
     * Demo: Scale U_SE to Modulate Acetylcholine Effect on Synaptic Release Probability
     * @description Applying a scaling factor to the U_SE parameter.
     *
     *     The U_SE parameter determines the effect of achetylcholine (ACh) on synaptic release
     *     probability using the Tsodyks-Markram synaptic model. This is applied for all synapses
     *     between biophysical neurons.
     */
    ScaleAcetylcholineUSESynapticManipulation: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "ScaleAcetylcholineUSESynapticManipulation";
      /**
       * Scale U_SE (ACh)
       * @description Scale the U_SE (ACh) parameter of the Tsodyks-Markram synaptic model.
       * @default 0.7050728631217412
       */
      use_scaling: number | number[];
    };
    /** ScientificArtifact */
    ScientificArtifact: {
      /**
       * Type
       * @constant
       */
      type: "ScientificArtifact";
      /** Experiment Date */
      experiment_date?: string | null;
      /** Contact Email */
      contact_email?: string | null;
      /** Atlas Id */
      atlas_id?: string | null;
    };
    /**
     * Sex
     * @enum {string}
     */
    Sex: "male" | "female" | "unknown";
    /**
     * SimulationsForm
     * @description Simulations Form.
     */
    SimulationsForm: {
      /**
       * Type
       * @constant
       */
      type: "SimulationsForm";
      /**
       * Timestamps
       * @description Timestamps for the simulation.
       */
      timestamps?: {
        [key: string]:
          | components["schemas"]["SingleTimestamp"]
          | components["schemas"]["RegularTimestamps"];
      };
      /**
       * Stimuli
       * @description Stimuli for the simulation.
       */
      stimuli?: {
        [key: string]:
          | components["schemas"]["ConstantCurrentClampSomaticStimulus"]
          | components["schemas"]["HyperpolarizingCurrentClampSomaticStimulus"]
          | components["schemas"]["LinearCurrentClampSomaticStimulus"]
          | components["schemas"]["MultiPulseCurrentClampSomaticStimulus"]
          | components["schemas"]["NormallyDistributedCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeNormallyDistributedCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeConstantCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeLinearCurrentClampSomaticStimulus"]
          | components["schemas"]["SinusoidalCurrentClampSomaticStimulus"]
          | components["schemas"]["SubthresholdCurrentClampSomaticStimulus"]
          | components["schemas"]["PoissonSpikeStimulus"]
          | components["schemas"]["FullySynchronousSpikeStimulus"];
      };
      /**
       * Recordings
       * @description Recordings for the simulation.
       */
      recordings?: {
        [key: string]:
          | components["schemas"]["SomaVoltageRecording"]
          | components["schemas"]["TimeWindowSomaVoltageRecording"];
      };
      /**
       * Neuron Sets
       * @description Neuron sets for the simulation.
       */
      neuron_sets?: {
        [key: string]:
          | components["schemas"]["IDNeuronSet"]
          | components["schemas"]["nbS1VPMInputs"]
          | components["schemas"]["nbS1POmInputs"]
          | components["schemas"]["AllNeurons"]
          | components["schemas"]["ExcitatoryNeurons"]
          | components["schemas"]["InhibitoryNeurons"];
      };
      /**
       * Synaptic Manipulations
       * @description Synaptic manipulations for the simulation.
       */
      synaptic_manipulations?: {
        [key: string]:
          | components["schemas"]["SynapticMgManipulation"]
          | components["schemas"]["ScaleAcetylcholineUSESynapticManipulation"];
      };
      /**
       * Initialization
       * @description Parameters for initializing the simulation.
       */
      initialize: components["schemas"]["obi_one__scientific__simulation__simulations__SimulationsForm__Initialize"];
      /** @description Information about the simulation campaign. */
      info: components["schemas"]["Info"];
    };
    /**
     * Single Timestamp
     * @description A single timestamp at a specified time.
     */
    SingleTimestamp: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "SingleTimestamp";
      /**
       * Start Time
       * @description Sart time of the timestamps in milliseconds (ms).
       * @default 0
       */
      start_time: number | number[];
    };
    /**
     * Sinusoidal Somatic Current Clamp (Absolute)
     * @description A sinusoidal current injection with a fixed frequency and maximum absolute amplitude.
     */
    SinusoidalCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "SinusoidalCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Maximum Amplitude
       * @description The maximum (and starting) amplitude of the sinusoid. Given in nanoamps (nA).
       * @default 0.1
       */
      maximum_amplitude: number | number[];
      /**
       * Frequency
       * @description The frequency of the waveform. Given in Hertz (Hz).
       * @default 1
       */
      frequency: number | number[];
      /**
       * Timestep
       * @description Timestep of generated signal in milliseconds (ms).
       * @default 0.025
       */
      dt: number | number[];
    };
    /**
     * Soma Voltage Recording (Full Experiment)
     * @description Records the soma voltage of a neuron set for the full length of the experiment.
     */
    SomaVoltageRecording: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "SomaVoltageRecording";
      /**
       * Neuron Set
       * @description Neuron set to record from.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestep
       * @description Interval between recording time steps in milliseconds (ms).
       * @default 0.1
       */
      dt: number | number[];
    };
    /** Spec */
    Spec: {
      /** Species Name */
      species_name: string;
      /** Species Id */
      species_id: string;
      /** Strains */
      strains: {
        [key: string]: string;
      };
    };
    /** Subject */
    Subject: {
      /**
       * Type
       * @constant
       */
      type: "Subject";
      /**
       * Name
       * @description Subject name
       * @default
       */
      name: string;
      /**
       * Description
       * @description Subject description
       * @default
       */
      description: string;
      /**
       * @description Sex of the subject
       * @default unknown
       */
      sex: components["schemas"]["Sex"];
      /**
       * Weight
       * @description Weight in grams
       */
      weight?: number | null;
      /**
       * Age value
       * @description Age value interval.
       */
      age_value?: string | null;
      /**
       * Minimum age range
       * @description Minimum age range
       */
      age_min?: string | null;
      /**
       * Maximum age range
       * @description Maximum age range
       */
      age_max?: string | null;
      /** @default unknown */
      age_period: components["schemas"]["AgePeriod"] | null;
    };
    /**
     * Subthreshold Somatic Current Clamp (Relative)
     * @description A subthreshold current injection at a percentage below each cell's threshold current.
     */
    SubthresholdCurrentClampSomaticStimulus: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "SubthresholdCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration: number | number[];
      /**
       * Percentage Below Threshold
       * @description A percentage adjusted from 100 of a cell's threshold current.                         E.g. 20 will apply 80\% of the threshold current. Using a negative                             value will give more than 100. E.g. -20 will inject 120\% of the                                 threshold current.
       * @default 0.1
       */
      percentage_below_threshold: number | number[];
    };
    /**
     * Demo: Synaptic Mg2+ Concentration Manipulation
     * @description Manipulate the extracellular synaptic magnesium (Mg2+) concentration.
     *
     *     This is applied for all synapses between biophysical neurons.
     */
    SynapticMgManipulation: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "SynapticMgManipulation";
      /**
       * Extracellular Magnesium Concentration
       * @description Extracellular calcium concentration in millimoles (mM).
       * @default 2.4
       */
      magnesium_value: number | number[];
    };
    /**
     * Soma Voltage Recording (Time Window)
     * @description Records the soma voltage of a neuron set over a specified time window.
     */
    TimeWindowSomaVoltageRecording: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "TimeWindowSomaVoltageRecording";
      /**
       * Neuron Set
       * @description Neuron set to record from.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestep
       * @description Interval between recording time steps in milliseconds (ms).
       * @default 0.1
       */
      dt: number | number[];
      /**
       * Start Time
       * @description Recording start time in milliseconds (ms).
       * @default 0
       */
      start_time: number | number[];
      /**
       * End Time
       * @description Recording end time in milliseconds (ms).
       * @default 100
       */
      end_time: number | number[];
    };
    /**
     * TimestampsReference
     * @description A reference to a NeuronSet block.
     */
    TimestampsReference: {
      /**
       * Block Dict Name
       * @default
       */
      block_dict_name: string;
      /** Block Name */
      block_name: string;
      /**
       * Type
       * @constant
       */
      type: "TimestampsReference";
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * Demo: nbS1 POm Inputs
     * @description Virtual neurons projecting from the POm thalamic nucleus.
     *
     *     Specifically, virtual neurons projecting from the POm thalamic nucleus to biophysical
     *     cortical neurons in the nbS1 model.
     */
    nbS1POmInputs: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "nbS1POmInputs";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage: number | number[];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /**
     * Demo: nbS1 VPM Inputs
     * @description Virtual neurons projecting from the VPM thalamic nucleus.
     *
     *     Specifically, virtual neurons projecting from the VPM thalamic nucleus to biophysical
     *     cortical neurons in the nbS1 model.
     */
    nbS1VPMInputs: {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "nbS1VPMInputs";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage: number | number[];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** Initialize */
    obi_one__scientific__morphology_metrics__morphology_metrics__MorphologyMetricsForm__Initialize: {
      /**
       * Type
       * @constant
       */
      type: "MorphologyMetricsForm.Initialize";
      /**
       * Morphology
       * @description 3. Morphology description
       */
      morphology:
        | components["schemas"]["ReconstructionMorphologyFromID"]
        | components["schemas"]["ReconstructionMorphologyFromID"][];
    };
    /** Initialize */
    obi_one__scientific__simulation__simulations__SimulationsForm__Initialize: {
      /**
       * Type
       * @constant
       */
      type: "SimulationsForm.Initialize";
      /** Circuit */
      circuit:
        | (
            | components["schemas"]["Circuit"]
            | components["schemas"]["CircuitFromID"]
          )
        | (
            | components["schemas"]["Circuit"]
            | components["schemas"]["CircuitFromID"]
          )[];
      /**
       * Neuron Set
       * @description Neuron set to simulate.
       */
      node_set: components["schemas"]["NeuronSetReference"];
      /**
       * Duration
       * @description Simulation length in milliseconds (ms).
       * @default 1000
       */
      simulation_length: number | number[];
      /**
       * Extracellular Calcium Concentration
       * @description Extracellular calcium concentration around the synapse in millimoles (mM). Increasing this value increases the probability of synaptic vesicle release, which in turn increases the level of network activity. In vivo values are estimated to be ~0.9-1.2mM, whilst in vitro values are on the order of 2mM.
       * @default 1.1
       */
      extracellular_calcium_concentration: number[] | number;
      /**
       * Initial Voltage
       * @description Initial membrane potential in millivolts (mV).
       * @default -80
       */
      v_init: number[] | number;
      /**
       * Random Seed
       * @description Random seed for the simulation.
       * @default 1
       */
      random_seed: number[] | number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  health_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  version_version_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: unknown;
          };
        };
      };
    };
  };
  neuron_morphology_metrics_endpoint_declared_neuron_morphology_metrics__reconstruction_morphology_id__get: {
    parameters: {
      query?: {
        /** @description List of requested metrics */
        requested_metrics?:
          | (
              | "aspect_ratio"
              | "circularity"
              | "length_fraction_above_soma"
              | "max_radial_distance"
              | "number_of_neurites"
              | "soma_radius"
              | "soma_surface_area"
              | "total_length"
              | "total_height"
              | "total_width"
              | "total_depth"
              | "total_area"
              | "total_volume"
              | "section_lengths"
              | "segment_radii"
              | "number_of_sections"
              | "local_bifurcation_angles"
              | "remote_bifurcation_angles"
              | "section_path_distances"
              | "section_radial_distances"
              | "section_branch_orders"
              | "section_strahler_orders"
            )[]
          | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        reconstruction_morphology_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MorphologyMetricsOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  electrophysiologyrecording_metrics_endpoint_declared_electrophysiologyrecording_metrics__trace_id__get: {
    parameters: {
      query?: {
        requested_metrics?:
          | (
              | "spike_count"
              | "time_to_first_spike"
              | "time_to_last_spike"
              | "inv_time_to_first_spike"
              | "doublet_ISI"
              | "inv_first_ISI"
              | "ISI_log_slope"
              | "ISI_CV"
              | "irregularity_index"
              | "adaptation_index"
              | "mean_frequency"
              | "strict_burst_number"
              | "strict_burst_mean_freq"
              | "spikes_per_burst"
              | "AP_height"
              | "AP_amplitude"
              | "AP1_amp"
              | "APlast_amp"
              | "AP_duration_half_width"
              | "AHP_depth"
              | "AHP_time_from_peak"
              | "AP_peak_upstroke"
              | "AP_peak_downstroke"
              | "voltage_base"
              | "voltage_after_stim"
              | "ohmic_input_resistance_vb_ssse"
              | "steady_state_voltage_stimend"
              | "sag_amplitude"
              | "decay_time_constant_after_stim"
              | "depol_block_bool"
            )[]
          | null;
        protocols?:
          | (
              | "spontaneous"
              | "idrest"
              | "idthres"
              | "apwaveform"
              | "iv"
              | "step"
              | "spontaps"
              | "firepattern"
              | "sponnohold30"
              | "sponhold30"
              | "starthold"
              | "startnohold"
              | "delta"
              | "sahp"
              | "idhyperpol"
              | "irdepol"
              | "irhyperpol"
              | "iddepol"
              | "ramp"
              | "ap_thresh"
              | "hyperdepol"
              | "negcheops"
              | "poscheops"
              | "spikerec"
              | "sinespec"
            )[]
          | null;
        min_value?: number | null;
        max_value?: number | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        trace_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElectrophysiologyMetricsOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  endpoint_generated_simulations_generate_grid_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimulationsForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  endpoint_generated_simulations_generate_grid_save_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SimulationsForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  endpoint_generated_morphology_metrics_run_grid_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MorphologyMetricsForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  endpoint_generated_contribute_morphology_generate_grid_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContributeMorphologyForm"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_subject_data_api_subject_data_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Spec"][];
        };
      };
    };
  };
  get_license_data_api_licenses_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Lic"][];
        };
      };
    };
  };
  get_mtype_data_api_mtypes_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Mty"][];
        };
      };
    };
  };
}
