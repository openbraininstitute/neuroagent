/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/qa/question_suggestions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Question Suggestions
     * @description Generate suggested question taking into account the user journey and the user previous messages.
     */
    post: operations["question_suggestions_qa_question_suggestions_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qa/models": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Available Llm Models
     * @description Get available LLM models.
     */
    get: operations["get_available_LLM_models_qa_models_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qa/chat_streamed/{thread_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Stream Chat Agent
     * @description Run a single agent query in a streamed fashion.
     */
    post: operations["stream_chat_agent_qa_chat_streamed__thread_id__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/threads": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Threads
     * @description Get threads for a user.
     */
    get: operations["get_threads_threads_get"];
    put?: never;
    /**
     * Create Thread
     * @description Create thread.
     */
    post: operations["create_thread_threads_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/threads/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search
     * @description Get threads for a user.
     */
    get: operations["search_threads_search_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/threads/{thread_id}/generate_title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Generate Title
     * @description Generate a short thread title based on the user's first message and update thread's title.
     */
    patch: operations["generate_title_threads__thread_id__generate_title_patch"];
    trace?: never;
  };
  "/threads/{thread_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Thread By Id
     * @description Get a specific thread by ID.
     */
    get: operations["get_thread_by_id_threads__thread_id__get"];
    put?: never;
    post?: never;
    /**
     * Delete Thread
     * @description Delete the specified thread and its associated S3 objects.
     */
    delete: operations["delete_thread_threads__thread_id__delete"];
    options?: never;
    head?: never;
    /**
     * Update Thread Title
     * @description Update thread.
     */
    patch: operations["update_thread_title_threads__thread_id__patch"];
    trace?: never;
  };
  "/threads/{thread_id}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Thread Messages
     * @description Get all messages of the thread.
     */
    get: operations["get_thread_messages_threads__thread_id__messages_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tools/{thread_id}/execute/{tool_call_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Execute Tool Call
     * @description Execute a specific tool call and update its status.
     */
    patch: operations["execute_tool_call_tools__thread_id__execute__tool_call_id__patch"];
    trace?: never;
  };
  "/tools": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Available Tools
     * @description Return the list of available tools with their basic metadata.
     */
    get: operations["get_available_tools_tools_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tools/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Tool Metadata
     * @description Return detailed metadata for a specific tool.
     */
    get: operations["get_tool_metadata_tools__name__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/storage/{file_identifier}/presigned-url": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Generate Presigned Url
     * @description Generate a presigned URL for file access.
     */
    get: operations["generate_presigned_url_storage__file_identifier__presigned_url_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rate_limit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Rate Limit
     * @description Let the user know about its current rate limits.
     */
    get: operations["get_rate_limit_rate_limit_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/healthz": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Healthz
     * @description Check the health of the API.
     */
    get: operations["healthz_healthz_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Readyz
     * @description Check if the API is ready to accept traffic.
     */
    get: operations["readyz__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Settings
     * @description Show complete settings of the backend.
     *
     *     Did not add return model since it pollutes the Swagger UI.
     */
    get: operations["settings_settings_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AnnotationMessageVercel
     * @description Annotation of vercel messages.
     */
    AnnotationMessageVercel: {
      /**
       * Messageid
       * Format: uuid
       */
      messageId: string;
      /** Iscomplete */
      isComplete: boolean;
    };
    /**
     * AnnotationToolCallVercel
     * @description Annotation of vercel tool calls.
     */
    AnnotationToolCallVercel: {
      /** Toolcallid */
      toolCallId: string;
      /**
       * Validated
       * @enum {string}
       */
      validated: "accepted" | "rejected" | "not_required" | "pending";
      /** Iscomplete */
      isComplete: boolean;
    };
    /**
     * Architecture
     * @description Model's architecture.
     */
    Architecture: {
      /** Input Modalities */
      input_modalities: string[];
      /** Output Modalities */
      output_modalities: string[];
      /** Tokenizer */
      tokenizer: string;
    };
    /**
     * ClientRequest
     * @description Vercel class.
     */
    ClientRequest: {
      /** Content */
      content: string;
      /** Tool Selection */
      tool_selection?: string[] | null;
      /**
       * Model
       * @default openai/gpt-4.1-mini
       */
      model: string;
      /** Frontend Url */
      frontend_url?: string | null;
    };
    /**
     * ExecuteToolCallRequest
     * @description Request body for executing a tool call.
     */
    ExecuteToolCallRequest: {
      /**
       * Validation
       * @enum {string}
       */
      validation: "rejected" | "accepted";
      /** Args */
      args?: string | null;
      /** Feedback */
      feedback?: string | null;
    };
    /**
     * ExecuteToolCallResponse
     * @description Response model for tool execution status.
     */
    ExecuteToolCallResponse: {
      /**
       * Status
       * @enum {string}
       */
      status: "done" | "validation-error";
      /** Content */
      content?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * MessagesRead
     * @description Message response.
     */
    MessagesRead: {
      /**
       * Message Id
       * Format: uuid
       */
      message_id: string;
      /** Entity */
      entity: string;
      /**
       * Thread Id
       * Format: uuid
       */
      thread_id: string;
      /** Is Complete */
      is_complete: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /** Msg Content */
      msg_content: {
        [key: string]: unknown;
      };
      /** Model */
      model?: string | null;
      /** Tool Calls */
      tool_calls: components["schemas"]["ToolCall"][];
    };
    /**
     * MessagesReadVercel
     * @description Message response in Vercel format.
     */
    MessagesReadVercel: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Role */
      role: string;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
      /** Content */
      content: string;
      /** Parts */
      parts?:
        | (
            | components["schemas"]["ToolCallPartVercel"]
            | components["schemas"]["TextPartVercel"]
            | components["schemas"]["ReasoningPartVercel"]
          )[]
        | null;
      /** Annotations */
      annotations?:
        | (
            | components["schemas"]["AnnotationMessageVercel"]
            | components["schemas"]["AnnotationToolCallVercel"]
          )[]
        | null;
    };
    /**
     * OpenRouterModelResponse
     * @description Openrouter's model.
     */
    OpenRouterModelResponse: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Created */
      created: number;
      /** Description */
      description: string;
      architecture: components["schemas"]["Architecture"];
      top_provider: components["schemas"]["TopProvider"];
      pricing: components["schemas"]["Pricing"];
      /** Context Length */
      context_length: number;
      /** Hugging Face Id */
      hugging_face_id?: string | null;
      /** Per Request Limits */
      per_request_limits?: {
        [key: string]: string;
      } | null;
      /** Supported Parameters */
      supported_parameters: string[];
    };
    /** PaginatedResponse[MessagesReadVercel] */
    PaginatedResponse_MessagesReadVercel_: {
      /** Next Cursor */
      next_cursor: string | null;
      /** Has More */
      has_more: boolean;
      /** Page Size */
      page_size: number;
      /** Results */
      results: components["schemas"]["MessagesReadVercel"][];
    };
    /** PaginatedResponse[MessagesRead] */
    PaginatedResponse_MessagesRead_: {
      /** Next Cursor */
      next_cursor: string | null;
      /** Has More */
      has_more: boolean;
      /** Page Size */
      page_size: number;
      /** Results */
      results: components["schemas"]["MessagesRead"][];
    };
    /** PaginatedResponse[ThreadsRead] */
    PaginatedResponse_ThreadsRead_: {
      /** Next Cursor */
      next_cursor: string | null;
      /** Has More */
      has_more: boolean;
      /** Page Size */
      page_size: number;
      /** Results */
      results: components["schemas"]["ThreadsRead"][];
    };
    /**
     * Pricing
     * @description Model's pricing.
     */
    Pricing: {
      /** Prompt */
      prompt: string;
      /** Completion */
      completion: string;
      /** Image */
      image?: string | null;
      /** Request */
      request?: string | null;
      /** Input Cache Read */
      input_cache_read?: string | null;
      /** Input Cache Write */
      input_cache_write?: string | null;
      /** Web Search */
      web_search?: string | null;
      /** Internal Reasoning */
      internal_reasoning?: string | null;
    };
    /**
     * Question
     * @description One suggested question by the LLM.
     */
    Question: {
      /** Question */
      question: string;
    };
    /**
     * QuestionsSuggestions
     * @description All suggested questions by the LLM when there are already messages.
     */
    QuestionsSuggestions: {
      /** Suggestions */
      suggestions?: components["schemas"]["Question"][];
    };
    /**
     * QuestionsSuggestionsRequest
     * @description Request for the suggestion endpoint.
     */
    QuestionsSuggestionsRequest: {
      /** Click History */
      click_history?: components["schemas"]["UserJourney"][] | null;
      /** Thread Id */
      thread_id?: string | null;
    };
    /**
     * RateLimitInfo
     * @description Information regarding the rate limit of a user for a single category.
     */
    RateLimitInfo: {
      /** Limit */
      limit: number;
      /** Remaining */
      remaining: number;
      /** Reset In */
      reset_in?: number | null;
    };
    /**
     * RateLimitOutput
     * @description Output of the GET rate_limit endpoint.
     */
    RateLimitOutput: {
      chat_streamed: components["schemas"]["RateLimitInfo"];
      question_suggestions: components["schemas"]["RateLimitInfo"];
      generate_title: components["schemas"]["RateLimitInfo"];
    };
    /**
     * ReasoningPartVercel
     * @description Text part of Vercel.
     */
    ReasoningPartVercel: {
      /**
       * Type
       * @default reasoning
       * @constant
       */
      type: "reasoning";
      /** Reasoning */
      reasoning: string;
    };
    /**
     * SearchMessagesList
     * @description Class for the message search result list.
     */
    SearchMessagesList: {
      /** Result List */
      result_list: components["schemas"]["SearchMessagesResult"][];
    };
    /**
     * SearchMessagesResult
     * @description Class for the one result of the message search.
     */
    SearchMessagesResult: {
      /**
       * Thread Id
       * Format: uuid
       */
      thread_id: string;
      /**
       * Message Id
       * Format: uuid
       */
      message_id: string;
      /** Title */
      title: string;
      /** Content */
      content: string;
    };
    /**
     * TextPartVercel
     * @description Text part of Vercel.
     */
    TextPartVercel: {
      /**
       * Type
       * @default text
       * @constant
       */
      type: "text";
      /** Text */
      text: string;
    };
    /**
     * ThreadCreate
     * @description Data class for the update of a thread.
     */
    ThreadCreate: {
      /**
       * Title
       * @default New chat
       */
      title: string;
      /** Virtual Lab Id */
      virtual_lab_id?: string | null;
      /** Project Id */
      project_id?: string | null;
    };
    /**
     * ThreadGeneratBody
     * @description Data class for input of the thread generation.
     */
    ThreadGeneratBody: {
      /** First User Message */
      first_user_message: string;
    };
    /**
     * ThreadUpdate
     * @description Data class for the update of a thread.
     */
    ThreadUpdate: {
      /** Title */
      title: string;
    };
    /**
     * ThreadsRead
     * @description Data class to read chatbot conversations in the db.
     */
    ThreadsRead: {
      /**
       * Thread Id
       * Format: uuid
       */
      thread_id: string;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /** Vlab Id */
      vlab_id: string | null;
      /** Project Id */
      project_id: string | null;
      /** Title */
      title: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
    };
    /**
     * ToolCall
     * @description Tool call.
     */
    ToolCall: {
      /** Tool Call Id */
      tool_call_id: string;
      /** Name */
      name: string;
      /** Arguments */
      arguments: string;
      /**
       * Validated
       * @enum {string}
       */
      validated: "accepted" | "rejected" | "pending" | "not_required";
    };
    /**
     * ToolCallPartVercel
     * @description Tool call part from Vercel.
     */
    ToolCallPartVercel: {
      /**
       * Type
       * @default tool-invocation
       * @constant
       */
      type: "tool-invocation";
      toolInvocation: components["schemas"]["ToolCallVercel"];
    };
    /**
     * ToolCallVercel
     * @description Tool call in Vercel format.
     */
    ToolCallVercel: {
      /** Toolcallid */
      toolCallId: string;
      /** Toolname */
      toolName: string;
      /** Args */
      args: {
        [key: string]: unknown;
      };
      /**
       * State
       * @enum {string}
       */
      state: "partial-call" | "call" | "result";
      /** Result */
      result?: string | null;
    };
    /**
     * ToolMetadata
     * @description Data class for basic tool metadata.
     */
    ToolMetadata: {
      /** Name */
      name: string;
      /** Name Frontend */
      name_frontend: string;
    };
    /**
     * ToolMetadataDetailed
     * @description Data class for detailed tool metadata including online status.
     */
    ToolMetadataDetailed: {
      /** Name */
      name: string;
      /** Name Frontend */
      name_frontend: string;
      /** Description */
      description: string;
      /** Description Frontend */
      description_frontend: string;
      /** Utterances */
      utterances: string[];
      /** Input Schema */
      input_schema: string;
      /** Hil */
      hil: boolean;
      /** Is Online */
      is_online: boolean;
    };
    /**
     * TopProvider
     * @description Model's provider.
     */
    TopProvider: {
      /** Is Moderated */
      is_moderated: boolean;
    };
    /**
     * UserJourney
     * @description Schema of the user's journey.
     */
    UserJourney: {
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /** Region */
      region: string;
      /** Artifact */
      artifact?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * AssetLabel
     * @description See docs/asset-labels.md.
     * @enum {string}
     */
    AssetLabel:
      | "morphology"
      | "cell_composition_summary"
      | "cell_composition_volumes"
      | "single_neuron_synaptome_config"
      | "single_neuron_synaptome_simulation_data"
      | "single_neuron_simulation_data"
      | "sonata_circuit"
      | "compressed_sonata_circuit"
      | "circuit_figures"
      | "circuit_analysis_data"
      | "circuit_connectivity_matrices"
      | "nwb"
      | "neuron_hoc"
      | "emodel_optimization_output"
      | "sonata_simulation_config"
      | "simulation_generation_config"
      | "custom_node_sets"
      | "campaign_generation_config"
      | "campaign_summary"
      | "replay_spikes"
      | "voltage_report"
      | "spike_report"
      | "neuron_mechanisms"
      | "brain_atlas_annotation"
      | "brain_atlas_region_mesh"
      | "voxel_densities"
      | "validation_result_figure"
      | "validation_result_details"
      | "simulation_designer_image"
      | "circuit_visualization"
      | "node_stats"
      | "network_stats_a"
      | "network_stats_b";
    /** AssetRead */
    AssetRead: {
      /** Size */
      size: number;
      /** Sha256 Digest */
      sha256_digest: string | null;
      /** Path */
      path: string;
      /** Full Path */
      full_path: string;
      /** Is Directory */
      is_directory: boolean;
      content_type: components["schemas"]["ContentType"];
      /**
       * Meta
       * @default {}
       */
      meta: {
        [key: string]: unknown;
      };
      label: components["schemas"]["AssetLabel"];
      storage_type: components["schemas"]["StorageType"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      status: components["schemas"]["AssetStatus"];
    } & {
      [key: string]: unknown;
    };
    /**
     * AssetStatus
     * @enum {string}
     */
    AssetStatus: "created" | "deleted";
    /**
     * ContentType
     * @enum {string}
     */
    ContentType:
      | "application/json"
      | "application/swc"
      | "application/nrrd"
      | "application/obj"
      | "application/hoc"
      | "application/asc"
      | "application/abf"
      | "application/nwb"
      | "application/x-hdf5"
      | "text/plain"
      | "application/vnd.directory"
      | "application/mod"
      | "application/pdf"
      | "image/png"
      | "image/jpeg"
      | "model/gltf-binary"
      | "application/gzip"
      | "image/webp";
    /** Facet */
    Facet: {
      /** Id */
      id: string | number;
      /** Label */
      label: string;
      /** Count */
      count: number;
      /** Type */
      type: string | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * Facets
     * @default null
     */
    Facets: {
      [key: string]: components["schemas"]["Facet"][];
    } | null;
    /** PaginationResponse */
    PaginationResponse: {
      /** Page */
      page: number;
      /** Page Size */
      page_size: number;
      /** Total Items */
      total_items: number;
    } & {
      [key: string]: unknown;
    };
    /**
     * StorageType
     * @description Storage type.
     * @enum {string}
     */
    StorageType: "aws_s3_internal" | "aws_s3_open";
    /** ListResponseAssetRead */
    ListResponseAssetRead: {
      /** Data */
      data: components["schemas"]["AssetRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** BrainAtlasRead */
    BrainAtlasRead: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /**
       * Hierarchy Id
       * Format: uuid
       */
      hierarchy_id: string;
      species: components["schemas"]["NestedSpeciesRead"];
    } & {
      [key: string]: unknown;
    };
    /** NestedPersonRead */
    NestedPersonRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Given Name
       * @default null
       */
      given_name: string | null;
      /**
       * Family Name
       * @default null
       */
      family_name: string | null;
      /** Pref Label */
      pref_label: string;
      /** Type */
      type: string;
      /** Sub Id */
      sub_id: string | null;
    } & {
      [key: string]: unknown;
    };
    /** NestedSpeciesRead */
    NestedSpeciesRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseBrainAtlasRead */
    ListResponseBrainAtlasRead: {
      /** Data */
      data: components["schemas"]["BrainAtlasRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** BrainRegionRead */
    BrainRegionRead: {
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Annotation Value */
      annotation_value: number;
      /** Name */
      name: string;
      /** Acronym */
      acronym: string;
      /** Color Hex Triplet */
      color_hex_triplet: string;
      /** Parent Structure Id */
      parent_structure_id: string | null;
      /**
       * Hierarchy Id
       * Format: uuid
       */
      hierarchy_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseBrainRegionRead */
    ListResponseBrainRegionRead: {
      /** Data */
      data: components["schemas"]["BrainRegionRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** BrainRegionHierarchyRead */
    BrainRegionHierarchyRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseBrainRegionHierarchyRead */
    ListResponseBrainRegionHierarchyRead: {
      /** Data */
      data: components["schemas"]["BrainRegionHierarchyRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** AgentRead */
    AgentRead:
      | components["schemas"]["NestedPersonRead"]
      | components["schemas"]["NestedConsortiumRead"];
    /** ContributionRead */
    ContributionRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      agent: components["schemas"]["AgentRead"];
      role: components["schemas"]["RoleRead"];
      entity: components["schemas"]["NestedEntityRead"];
    } & {
      [key: string]: unknown;
    };
    /** NestedConsortiumRead */
    NestedConsortiumRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Pref Label */
      pref_label: string;
      /**
       * Alternative Name
       * @default null
       */
      alternative_name: string | null;
      /** Type */
      type: string;
    } & {
      [key: string]: unknown;
    };
    /** NestedEntityRead */
    NestedEntityRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Type */
      type: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /** Authorized Public */
      authorized_public: boolean;
    } & {
      [key: string]: unknown;
    };
    /** RoleRead */
    RoleRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Role Id */
      role_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseContributionRead */
    ListResponseContributionRead: {
      /** Data */
      data: components["schemas"]["ContributionRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** Annotation */
    Annotation: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Pref Label */
      pref_label: string;
      /** Alt Label */
      alt_label: string;
      /** Definition */
      definition: string;
    } & {
      [key: string]: unknown;
    };
    /** EModelRead */
    EModelRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Iteration */
      iteration: string;
      /** Score */
      score: number;
      /** Seed */
      seed: number;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      exemplar_morphology: components["schemas"]["ExemplarMorphology"];
    } & {
      [key: string]: unknown;
    };
    /**
     * EntityType
     * @description Entity types.
     * @enum {string}
     */
    EntityType:
      | "analysis_software_source_code"
      | "brain_atlas"
      | "brain_atlas_region"
      | "cell_composition"
      | "electrical_cell_recording"
      | "electrical_recording_stimulus"
      | "emodel"
      | "experimental_bouton_density"
      | "experimental_neuron_density"
      | "experimental_synapses_per_connection"
      | "ion_channel_model"
      | "memodel"
      | "mesh"
      | "memodel_calibration_result"
      | "me_type_density"
      | "publication"
      | "reconstruction_morphology"
      | "simulation"
      | "simulation_campaign"
      | "simulation_campaign_generation"
      | "simulation_execution"
      | "simulation_result"
      | "scientific_artifact"
      | "single_neuron_simulation"
      | "single_neuron_synaptome"
      | "single_neuron_synaptome_simulation"
      | "subject"
      | "validation_result"
      | "circuit";
    /** ExemplarMorphology */
    ExemplarMorphology: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default null */
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
    } & {
      [key: string]: unknown;
    };
    /** LicenseRead */
    LicenseRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Label */
      label: string;
    } & {
      [key: string]: unknown;
    };
    /** MEModelCalibrationResultRead */
    MEModelCalibrationResultRead: {
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Holding Current */
      holding_current: number;
      /** Threshold Current */
      threshold_current: number;
      /**
       * Rin
       * @default null
       */
      rin: number | null;
      /**
       * Calibrated Entity Id
       * Format: uuid
       */
      calibrated_entity_id: string;
    } & {
      [key: string]: unknown;
    };
    /** MEModelRead */
    MEModelRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      validation_status?: components["schemas"]["ValidationStatus"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      morphology: components["schemas"]["ReconstructionMorphologyRead"];
      emodel: components["schemas"]["EModelRead"];
      /** @default null */
      calibration_result:
        | components["schemas"]["MEModelCalibrationResultRead"]
        | null;
    } & {
      [key: string]: unknown;
    };
    /** NestedContributionRead */
    NestedContributionRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      agent: components["schemas"]["AgentRead"];
      role: components["schemas"]["RoleRead"];
    } & {
      [key: string]: unknown;
    };
    /** NestedStrainRead */
    NestedStrainRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
    } & {
      [key: string]: unknown;
    };
    /** PointLocationBase */
    PointLocationBase: {
      /** X */
      x: number;
      /** Y */
      y: number;
      /** Z */
      z: number;
    } & {
      [key: string]: unknown;
    };
    /** ReconstructionMorphologyRead */
    ReconstructionMorphologyRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default null */
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * ValidationStatus
     * @enum {string}
     */
    ValidationStatus: "created" | "initialized" | "running" | "done" | "error";
    /** ListResponseMEModelRead */
    ListResponseMEModelRead: {
      /** Data */
      data: components["schemas"]["MEModelRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseReconstructionMorphologyRead */
    ListResponseReconstructionMorphologyRead: {
      /** Data */
      data: components["schemas"]["ReconstructionMorphologyRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * MeasurableEntity
     * @constant
     */
    MeasurableEntity: "reconstruction_morphology";
    /** MeasurementAnnotationRead */
    MeasurementAnnotationRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Entity Id
       * Format: uuid
       */
      entity_id: string;
      entity_type: components["schemas"]["MeasurableEntity"];
      /** Measurement Kinds */
      measurement_kinds: components["schemas"]["MeasurementKindCreate"][];
    } & {
      [key: string]: unknown;
    };
    /** MeasurementItem */
    MeasurementItem: {
      /** @default null */
      name: components["schemas"]["MeasurementStatistic"] | null;
      /** @default null */
      unit: components["schemas"]["MeasurementUnit"] | null;
      /** Value */
      value: number | null;
    } & {
      [key: string]: unknown;
    };
    /** MeasurementKindCreate */
    MeasurementKindCreate: {
      structural_domain: components["schemas"]["StructuralDomain"];
      /** Measurement Items */
      measurement_items: components["schemas"]["MeasurementItem"][];
      /** Pref Label */
      pref_label: string;
    } & {
      [key: string]: unknown;
    };
    /**
     * MeasurementStatistic
     * @enum {string}
     */
    MeasurementStatistic:
      | "mean"
      | "median"
      | "mode"
      | "variance"
      | "data_point"
      | "sample_size"
      | "standard_error"
      | "standard_deviation"
      | "raw"
      | "minimum"
      | "maximum"
      | "sum";
    /**
     * MeasurementUnit
     * @enum {string}
     */
    MeasurementUnit:
      | "dimensionless"
      | "1/μm"
      | "1/mm³"
      | "μm"
      | "μm²"
      | "μm³"
      | "radian";
    /** ReconstructionMorphologyAnnotationExpandedRead */
    ReconstructionMorphologyAnnotationExpandedRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default null */
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** @default null */
      measurement_annotation:
        | components["schemas"]["MeasurementAnnotationRead"]
        | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * StructuralDomain
     * @enum {string}
     */
    StructuralDomain:
      | "apical_dendrite"
      | "basal_dendrite"
      | "axon"
      | "soma"
      | "neuron_morphology";
    /** ReadOneReconstructionMorphologyIdGetResponse */
    ReadOneReconstructionMorphologyIdGetResponse:
      | components["schemas"]["ReconstructionMorphologyRead"]
      | components["schemas"]["ReconstructionMorphologyAnnotationExpandedRead"];
    /** MorphologyMetricsOutput */
    MorphologyMetricsOutput: {
      /**
       * aspect_ratio
       * @description Calculates the min/max ratio of the principal direction extents                 along the plane.
       * @default null
       */
      aspect_ratio: number | null;
      /**
       * circularity
       * @description Calculates the circularity of the morphology points along the plane.
       * @default null
       */
      circularity: number | null;
      /**
       * length_fraction_above_soma
       * @description Returns the length fraction of the segments that have their midpoints                             higher than the soma.
       * @default null
       */
      length_fraction_above_soma: number | null;
      /**
       * max_radial_distance
       * @description The maximum radial distance from the soma in micrometers.
       * @default null
       */
      max_radial_distance: number | null;
      /**
       * number_of_neurites
       * @description Number of neurites in a morphology.
       * @default null
       */
      number_of_neurites: number | null;
      /**
       * soma_radius [μm]
       * @description The radius of the soma in micrometers.
       * @default null
       */
      soma_radius: number | null;
      /**
       * soma_surface_area [μm^2]
       * @description The surface area of the soma in square micrometers.
       * @default null
       */
      soma_surface_area: number | null;
      /**
       * total_length [μm]
       * @description The total length of the morphology neurites in micrometers.
       * @default null
       */
      total_length: number | null;
      /**
       * total_width [μm]
       * @description The total width (X-range) of the morphology in micrometers.
       * @default null
       */
      total_height: number | null;
      /**
       * total_depth [μm]
       * @description The total depth (Z-range) of the morphology in micrometers.
       * @default null
       */
      total_depth: number | null;
      /**
       * total_area [μm^2]
       * @description The total surface area of all sections in square micrometers.
       * @default null
       */
      total_area: number | null;
      /**
       * total_volume [μm^3]
       * @description The total volume of all sections in cubic micrometers.
       * @default null
       */
      total_volume: number | null;
      /**
       * section_lengths [μm]
       * @description The distribution of lengths per section in micrometers.
       * @default null
       */
      section_lengths: number[] | null;
      /**
       * segment_radii [μm]
       * @description The distribution of radii of the morphology in micrometers.
       * @default null
       */
      segment_radii: number[] | null;
      /**
       * number_of_sections
       * @description The number of sections in the morphology.
       * @default null
       */
      number_of_sections: number | null;
      /**
       * local_bifurcation_angles [rad]
       * @description Angles between two sections computed at the bifurcation (local).
       * @default null
       */
      local_bifurcation_angles: number[] | null;
      /**
       * remote_bifurcation_angles [rad]
       * @description Angles between two sections computed at the end of the sections (remote).
       * @default null
       */
      remote_bifurcation_angles: number[] | null;
      /**
       * section_path_distances [μm]
       * @description Path distances from the soma to section endpoints in micrometers.
       * @default null
       */
      section_path_distances: number[] | null;
      /**
       * section_radial_distances [μm]
       * @description Radial distance from the soma to section endpoints in micrometers.
       * @default null
       */
      section_radial_distances: number[] | null;
      /**
       * section_branch_orders
       * @description The distribution of branch orders of sections, computed from soma.
       * @default null
       */
      section_branch_orders: number[] | null;
      /**
       * section_strahler_orders
       * @description The distribution of strahler branch orders of sections, computed from                 terminals.
       * @default null
       */
      section_strahler_orders: number[] | null;
    };
    /** OrganizationRead */
    OrganizationRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Pref Label */
      pref_label: string;
      /**
       * Alternative Name
       * @default null
       */
      alternative_name: string | null;
      /** Type */
      type: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseOrganizationRead */
    ListResponseOrganizationRead: {
      /** Data */
      data: components["schemas"]["OrganizationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** PersonRead */
    PersonRead: {
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Given Name
       * @default null
       */
      given_name: string | null;
      /**
       * Family Name
       * @default null
       */
      family_name: string | null;
      /** Pref Label */
      pref_label: string;
      /** Type */
      type: string;
      /** Sub Id */
      sub_id: string | null;
    } & {
      [key: string]: unknown;
    };
    /** ListResponsePersonRead */
    ListResponsePersonRead: {
      /** Data */
      data: components["schemas"]["PersonRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * PlotGeneratorToolOutput
     * @description Output class for the plot generator.
     */
    PlotGeneratorToolOutput: {
      /** Storage Id */
      storage_id: string;
    };
    /** ListResponseAnnotation */
    ListResponseAnnotation: {
      /** Data */
      data: components["schemas"]["Annotation"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** EModelReadExpanded */
    EModelReadExpanded: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Iteration */
      iteration: string;
      /** Score */
      score: number;
      /** Seed */
      seed: number;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      exemplar_morphology: components["schemas"]["ExemplarMorphology"];
      /** Ion Channel Models */
      ion_channel_models: components["schemas"]["IonChannelModelWAssets"][];
    } & {
      [key: string]: unknown;
    };
    /** IonChannelModelWAssets */
    IonChannelModelWAssets: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Nmodl Suffix */
      nmodl_suffix: string;
      /**
       * Is Ljp Corrected
       * @default false
       */
      is_ljp_corrected: boolean;
      /**
       * Is Temperature Dependent
       * @default false
       */
      is_temperature_dependent: boolean;
      /** Temperature Celsius */
      temperature_celsius: number;
      /**
       * Is Stochastic
       * @default false
       */
      is_stochastic: boolean;
      neuron_block: components["schemas"]["NeuronBlock"];
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
    } & {
      [key: string]: unknown;
    };
    /** NeuronBlock */
    NeuronBlock: {
      /**
       * Global
       * @default []
       */
      global: {
        [key: string]: string | null;
      }[];
      /**
       * Range
       * @default []
       */
      range: {
        [key: string]: string | null;
      }[];
      /**
       * Useion
       * @default []
       */
      useion: components["schemas"]["UseIon"][];
      /**
       * Nonspecific
       * @default []
       */
      nonspecific: {
        [key: string]: string | null;
      }[];
    } & {
      [key: string]: unknown;
    };
    /** UseIon */
    UseIon: {
      /** Ion Name */
      ion_name: string;
      /**
       * Read
       * @default []
       */
      read: string[];
      /**
       * Write
       * @default []
       */
      write: string[];
      /**
       * Valence
       * @default null
       */
      valence: number | null;
      /**
       * Main Ion
       * @default null
       */
      main_ion: boolean | null;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseEModelReadExpanded */
    ListResponseEModelReadExpanded: {
      /** Data */
      data: components["schemas"]["EModelReadExpanded"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * AgePeriod
     * @enum {string}
     */
    AgePeriod: "prenatal" | "postnatal" | "unknown";
    /** ElectricalCellRecordingRead */
    ElectricalCellRecordingRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      brain_region: components["schemas"]["BrainRegionRead"];
      subject: components["schemas"]["NestedSubjectRead"];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Experiment Date
       * @default null
       */
      experiment_date: string | null;
      /**
       * Contact Email
       * @default null
       */
      contact_email: string | null;
      /**
       * Published In
       * @default null
       */
      published_in: string | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Liquid Junction Potential
       * @description Correction applied to the voltage trace, in mV
       * @default 0
       */
      ljp: number;
      /**
       * Recording Location
       * @description Location on the cell where recording was performed, in hoc-compatible format.
       */
      recording_location: string[];
      /**
       * Recording Type
       * @description Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]
       */
      recording_type: components["schemas"]["ElectricalRecordingType"];
      /**
       * Recording Origin
       * @description Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]
       */
      recording_origin: components["schemas"]["ElectricalRecordingOrigin"];
      /**
       * Temperature
       * @description Temperature at which the recording was performed, in degrees Celsius.
       * @default null
       */
      temperature: number | null;
      /**
       * Comment
       * @description Comment with further details.
       * @default null
       */
      comment: string | null;
      /**
       * Legacy Id
       * @default null
       */
      legacy_id: string[] | null;
      /**
       * Electrical Recording Stimuli
       * @description List of stimuli applied to the cell with their respective time steps
       * @default null
       */
      stimuli:
        | components["schemas"]["NestedElectricalRecordingStimulusRead"][]
        | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * ElectricalRecordingOrigin
     * @enum {string}
     */
    ElectricalRecordingOrigin: "in_vivo" | "in_vitro" | "in_silico" | "unknown";
    /**
     * ElectricalRecordingStimulusShape
     * @enum {string}
     */
    ElectricalRecordingStimulusShape:
      | "cheops"
      | "constant"
      | "pulse"
      | "step"
      | "ramp"
      | "noise"
      | "sinusoidal"
      | "other"
      | "two_steps"
      | "unknown";
    /**
     * ElectricalRecordingStimulusType
     * @enum {string}
     */
    ElectricalRecordingStimulusType:
      | "voltage_clamp"
      | "current_clamp"
      | "conductance_clamp"
      | "extracellular"
      | "other"
      | "unknown";
    /**
     * ElectricalRecordingType
     * @enum {string}
     */
    ElectricalRecordingType:
      | "intracellular"
      | "extracellular"
      | "both"
      | "unknown";
    /** NestedElectricalRecordingStimulusRead */
    NestedElectricalRecordingStimulusRead: {
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Dt
       * @default null
       */
      dt: number | null;
      injection_type: components["schemas"]["ElectricalRecordingStimulusType"];
      shape: components["schemas"]["ElectricalRecordingStimulusShape"];
      /**
       * Start Time
       * @default null
       */
      start_time: number | null;
      /**
       * End Time
       * @default null
       */
      end_time: number | null;
      /**
       * Recording Id
       * Format: uuid
       */
      recording_id: string;
    } & {
      [key: string]: unknown;
    };
    /** NestedSubjectRead */
    NestedSubjectRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @description Sex of the subject */
      sex: components["schemas"]["Sex"];
      /**
       * Weight
       * @description Weight in grams
       * @default null
       */
      weight: components["schemas"]["Weight"] | null;
      /**
       * Age value
       * @description Age value interval.
       * @default null
       */
      age_value: number | null;
      /**
       * Minimum age range
       * @description Minimum age range
       * @default null
       */
      age_min: number | null;
      /**
       * Maximum age range
       * @description Maximum age range
       * @default null
       */
      age_max: number | null;
      /** @default null */
      age_period: components["schemas"]["AgePeriod"] | null;
      species: components["schemas"]["NestedSpeciesRead"];
    } & {
      [key: string]: unknown;
    };
    /**
     * Sex
     * @enum {string}
     */
    Sex: "male" | "female" | "unknown";
    /**
     * Weight
     * @description Weight in grams
     */
    Weight: number;
    /** ListResponseElectricalCellRecordingRead */
    ListResponseElectricalCellRecordingRead: {
      /** Data */
      data: components["schemas"]["ElectricalCellRecordingRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ExperimentalBoutonDensityRead */
    ExperimentalBoutonDensityRead: {
      subject: components["schemas"]["NestedSubjectRead"];
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Measurements */
      measurements: components["schemas"]["MeasurementRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /** MeasurementRead */
    MeasurementRead: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      unit: components["schemas"]["MeasurementUnit"];
      /** Value */
      value: number;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseExperimentalBoutonDensityRead */
    ListResponseExperimentalBoutonDensityRead: {
      /** Data */
      data: components["schemas"]["ExperimentalBoutonDensityRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ExperimentalNeuronDensityRead */
    ExperimentalNeuronDensityRead: {
      subject: components["schemas"]["NestedSubjectRead"];
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Measurements */
      measurements: components["schemas"]["MeasurementRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseExperimentalNeuronDensityRead */
    ListResponseExperimentalNeuronDensityRead: {
      /** Data */
      data: components["schemas"]["ExperimentalNeuronDensityRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * PlotMorphologyGetOneOutput
     * @description Output of the PlotMorphologyGetOneTool.
     */
    PlotMorphologyGetOneOutput: {
      /** Storage Id */
      storage_id: string;
    };
    /** SpeciesRead */
    SpeciesRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSpeciesRead */
    ListResponseSpeciesRead: {
      /** Data */
      data: components["schemas"]["SpeciesRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** StrainRead */
    StrainRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseStrainRead */
    ListResponseStrainRead: {
      /** Data */
      data: components["schemas"]["StrainRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** SubjectRead */
    SubjectRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @description Sex of the subject */
      sex: components["schemas"]["Sex"];
      /**
       * Weight
       * @description Weight in grams
       * @default null
       */
      weight: components["schemas"]["Weight"] | null;
      /**
       * Age value
       * @description Age value interval.
       * @default null
       */
      age_value: number | null;
      /**
       * Minimum age range
       * @description Minimum age range
       * @default null
       */
      age_min: number | null;
      /**
       * Maximum age range
       * @description Maximum age range
       * @default null
       */
      age_max: number | null;
      /** @default null */
      age_period: components["schemas"]["AgePeriod"] | null;
      species: components["schemas"]["NestedSpeciesRead"];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSubjectRead */
    ListResponseSubjectRead: {
      /** Data */
      data: components["schemas"]["SubjectRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * PlotElectricalCellRecordingGetOneOutput
     * @description Output of the PlotElectricalCellRecordingGetOneTool.
     */
    PlotElectricalCellRecordingGetOneOutput: {
      /** Storage Id */
      storage_id: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  question_suggestions_qa_question_suggestions_post: {
    parameters: {
      query?: {
        vlab_id?: string | null;
        project_id?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionsSuggestionsRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QuestionsSuggestions"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_available_LLM_models_qa_models_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OpenRouterModelResponse"][];
        };
      };
    };
  };
  stream_chat_agent_qa_chat_streamed__thread_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_threads_threads_get: {
    parameters: {
      query?: {
        virtual_lab_id?: string | null;
        project_id?: string | null;
        exclude_empty?: boolean;
        creation_date_lte?: string | null;
        creation_date_gte?: string | null;
        sort?:
          | "update_date"
          | "creation_date"
          | "-update_date"
          | "-creation_date";
        cursor?: string | null;
        page_size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedResponse_ThreadsRead_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_thread_threads_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ThreadCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ThreadsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  search_threads_search_get: {
    parameters: {
      query: {
        query: string;
        virtual_lab_id?: string | null;
        project_id?: string | null;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SearchMessagesList"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  generate_title_threads__thread_id__generate_title_patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThreadGeneratBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ThreadsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_thread_by_id_threads__thread_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ThreadsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_thread_threads__thread_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_thread_title_threads__thread_id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThreadUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ThreadsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_thread_messages_threads__thread_id__messages_get: {
    parameters: {
      query?: {
        entity?: ("USER" | "AI_TOOL" | "TOOL" | "AI_MESSAGE")[] | null;
        sort?: "creation_date" | "-creation_date";
        vercel_format?: boolean;
        cursor?: string | null;
        page_size?: number;
      };
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["PaginatedResponse_MessagesRead_"]
            | components["schemas"]["PaginatedResponse_MessagesReadVercel_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  execute_tool_call_tools__thread_id__execute__tool_call_id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
        tool_call_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExecuteToolCallRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExecuteToolCallResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_available_tools_tools_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ToolMetadata"][];
        };
      };
    };
  };
  get_tool_metadata_tools__name__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ToolMetadataDetailed"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  generate_presigned_url_storage__file_identifier__presigned_url_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        file_identifier: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_rate_limit_rate_limit_get: {
    parameters: {
      query?: {
        vlab_id?: string | null;
        project_id?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RateLimitOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  healthz_healthz_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  readyz__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
  settings_settings_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
