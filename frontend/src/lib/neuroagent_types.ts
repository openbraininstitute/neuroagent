/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/qa/question_suggestions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Question Suggestions
     * @description Generate suggested question taking into account the user journey and the user previous messages.
     */
    post: operations["question_suggestions_qa_question_suggestions_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qa/models": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Available Llm Models
     * @description Get available LLM models.
     */
    get: operations["get_available_LLM_models_qa_models_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/qa/chat_streamed/{thread_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Stream Chat Agent
     * @description Run a single agent query in a streamed fashion.
     */
    post: operations["stream_chat_agent_qa_chat_streamed__thread_id__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/threads": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Threads
     * @description Get threads for a user.
     */
    get: operations["get_threads_threads_get"];
    put?: never;
    /**
     * Create Thread
     * @description Create thread.
     */
    post: operations["create_thread_threads_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/threads/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Search
     * @description Get threads for a user.
     */
    get: operations["search_threads_search_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/threads/{thread_id}/generate_title": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Generate Title
     * @description Generate a short thread title based on the user's first message and update thread's title.
     */
    patch: operations["generate_title_threads__thread_id__generate_title_patch"];
    trace?: never;
  };
  "/threads/{thread_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Thread By Id
     * @description Get a specific thread by ID.
     */
    get: operations["get_thread_by_id_threads__thread_id__get"];
    put?: never;
    post?: never;
    /**
     * Delete Thread
     * @description Delete the specified thread and its associated S3 objects.
     */
    delete: operations["delete_thread_threads__thread_id__delete"];
    options?: never;
    head?: never;
    /**
     * Update Thread Title
     * @description Update thread.
     */
    patch: operations["update_thread_title_threads__thread_id__patch"];
    trace?: never;
  };
  "/threads/{thread_id}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Thread Messages
     * @description Get all messages of the thread.
     */
    get: operations["get_thread_messages_threads__thread_id__messages_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tools/{thread_id}/execute/{tool_call_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Execute Tool Call
     * @description Execute a specific tool call and update its status.
     */
    patch: operations["execute_tool_call_tools__thread_id__execute__tool_call_id__patch"];
    trace?: never;
  };
  "/tools": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Available Tools
     * @description Return the list of available tools with their basic metadata.
     */
    get: operations["get_available_tools_tools_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tools/{name}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Tool Metadata
     * @description Return detailed metadata for a specific tool.
     */
    get: operations["get_tool_metadata_tools__name__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/storage/{file_identifier}/presigned-url": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Generate Presigned Url
     * @description Generate a presigned URL for file access.
     */
    get: operations["generate_presigned_url_storage__file_identifier__presigned_url_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/rate_limit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Rate Limit
     * @description Let the user know about its current rate limits.
     */
    get: operations["get_rate_limit_rate_limit_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/state": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get State
     * @description Get an existing state.
     */
    get: operations["get_state_state_get"];
    put?: never;
    /**
     * Create State
     * @description Create state for a user.
     */
    post: operations["create_state_state_post"];
    /**
     * Delete State
     * @description Delete an existing state.
     */
    delete: operations["delete_state_state_delete"];
    options?: never;
    head?: never;
    /**
     * Patch State
     * @description Patch an existing key of the state.
     */
    patch: operations["patch_state_state_patch"];
    trace?: never;
  };
  "/healthz": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Healthz
     * @description Check the health of the API.
     */
    get: operations["healthz_healthz_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Readyz
     * @description Check if the API is ready to accept traffic.
     */
    get: operations["readyz__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Settings
     * @description Show complete settings of the backend.
     *
     *     Did not add return model since it pollutes the Swagger UI.
     */
    get: operations["settings_settings_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** AllNeurons */
    "AllNeurons-Input": {
      /**
       * Type
       * @constant
       */
      type: "AllNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage"]
        | components["schemas"]["SamplePercentage1"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** AllNeurons */
    "AllNeurons-Output": {
      /**
       * Type
       * @constant
       */
      type: "AllNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage"]
        | components["schemas"]["SamplePercentage1"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /**
     * AnnotationMessageVercel
     * @description Annotation of vercel messages.
     */
    AnnotationMessageVercel: {
      /**
       * Messageid
       * Format: uuid
       */
      messageId: string;
      /** Iscomplete */
      isComplete: boolean;
    };
    /**
     * AnnotationToolCallVercel
     * @description Annotation of vercel tool calls.
     */
    AnnotationToolCallVercel: {
      /** Toolcallid */
      toolCallId: string;
      /**
       * Validated
       * @enum {string}
       */
      validated: "accepted" | "rejected" | "not_required" | "pending";
      /** Iscomplete */
      isComplete: boolean;
    };
    /**
     * Architecture
     * @description Model's architecture.
     */
    Architecture: {
      /** Input Modalities */
      input_modalities: string[];
      /** Output Modalities */
      output_modalities: string[];
      /** Tokenizer */
      tokenizer: string;
    };
    /** Circuit */
    Circuit: {
      /** Name */
      name: string;
      /** Path */
      path: string;
      /** Matrix Path */
      matrix_path?: string | null;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "Circuit";
    };
    /** Circuit1 */
    Circuit1:
      | components["schemas"]["Circuit"]
      | components["schemas"]["CircuitFromID"];
    /** CircuitFromID */
    CircuitFromID: {
      /**
       * Id Str
       * @description ID of the entity in string format.
       */
      id_str: string;
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      type: "CircuitFromID";
    };
    /**
     * ClientRequest
     * @description Vercel class.
     */
    ClientRequest: {
      /** Content */
      content: string;
      /** Tool Selection */
      tool_selection?: string[] | null;
      /**
       * Model
       * @default openai/gpt-5-mini
       */
      model: string;
      /** Frontend Url */
      frontend_url?: string | null;
    };
    /** ConstantCurrentClampSomaticStimulus */
    ConstantCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "ConstantCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Amplitude
       * @description The injected current. Given in nanoamps.
       * @default 0.1
       */
      amplitude: number | number[];
    };
    /**
     * Dt
     * @description Timestep of generated signal in milliseconds (ms).
     */
    Dt: number;
    /**
     * Dt1
     * @description Interval between recording time steps in milliseconds (ms).
     */
    Dt1: number;
    /** DtItem */
    DtItem: number;
    /**
     * Duration
     * @description Time duration in milliseconds for how long input is activated.
     */
    Duration: number;
    /** DurationItem */
    DurationItem: number;
    /** Element */
    Element: number;
    /**
     * EndTime
     * @description Recording end time in milliseconds (ms).
     */
    EndTime: number;
    /** EndTimeItem */
    EndTimeItem: number;
    /** ExcitatoryNeurons */
    "ExcitatoryNeurons-Input": {
      /**
       * Type
       * @constant
       */
      type: "ExcitatoryNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage2"]
        | components["schemas"]["SamplePercentage3"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** ExcitatoryNeurons */
    "ExcitatoryNeurons-Output": {
      /**
       * Type
       * @constant
       */
      type: "ExcitatoryNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage2"]
        | components["schemas"]["SamplePercentage3"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /**
     * ExecuteToolCallRequest
     * @description Request body for executing a tool call.
     */
    ExecuteToolCallRequest: {
      /**
       * Validation
       * @enum {string}
       */
      validation: "rejected" | "accepted";
      /** Args */
      args?: string | null;
      /** Feedback */
      feedback?: string | null;
    };
    /**
     * ExecuteToolCallResponse
     * @description Response model for tool execution status.
     */
    ExecuteToolCallResponse: {
      /**
       * Status
       * @enum {string}
       */
      status: "done" | "validation-error";
      /** Content */
      content?: string | null;
    };
    /**
     * ExtracellularCalciumConcentration
     * @description Extracellular calcium concentration around the synapse in millimoles (mM). Increasing this value increases the probability of synaptic vesicle release, which in turn increases the level of network activity. In vivo values are estimated to be ~0.9-1.2mM, whilst in vitro values are on the order of 2mM.
     */
    ExtracellularCalciumConcentration: number;
    /** ExtracellularCalciumConcentrationItem */
    ExtracellularCalciumConcentrationItem: number;
    /**
     * Frequency
     * @description The frequency of pulse trains. Given in Hertz (Hz).
     */
    Frequency: number;
    /**
     * Frequency1
     * @description Mean frequency (Hz) of the Poisson input.
     */
    Frequency1: number;
    /**
     * Frequency2
     * @description The frequency of the waveform. Given in Hertz (Hz).
     */
    Frequency2: number;
    /** FrequencyItem */
    FrequencyItem: number;
    /** FullySynchronousSpikeStimulus */
    FullySynchronousSpikeStimulus: {
      /**
       * Type
       * @constant
       */
      type: "FullySynchronousSpikeStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /** Neuron Set (Source) */
      source_neuron_set: components["schemas"]["NeuronSetReference"];
      /** Neuron Set (Target) */
      targeted_neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** HyperpolarizingCurrentClampSomaticStimulus */
    HyperpolarizingCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "HyperpolarizingCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
    };
    /** IDNeuronSet */
    "IDNeuronSet-Input": {
      /**
       * Type
       * @constant
       */
      type: "IDNeuronSet";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage4"]
        | components["schemas"]["SamplePercentage5"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
      /** Neuron Ids */
      neuron_ids:
        | components["schemas"]["NamedTuple"]
        | components["schemas"]["NeuronIds-Input"];
    };
    /** IDNeuronSet */
    "IDNeuronSet-Output": {
      /**
       * Type
       * @constant
       */
      type: "IDNeuronSet";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage4"]
        | components["schemas"]["SamplePercentage5"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
      /** Neuron Ids */
      neuron_ids:
        | components["schemas"]["NamedTuple"]
        | components["schemas"]["NeuronIds-Output"];
    };
    /** Info */
    Info: {
      /**
       * Type
       * @constant
       */
      type: "Info";
      /**
       * Campaign Name
       * @description Name of the simulation campaign.
       */
      campaign_name: string;
      /**
       * Campaign Description
       * @description Description of the simulation campaign.
       */
      campaign_description: string;
    };
    /** InhibitoryNeurons */
    "InhibitoryNeurons-Input": {
      /**
       * Type
       * @constant
       */
      type: "InhibitoryNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage6"]
        | components["schemas"]["SamplePercentage7"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** InhibitoryNeurons */
    "InhibitoryNeurons-Output": {
      /**
       * Type
       * @constant
       */
      type: "InhibitoryNeurons";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage6"]
        | components["schemas"]["SamplePercentage7"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /**
     * Interval
     * @description Interval between timestamps in milliseconds (ms).
     */
    Interval: number;
    /** IntervalItem */
    IntervalItem: number;
    /** LinearCurrentClampSomaticStimulus */
    LinearCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "LinearCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Start Amplitude
       * @description The amount of current initially injected when the stimulus activates. Given in nanoamps.
       * @default 0.1
       */
      amplitude_start: number | number[];
      /**
       * End Amplitude
       * @description If given, current is interpolated such that current reaches this value when the stimulus concludes. Otherwise, current stays at 'Start Amplitude'. Given in nanoamps.
       * @default 0.2
       */
      amplitude_end: number | number[];
    };
    /**
     * MagnesiumValue
     * @description Extracellular calcium concentration in millimoles (mM).
     */
    MagnesiumValue: number;
    /** MagnesiumValueItem */
    MagnesiumValueItem: number;
    /**
     * MeanPercentageOfThresholdCurrent
     * @description The mean value of current to inject as a percentage of a cell's                     threshold current.
     */
    MeanPercentageOfThresholdCurrent: number;
    /** MeanPercentageOfThresholdCurrentItem */
    MeanPercentageOfThresholdCurrentItem: number;
    /**
     * MessagesRead
     * @description Message response.
     */
    MessagesRead: {
      /**
       * Message Id
       * Format: uuid
       */
      message_id: string;
      /** Entity */
      entity: string;
      /**
       * Thread Id
       * Format: uuid
       */
      thread_id: string;
      /** Is Complete */
      is_complete: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /** Msg Content */
      msg_content: {
        [key: string]: unknown;
      };
      /** Model */
      model?: string | null;
      /** Tool Calls */
      tool_calls: components["schemas"]["ToolCall"][];
    };
    /**
     * MessagesReadVercel
     * @description Message response in Vercel format.
     */
    MessagesReadVercel: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Role */
      role: string;
      /**
       * Createdat
       * Format: date-time
       */
      createdAt: string;
      /** Content */
      content: string;
      /** Parts */
      parts?:
        | (
            | components["schemas"]["ToolCallPartVercel"]
            | components["schemas"]["TextPartVercel"]
            | components["schemas"]["ReasoningPartVercel"]
          )[]
        | null;
      /** Annotations */
      annotations?:
        | (
            | components["schemas"]["AnnotationMessageVercel"]
            | components["schemas"]["AnnotationToolCallVercel"]
          )[]
        | null;
    };
    /** MultiPulseCurrentClampSomaticStimulus */
    MultiPulseCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "MultiPulseCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Amplitude
       * @description The amount of current initially injected when each pulse activates. Given in nanoamps (nA).
       * @default 0.1
       */
      amplitude: number | number[];
      /**
       * Pulse Width
       * @description The length of time each pulse lasts. Given in milliseconds (ms).
       * @default 1
       */
      width:
        | components["schemas"]["Width"]
        | components["schemas"]["WidthItem"][];
      /**
       * Pulse Frequency
       * @description The frequency of pulse trains. Given in Hertz (Hz).
       * @default 1
       */
      frequency:
        | components["schemas"]["Frequency"]
        | components["schemas"]["FrequencyItem"][];
    };
    /** NamedTuple */
    NamedTuple: {
      /** Name */
      name: string;
      /** Elements */
      elements: components["schemas"]["Element"][];
      /**
       * Type
       * @constant
       */
      type: "NamedTuple";
    };
    /** NbS1POmInputs */
    "NbS1POmInputs-Input": {
      /**
       * Type
       * @constant
       */
      type: "nbS1POmInputs";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage8"]
        | components["schemas"]["SamplePercentage9"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** NbS1POmInputs */
    "NbS1POmInputs-Output": {
      /**
       * Type
       * @constant
       */
      type: "nbS1POmInputs";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage8"]
        | components["schemas"]["SamplePercentage9"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** NbS1VPMInputs */
    "NbS1VPMInputs-Input": {
      /**
       * Type
       * @constant
       */
      type: "nbS1VPMInputs";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage10"]
        | components["schemas"]["SamplePercentage11"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** NbS1VPMInputs */
    "NbS1VPMInputs-Output": {
      /**
       * Type
       * @constant
       */
      type: "nbS1VPMInputs";
      /**
       * Sample (Percentage)
       * @description Percentage of neurons to sample between 0 and 100%
       * @default 100
       */
      sample_percentage:
        | components["schemas"]["SamplePercentage10"]
        | components["schemas"]["SamplePercentage11"];
      /**
       * Sample Seed
       * @description Seed for random sampling.
       * @default 1
       */
      sample_seed: number | number[];
    };
    /** NeuronIds */
    "NeuronIds-Input": components["schemas"]["NamedTuple"][];
    /** NeuronIds */
    "NeuronIds-Output": components["schemas"]["NamedTuple"][];
    /** NeuronSetReference */
    NeuronSetReference: {
      /**
       * Block Dict Name
       * @default
       */
      block_dict_name: string;
      /** Block Name */
      block_name: string;
      /**
       * Type
       * @constant
       */
      type: "NeuronSetReference";
    };
    /** NormallyDistributedCurrentClampSomaticStimulus */
    NormallyDistributedCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "NormallyDistributedCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Mean Amplitude
       * @description The mean value of current to inject. Given in nanoamps (nA).
       * @default 0.01
       */
      mean_amplitude: number | number[];
      /**
       * Variance
       * @description The variance around the mean of current to inject using a                     normal distribution.
       * @default 0.01
       */
      variance:
        | components["schemas"]["Variance"]
        | components["schemas"]["VarianceItem"][];
    };
    /** NumberOfRepetition */
    NumberOfRepetition: number;
    /**
     * NumberOfRepetitions
     * @description Number of timestamps to generate.
     */
    NumberOfRepetitions: number;
    /** ObiOneScientificSimulationSimulationsSimulationsFormInitialize */
    "ObiOneScientificSimulationSimulationsSimulationsFormInitialize-Input": {
      /**
       * Type
       * @constant
       */
      type: "SimulationsForm.Initialize";
      /** Circuit */
      circuit:
        | components["schemas"]["Circuit"]
        | components["schemas"]["CircuitFromID"]
        | components["schemas"]["Circuit1"][];
      /**
       * Neuron Set
       * @description Neuron set to simulate.
       */
      node_set: components["schemas"]["NeuronSetReference"];
      /**
       * Duration
       * @description Simulation length in milliseconds (ms).
       * @default 1000
       */
      simulation_length:
        | components["schemas"]["SimulationLength"]
        | components["schemas"]["SimulationLength1"];
      /**
       * Extracellular Calcium Concentration
       * @description Extracellular calcium concentration around the synapse in millimoles (mM). Increasing this value increases the probability of synaptic vesicle release, which in turn increases the level of network activity. In vivo values are estimated to be ~0.9-1.2mM, whilst in vitro values are on the order of 2mM.
       * @default 1.1
       */
      extracellular_calcium_concentration:
        | components["schemas"]["ExtracellularCalciumConcentrationItem"][]
        | components["schemas"]["ExtracellularCalciumConcentration"];
      /**
       * Initial Voltage
       * @description Initial membrane potential in millivolts (mV).
       * @default -80
       */
      v_init: number[] | number;
      /**
       * Random Seed
       * @description Random seed for the simulation.
       * @default 1
       */
      random_seed: number[] | number;
    };
    /** ObiOneScientificSimulationSimulationsSimulationsFormInitialize */
    "ObiOneScientificSimulationSimulationsSimulationsFormInitialize-Output": {
      /**
       * Type
       * @constant
       */
      type: "SimulationsForm.Initialize";
      /** Circuit */
      circuit:
        | components["schemas"]["Circuit"]
        | components["schemas"]["CircuitFromID"]
        | components["schemas"]["Circuit1"][];
      /**
       * Neuron Set
       * @description Neuron set to simulate.
       */
      node_set: components["schemas"]["NeuronSetReference"];
      /**
       * Duration
       * @description Simulation length in milliseconds (ms).
       * @default 1000
       */
      simulation_length:
        | components["schemas"]["SimulationLength"]
        | components["schemas"]["SimulationLength1"];
      /**
       * Extracellular Calcium Concentration
       * @description Extracellular calcium concentration around the synapse in millimoles (mM). Increasing this value increases the probability of synaptic vesicle release, which in turn increases the level of network activity. In vivo values are estimated to be ~0.9-1.2mM, whilst in vitro values are on the order of 2mM.
       * @default 1.1
       */
      extracellular_calcium_concentration:
        | components["schemas"]["ExtracellularCalciumConcentrationItem"][]
        | components["schemas"]["ExtracellularCalciumConcentration"];
      /**
       * Initial Voltage
       * @description Initial membrane potential in millivolts (mV).
       * @default -80
       */
      v_init: number[] | number;
      /**
       * Random Seed
       * @description Random seed for the simulation.
       * @default 1
       */
      random_seed: number[] | number;
    };
    /**
     * OpenRouterModelResponse
     * @description Openrouter's model.
     */
    OpenRouterModelResponse: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Created */
      created: number;
      /** Description */
      description: string;
      architecture: components["schemas"]["Architecture"];
      top_provider: components["schemas"]["TopProvider"];
      pricing: components["schemas"]["Pricing"];
      /** Context Length */
      context_length: number;
      /** Hugging Face Id */
      hugging_face_id?: string | null;
      /** Per Request Limits */
      per_request_limits?: {
        [key: string]: string;
      } | null;
      /** Supported Parameters */
      supported_parameters: string[];
    };
    /** PaginatedResponse[MessagesReadVercel] */
    PaginatedResponse_MessagesReadVercel_: {
      /** Next Cursor */
      next_cursor: string | null;
      /** Has More */
      has_more: boolean;
      /** Page Size */
      page_size: number;
      /** Results */
      results: components["schemas"]["MessagesReadVercel"][];
    };
    /** PaginatedResponse[MessagesRead] */
    PaginatedResponse_MessagesRead_: {
      /** Next Cursor */
      next_cursor: string | null;
      /** Has More */
      has_more: boolean;
      /** Page Size */
      page_size: number;
      /** Results */
      results: components["schemas"]["MessagesRead"][];
    };
    /** PaginatedResponse[ThreadsRead] */
    PaginatedResponse_ThreadsRead_: {
      /** Next Cursor */
      next_cursor: string | null;
      /** Has More */
      has_more: boolean;
      /** Page Size */
      page_size: number;
      /** Results */
      results: components["schemas"]["ThreadsRead"][];
    };
    /**
     * PercentageOfThresholdCurrent
     * @description The percentage of a cell's threshold current to inject when the stimulus                     activates.
     */
    PercentageOfThresholdCurrent: number;
    /**
     * PercentageOfThresholdCurrentEnd
     * @description If given, the percentage of a cell's threshold current is interpolated such that the percentage reaches this value when the stimulus concludes.
     */
    PercentageOfThresholdCurrentEnd: number;
    /** PercentageOfThresholdCurrentEndItem */
    PercentageOfThresholdCurrentEndItem: number;
    /** PercentageOfThresholdCurrentItem */
    PercentageOfThresholdCurrentItem: number;
    /**
     * PercentageOfThresholdCurrentStart
     * @description The percentage of a cell's threshold current to inject when the stimulus activates.
     */
    PercentageOfThresholdCurrentStart: number;
    /** PercentageOfThresholdCurrentStartItem */
    PercentageOfThresholdCurrentStartItem: number;
    /** PoissonSpikeStimulus */
    PoissonSpikeStimulus: {
      /**
       * Type
       * @constant
       */
      type: "PoissonSpikeStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /** Neuron Set (Source) */
      source_neuron_set: components["schemas"]["NeuronSetReference"];
      /** Neuron Set (Target) */
      targeted_neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1000
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Frequency
       * @description Mean frequency (Hz) of the Poisson input.
       * @default 1
       */
      frequency:
        | components["schemas"]["Frequency1"]
        | components["schemas"]["FrequencyItem"][];
      /**
       * Random Seed
       * @description Seed for the random number generator to ensure reproducibility of the spike generation.
       * @default 0
       */
      random_seed: number | number[];
    };
    /**
     * Pricing
     * @description Model's pricing.
     */
    Pricing: {
      /** Prompt */
      prompt: string;
      /** Completion */
      completion: string;
      /** Image */
      image?: string | null;
      /** Request */
      request?: string | null;
      /** Input Cache Read */
      input_cache_read?: string | null;
      /** Input Cache Write */
      input_cache_write?: string | null;
      /** Web Search */
      web_search?: string | null;
      /** Internal Reasoning */
      internal_reasoning?: string | null;
    };
    /**
     * Question
     * @description One suggested question by the LLM.
     */
    Question: {
      /** Question */
      question: string;
    };
    /**
     * QuestionsSuggestions
     * @description All suggested questions by the LLM when there are already messages.
     */
    QuestionsSuggestions: {
      /** Suggestions */
      suggestions?: components["schemas"]["Question"][];
    };
    /**
     * QuestionsSuggestionsRequest
     * @description Request for the suggestion endpoint.
     */
    QuestionsSuggestionsRequest: {
      /** Click History */
      click_history?: components["schemas"]["UserJourney"][] | null;
      /** Thread Id */
      thread_id?: string | null;
    };
    /**
     * RateLimitInfo
     * @description Information regarding the rate limit of a user for a single category.
     */
    RateLimitInfo: {
      /** Limit */
      limit: number;
      /** Remaining */
      remaining: number;
      /** Reset In */
      reset_in?: number | null;
    };
    /**
     * RateLimitOutput
     * @description Output of the GET rate_limit endpoint.
     */
    RateLimitOutput: {
      chat_streamed: components["schemas"]["RateLimitInfo"];
      question_suggestions: components["schemas"]["RateLimitInfo"];
      generate_title: components["schemas"]["RateLimitInfo"];
    };
    /**
     * ReasoningPartVercel
     * @description Text part of Vercel.
     */
    ReasoningPartVercel: {
      /**
       * Type
       * @default reasoning
       * @constant
       */
      type: "reasoning";
      /** Reasoning */
      reasoning: string;
    };
    /** RegularTimestamps */
    RegularTimestamps: {
      /**
       * Type
       * @constant
       */
      type: "RegularTimestamps";
      /**
       * Start Time
       * @description Sart time of the timestamps in milliseconds (ms).
       * @default 0
       */
      start_time:
        | components["schemas"]["StartTime"]
        | components["schemas"]["StartTimeItem"][];
      /**
       * Interval
       * @description Interval between timestamps in milliseconds (ms).
       * @default 10
       */
      interval:
        | components["schemas"]["Interval"]
        | components["schemas"]["IntervalItem"][];
      /**
       * Number Of Repetitions
       * @description Number of timestamps to generate.
       * @default 10
       */
      number_of_repetitions:
        | components["schemas"]["NumberOfRepetitions"]
        | components["schemas"]["NumberOfRepetition"][];
    };
    /** RelativeConstantCurrentClampSomaticStimulus */
    RelativeConstantCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "RelativeConstantCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Percentage of Threshold Current
       * @description The percentage of a cell's threshold current to inject when the stimulus                     activates.
       * @default 10
       */
      percentage_of_threshold_current:
        | components["schemas"]["PercentageOfThresholdCurrent"]
        | components["schemas"]["PercentageOfThresholdCurrentItem"][];
    };
    /** RelativeLinearCurrentClampSomaticStimulus */
    RelativeLinearCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "RelativeLinearCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Percentage of Threshold Current (Start)
       * @description The percentage of a cell's threshold current to inject when the stimulus activates.
       * @default 10
       */
      percentage_of_threshold_current_start:
        | components["schemas"]["PercentageOfThresholdCurrentStart"]
        | components["schemas"]["PercentageOfThresholdCurrentStartItem"][];
      /**
       * Percentage of Threshold Current (End)
       * @description If given, the percentage of a cell's threshold current is interpolated such that the percentage reaches this value when the stimulus concludes.
       * @default 100
       */
      percentage_of_threshold_current_end:
        | components["schemas"]["PercentageOfThresholdCurrentEnd"]
        | components["schemas"]["PercentageOfThresholdCurrentEndItem"][];
    };
    /** RelativeNormallyDistributedCurrentClampSomaticStimulus */
    RelativeNormallyDistributedCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "RelativeNormallyDistributedCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Percentage of Threshold Current (Mean)
       * @description The mean value of current to inject as a percentage of a cell's                     threshold current.
       * @default 0.01
       */
      mean_percentage_of_threshold_current:
        | components["schemas"]["MeanPercentageOfThresholdCurrent"]
        | components["schemas"]["MeanPercentageOfThresholdCurrentItem"][];
      /**
       * Variance
       * @description The variance around the mean of current to inject using a                     normal distribution.
       * @default 0.01
       */
      variance:
        | components["schemas"]["Variance"]
        | components["schemas"]["VarianceItem"][];
    };
    /**
     * SamplePercentage
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage: number;
    /**
     * SamplePercentage1
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage1: components["schemas"]["SamplePercentage1Item"][];
    /**
     * SamplePercentage10
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage10: number;
    /**
     * SamplePercentage11
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage11: components["schemas"]["SamplePercentage11Item"][];
    /** SamplePercentage11Item */
    SamplePercentage11Item: number;
    /** SamplePercentage1Item */
    SamplePercentage1Item: number;
    /**
     * SamplePercentage2
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage2: number;
    /**
     * SamplePercentage3
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage3: components["schemas"]["SamplePercentage3Item"][];
    /** SamplePercentage3Item */
    SamplePercentage3Item: number;
    /**
     * SamplePercentage4
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage4: number;
    /**
     * SamplePercentage5
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage5: components["schemas"]["SamplePercentage5Item"][];
    /** SamplePercentage5Item */
    SamplePercentage5Item: number;
    /**
     * SamplePercentage6
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage6: number;
    /**
     * SamplePercentage7
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage7: components["schemas"]["SamplePercentage7Item"][];
    /** SamplePercentage7Item */
    SamplePercentage7Item: number;
    /**
     * SamplePercentage8
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage8: number;
    /**
     * SamplePercentage9
     * @description Percentage of neurons to sample between 0 and 100%
     */
    SamplePercentage9: components["schemas"]["SamplePercentage9Item"][];
    /** SamplePercentage9Item */
    SamplePercentage9Item: number;
    /** ScaleAcetylcholineUSESynapticManipulation */
    ScaleAcetylcholineUSESynapticManipulation: {
      /**
       * Type
       * @constant
       */
      type: "ScaleAcetylcholineUSESynapticManipulation";
      /**
       * Scale U_SE (ACh)
       * @description Scale the U_SE (ACh) parameter of the Tsodyks-Markram synaptic model.
       * @default 0.7050728631217412
       */
      use_scaling:
        | components["schemas"]["UseScaling"]
        | components["schemas"]["UseScalingItem"][];
    };
    /**
     * SearchMessagesList
     * @description Class for the message search result list.
     */
    SearchMessagesList: {
      /** Result List */
      result_list: components["schemas"]["SearchMessagesResult"][];
    };
    /**
     * SearchMessagesResult
     * @description Class for the one result of the message search.
     */
    SearchMessagesResult: {
      /**
       * Thread Id
       * Format: uuid
       */
      thread_id: string;
      /**
       * Message Id
       * Format: uuid
       */
      message_id: string;
      /** Title */
      title: string;
      /** Content */
      content: string;
    };
    /**
     * SharedState
     * @description State shared between backend and frontend.
     */
    SharedState: {
      /** @default {
       *       "type": "SimulationsForm",
       *       "timestamps": {},
       *       "stimuli": {},
       *       "recordings": {},
       *       "neuron_sets": {},
       *       "synaptic_manipulations": {},
       *       "initialize": {
       *         "circuit": {
       *           "id_str": "",
       *           "type": "CircuitFromID"
       *         },
       *         "extracellular_calcium_concentration": 1.1,
       *         "node_set": {
       *           "block_dict_name": "",
       *           "block_name": "",
       *           "type": "NeuronSetReference"
       *         },
       *         "random_seed": 1,
       *         "simulation_length": 1000,
       *         "type": "SimulationsForm.Initialize",
       *         "v_init": -80
       *       },
       *       "info": {
       *         "campaign_description": "description",
       *         "campaign_name": "name",
       *         "type": "Info"
       *       }
       *     } */
      smc_simulation_config: components["schemas"]["SimulationsForm-Output"];
    };
    /**
     * SimulationLength
     * @description Simulation length in milliseconds (ms).
     */
    SimulationLength: number;
    /**
     * SimulationLength1
     * @description Simulation length in milliseconds (ms).
     */
    SimulationLength1: components["schemas"]["SimulationLength1Item"][];
    /** SimulationLength1Item */
    SimulationLength1Item: number;
    /** SimulationsForm */
    "SimulationsForm-Input": {
      /**
       * Type
       * @constant
       */
      type: "SimulationsForm";
      /**
       * Timestamps
       * @description Timestamps for the simulation.
       */
      timestamps?: {
        [key: string]:
          | components["schemas"]["SingleTimestamp"]
          | components["schemas"]["RegularTimestamps"];
      } | null;
      /**
       * Stimuli
       * @description Stimuli for the simulation.
       */
      stimuli?: {
        [key: string]:
          | components["schemas"]["ConstantCurrentClampSomaticStimulus"]
          | components["schemas"]["HyperpolarizingCurrentClampSomaticStimulus"]
          | components["schemas"]["LinearCurrentClampSomaticStimulus"]
          | components["schemas"]["MultiPulseCurrentClampSomaticStimulus"]
          | components["schemas"]["NormallyDistributedCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeNormallyDistributedCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeConstantCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeLinearCurrentClampSomaticStimulus"]
          | components["schemas"]["SinusoidalCurrentClampSomaticStimulus"]
          | components["schemas"]["SubthresholdCurrentClampSomaticStimulus"]
          | components["schemas"]["PoissonSpikeStimulus"]
          | components["schemas"]["FullySynchronousSpikeStimulus"];
      } | null;
      /**
       * Recordings
       * @description Recordings for the simulation.
       */
      recordings?: {
        [key: string]:
          | components["schemas"]["SomaVoltageRecording"]
          | components["schemas"]["TimeWindowSomaVoltageRecording"];
      } | null;
      /**
       * Neuron Sets
       * @description Neuron sets for the simulation.
       */
      neuron_sets?: {
        [key: string]:
          | components["schemas"]["IDNeuronSet-Input"]
          | components["schemas"]["NbS1VPMInputs-Input"]
          | components["schemas"]["NbS1POmInputs-Input"]
          | components["schemas"]["AllNeurons-Input"]
          | components["schemas"]["ExcitatoryNeurons-Input"]
          | components["schemas"]["InhibitoryNeurons-Input"];
      } | null;
      /**
       * Synaptic Manipulations
       * @description Synaptic manipulations for the simulation.
       */
      synaptic_manipulations?: {
        [key: string]:
          | components["schemas"]["SynapticMgManipulation"]
          | components["schemas"]["ScaleAcetylcholineUSESynapticManipulation"];
      } | null;
      /**
       * Initialization
       * @description Parameters for initializing the simulation.
       */
      initialize: components["schemas"]["ObiOneScientificSimulationSimulationsSimulationsFormInitialize-Input"];
      /** @description Information about the simulation campaign. */
      info: components["schemas"]["Info"];
    };
    /** SimulationsForm */
    "SimulationsForm-Output": {
      /**
       * Type
       * @constant
       */
      type: "SimulationsForm";
      /**
       * Timestamps
       * @description Timestamps for the simulation.
       */
      timestamps?: {
        [key: string]:
          | components["schemas"]["SingleTimestamp"]
          | components["schemas"]["RegularTimestamps"];
      } | null;
      /**
       * Stimuli
       * @description Stimuli for the simulation.
       */
      stimuli?: {
        [key: string]:
          | components["schemas"]["ConstantCurrentClampSomaticStimulus"]
          | components["schemas"]["HyperpolarizingCurrentClampSomaticStimulus"]
          | components["schemas"]["LinearCurrentClampSomaticStimulus"]
          | components["schemas"]["MultiPulseCurrentClampSomaticStimulus"]
          | components["schemas"]["NormallyDistributedCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeNormallyDistributedCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeConstantCurrentClampSomaticStimulus"]
          | components["schemas"]["RelativeLinearCurrentClampSomaticStimulus"]
          | components["schemas"]["SinusoidalCurrentClampSomaticStimulus"]
          | components["schemas"]["SubthresholdCurrentClampSomaticStimulus"]
          | components["schemas"]["PoissonSpikeStimulus"]
          | components["schemas"]["FullySynchronousSpikeStimulus"];
      } | null;
      /**
       * Recordings
       * @description Recordings for the simulation.
       */
      recordings?: {
        [key: string]:
          | components["schemas"]["SomaVoltageRecording"]
          | components["schemas"]["TimeWindowSomaVoltageRecording"];
      } | null;
      /**
       * Neuron Sets
       * @description Neuron sets for the simulation.
       */
      neuron_sets?: {
        [key: string]:
          | components["schemas"]["IDNeuronSet-Output"]
          | components["schemas"]["NbS1VPMInputs-Output"]
          | components["schemas"]["NbS1POmInputs-Output"]
          | components["schemas"]["AllNeurons-Output"]
          | components["schemas"]["ExcitatoryNeurons-Output"]
          | components["schemas"]["InhibitoryNeurons-Output"];
      } | null;
      /**
       * Synaptic Manipulations
       * @description Synaptic manipulations for the simulation.
       */
      synaptic_manipulations?: {
        [key: string]:
          | components["schemas"]["SynapticMgManipulation"]
          | components["schemas"]["ScaleAcetylcholineUSESynapticManipulation"];
      } | null;
      /**
       * Initialization
       * @description Parameters for initializing the simulation.
       */
      initialize: components["schemas"]["ObiOneScientificSimulationSimulationsSimulationsFormInitialize-Output"];
      /** @description Information about the simulation campaign. */
      info: components["schemas"]["Info"];
    };
    /** SingleTimestamp */
    SingleTimestamp: {
      /**
       * Type
       * @constant
       */
      type: "SingleTimestamp";
      /**
       * Start Time
       * @description Sart time of the timestamps in milliseconds (ms).
       * @default 0
       */
      start_time:
        | components["schemas"]["StartTime"]
        | components["schemas"]["StartTimeItem"][];
    };
    /** SinusoidalCurrentClampSomaticStimulus */
    SinusoidalCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "SinusoidalCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Maximum Amplitude
       * @description The maximum (and starting) amplitude of the sinusoid. Given in nanoamps (nA).
       * @default 0.1
       */
      maximum_amplitude: number | number[];
      /**
       * Frequency
       * @description The frequency of the waveform. Given in Hertz (Hz).
       * @default 1
       */
      frequency:
        | components["schemas"]["Frequency2"]
        | components["schemas"]["FrequencyItem"][];
      /**
       * Timestep
       * @description Timestep of generated signal in milliseconds (ms).
       * @default 0.025
       */
      dt: components["schemas"]["Dt"] | components["schemas"]["DtItem"][];
    };
    /** SomaVoltageRecording */
    SomaVoltageRecording: {
      /**
       * Type
       * @constant
       */
      type: "SomaVoltageRecording";
      /**
       * Neuron Set
       * @description Neuron set to record from.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestep
       * @description Interval between recording time steps in milliseconds (ms).
       * @default 0.1
       */
      dt: components["schemas"]["Dt1"] | components["schemas"]["DtItem"][];
    };
    /**
     * StartTime
     * @description Sart time of the timestamps in milliseconds (ms).
     */
    StartTime: number;
    /**
     * StartTime2
     * @description Recording start time in milliseconds (ms).
     */
    StartTime2: number;
    /** StartTimeItem */
    StartTimeItem: number;
    /**
     * StateCreate
     * @description Body of the create state endpoint.
     */
    StateCreate: {
      /** @default {
       *       "type": "SimulationsForm",
       *       "timestamps": {},
       *       "stimuli": {},
       *       "recordings": {},
       *       "neuron_sets": {},
       *       "synaptic_manipulations": {},
       *       "initialize": {
       *         "circuit": {
       *           "id_str": "",
       *           "type": "CircuitFromID"
       *         },
       *         "extracellular_calcium_concentration": 1.1,
       *         "node_set": {
       *           "block_dict_name": "",
       *           "block_name": "",
       *           "type": "NeuronSetReference"
       *         },
       *         "random_seed": 1,
       *         "simulation_length": 1000,
       *         "type": "SimulationsForm.Initialize",
       *         "v_init": -80
       *       },
       *       "info": {
       *         "campaign_description": "description",
       *         "campaign_name": "name",
       *         "type": "Info"
       *       }
       *     } */
      smc_simulation_config: components["schemas"]["SimulationsForm-Input"];
    };
    /**
     * StatePatch
     * @description Patch class for states.
     */
    StatePatch: {
      updated_json: components["schemas"]["SimulationsForm-Input"];
    };
    /**
     * StateRead
     * @description Read class for states.
     */
    StateRead: {
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      state: components["schemas"]["SharedState"];
    };
    /** SubthresholdCurrentClampSomaticStimulus */
    SubthresholdCurrentClampSomaticStimulus: {
      /**
       * Type
       * @constant
       */
      type: "SubthresholdCurrentClampSomaticStimulus";
      /**
       * Timestamps
       * @description Timestamps at which the stimulus is applied.
       */
      timestamps: components["schemas"]["TimestampsReference"];
      /**
       * Neuron Set
       * @description Neuron set to which the stimulus is applied.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestamp Offset
       * @description The offset of the stimulus relative to each timestamp in milliseconds (ms).
       * @default 0
       */
      timestamp_offset: number | number[] | null;
      /**
       * Duration
       * @description Time duration in milliseconds for how long input is activated.
       * @default 1
       */
      duration:
        | components["schemas"]["Duration"]
        | components["schemas"]["DurationItem"][];
      /**
       * Percentage Below Threshold
       * @description A percentage adjusted from 100 of a cell's threshold current.                         E.g. 20 will apply 80\% of the threshold current. Using a negative                             value will give more than 100. E.g. -20 will inject 120\% of the                                 threshold current.
       * @default 0.1
       */
      percentage_below_threshold: number | number[];
    };
    /** SynapticMgManipulation */
    SynapticMgManipulation: {
      /**
       * Type
       * @constant
       */
      type: "SynapticMgManipulation";
      /**
       * Extracellular Magnesium Concentration
       * @description Extracellular calcium concentration in millimoles (mM).
       * @default 2.4
       */
      magnesium_value:
        | components["schemas"]["MagnesiumValue"]
        | components["schemas"]["MagnesiumValueItem"][];
    };
    /**
     * TextPartVercel
     * @description Text part of Vercel.
     */
    TextPartVercel: {
      /**
       * Type
       * @default text
       * @constant
       */
      type: "text";
      /** Text */
      text: string;
    };
    /**
     * ThreadCreate
     * @description Data class for the update of a thread.
     */
    ThreadCreate: {
      /**
       * Title
       * @default New chat
       */
      title: string;
      /** Virtual Lab Id */
      virtual_lab_id?: string | null;
      /** Project Id */
      project_id?: string | null;
    };
    /**
     * ThreadGeneratBody
     * @description Data class for input of the thread generation.
     */
    ThreadGeneratBody: {
      /** First User Message */
      first_user_message: string;
    };
    /**
     * ThreadUpdate
     * @description Data class for the update of a thread.
     */
    ThreadUpdate: {
      /** Title */
      title: string;
    };
    /**
     * ThreadsRead
     * @description Data class to read chatbot conversations in the db.
     */
    ThreadsRead: {
      /**
       * Thread Id
       * Format: uuid
       */
      thread_id: string;
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /** Vlab Id */
      vlab_id: string | null;
      /** Project Id */
      project_id: string | null;
      /** Title */
      title: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
    };
    /** TimeWindowSomaVoltageRecording */
    TimeWindowSomaVoltageRecording: {
      /**
       * Type
       * @constant
       */
      type: "TimeWindowSomaVoltageRecording";
      /**
       * Neuron Set
       * @description Neuron set to record from.
       */
      neuron_set: components["schemas"]["NeuronSetReference"];
      /**
       * Timestep
       * @description Interval between recording time steps in milliseconds (ms).
       * @default 0.1
       */
      dt: components["schemas"]["Dt1"] | components["schemas"]["DtItem"][];
      /**
       * Start Time
       * @description Recording start time in milliseconds (ms).
       * @default 0
       */
      start_time:
        | components["schemas"]["StartTime2"]
        | components["schemas"]["StartTimeItem"][];
      /**
       * End Time
       * @description Recording end time in milliseconds (ms).
       * @default 100
       */
      end_time:
        | components["schemas"]["EndTime"]
        | components["schemas"]["EndTimeItem"][];
    };
    /** TimestampsReference */
    TimestampsReference: {
      /**
       * Block Dict Name
       * @default
       */
      block_dict_name: string;
      /** Block Name */
      block_name: string;
      /**
       * Type
       * @constant
       */
      type: "TimestampsReference";
    };
    /**
     * ToolCall
     * @description Tool call.
     */
    ToolCall: {
      /** Tool Call Id */
      tool_call_id: string;
      /** Name */
      name: string;
      /** Arguments */
      arguments: string;
      /**
       * Validated
       * @enum {string}
       */
      validated: "accepted" | "rejected" | "pending" | "not_required";
    };
    /**
     * ToolCallPartVercel
     * @description Tool call part from Vercel.
     */
    ToolCallPartVercel: {
      /**
       * Type
       * @default tool-invocation
       * @constant
       */
      type: "tool-invocation";
      toolInvocation: components["schemas"]["ToolCallVercel"];
    };
    /**
     * ToolCallVercel
     * @description Tool call in Vercel format.
     */
    ToolCallVercel: {
      /** Toolcallid */
      toolCallId: string;
      /** Toolname */
      toolName: string;
      /** Args */
      args: {
        [key: string]: unknown;
      };
      /**
       * State
       * @enum {string}
       */
      state: "partial-call" | "call" | "result";
      /** Result */
      result?: string | null;
    };
    /**
     * ToolMetadata
     * @description Data class for basic tool metadata.
     */
    ToolMetadata: {
      /** Name */
      name: string;
      /** Name Frontend */
      name_frontend: string;
    };
    /**
     * ToolMetadataDetailed
     * @description Data class for detailed tool metadata including online status.
     */
    ToolMetadataDetailed: {
      /** Name */
      name: string;
      /** Name Frontend */
      name_frontend: string;
      /** Description */
      description: string;
      /** Description Frontend */
      description_frontend: string;
      /** Utterances */
      utterances: string[];
      /** Input Schema */
      input_schema: string;
      /** Hil */
      hil: boolean;
      /** Is Online */
      is_online: boolean;
    };
    /**
     * TopProvider
     * @description Model's provider.
     */
    TopProvider: {
      /** Is Moderated */
      is_moderated: boolean;
    };
    /**
     * UseScaling
     * @description Scale the U_SE (ACh) parameter of the Tsodyks-Markram synaptic model.
     */
    UseScaling: number;
    /** UseScalingItem */
    UseScalingItem: number;
    /**
     * UserJourney
     * @description Schema of the user's journey.
     */
    UserJourney: {
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /** Region */
      region: string;
      /** Artifact */
      artifact?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * Variance
     * @description The variance around the mean of current to inject using a                     normal distribution.
     */
    Variance: number;
    /** VarianceItem */
    VarianceItem: number;
    /**
     * Width
     * @description The length of time each pulse lasts. Given in milliseconds (ms).
     */
    Width: number;
    /** WidthItem */
    WidthItem: number;
    /**
     * AssetLabel
     * @description See docs/asset-labels.md.
     * @enum {string}
     */
    AssetLabel:
      | "morphology"
      | "cell_composition_summary"
      | "cell_composition_volumes"
      | "single_neuron_synaptome_config"
      | "single_neuron_synaptome_simulation_data"
      | "single_neuron_simulation_data"
      | "sonata_circuit"
      | "compressed_sonata_circuit"
      | "circuit_figures"
      | "circuit_analysis_data"
      | "circuit_connectivity_matrices"
      | "nwb"
      | "neuron_hoc"
      | "emodel_optimization_output"
      | "sonata_simulation_config"
      | "simulation_generation_config"
      | "custom_node_sets"
      | "campaign_generation_config"
      | "campaign_summary"
      | "replay_spikes"
      | "voltage_report"
      | "spike_report"
      | "neuron_mechanisms"
      | "brain_atlas_annotation"
      | "brain_atlas_region_mesh"
      | "voxel_densities"
      | "validation_result_figure"
      | "validation_result_details"
      | "simulation_designer_image"
      | "circuit_visualization"
      | "node_stats"
      | "network_stats_a"
      | "network_stats_b";
    /** AssetRead */
    AssetRead: {
      /** Size */
      size: number;
      /** Sha256 Digest */
      sha256_digest: string | null;
      /** Path */
      path: string;
      /** Full Path */
      full_path: string;
      /** Is Directory */
      is_directory: boolean;
      content_type: components["schemas"]["ContentType"];
      /**
       * Meta
       * @default {}
       */
      meta: {
        [key: string]: unknown;
      };
      label: components["schemas"]["AssetLabel"];
      storage_type: components["schemas"]["StorageType"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      status: components["schemas"]["AssetStatus"];
    } & {
      [key: string]: unknown;
    };
    /**
     * AssetStatus
     * @enum {string}
     */
    AssetStatus: "created" | "deleted";
    /**
     * ContentType
     * @enum {string}
     */
    ContentType:
      | "application/json"
      | "application/swc"
      | "application/nrrd"
      | "application/obj"
      | "application/hoc"
      | "application/asc"
      | "application/abf"
      | "application/nwb"
      | "application/x-hdf5"
      | "text/plain"
      | "application/vnd.directory"
      | "application/mod"
      | "application/pdf"
      | "image/png"
      | "image/jpeg"
      | "model/gltf-binary"
      | "application/gzip"
      | "image/webp";
    /** Facet */
    Facet: {
      /** Id */
      id: string | number;
      /** Label */
      label: string;
      /** Count */
      count: number;
      /** Type */
      type: string | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * Facets
     * @default null
     */
    Facets: {
      [key: string]: components["schemas"]["Facet"][];
    } | null;
    /** PaginationResponse */
    PaginationResponse: {
      /** Page */
      page: number;
      /** Page Size */
      page_size: number;
      /** Total Items */
      total_items: number;
    } & {
      [key: string]: unknown;
    };
    /**
     * StorageType
     * @description Storage type.
     * @enum {string}
     */
    StorageType: "aws_s3_internal" | "aws_s3_open";
    /** ListResponseAssetRead */
    ListResponseAssetRead: {
      /** Data */
      data: components["schemas"]["AssetRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * AssetDownloadOneOutput
     * @description Output schema for AssetDownloadOneTool.
     */
    AssetDownloadOneOutput: {
      /**
       * Presigned Url
       * @description The presigned URL for downloading the asset
       */
      presigned_url: string;
    };
    /** BrainAtlasRead */
    BrainAtlasRead: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /**
       * Hierarchy Id
       * Format: uuid
       */
      hierarchy_id: string;
      species: components["schemas"]["NestedSpeciesRead"];
    } & {
      [key: string]: unknown;
    };
    /** NestedPersonRead */
    NestedPersonRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Given Name
       * @default null
       */
      given_name: string | null;
      /**
       * Family Name
       * @default null
       */
      family_name: string | null;
      /** Pref Label */
      pref_label: string;
      /** Type */
      type: string;
      /** Sub Id */
      sub_id: string | null;
    } & {
      [key: string]: unknown;
    };
    /** NestedSpeciesRead */
    NestedSpeciesRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseBrainAtlasRead */
    ListResponseBrainAtlasRead: {
      /** Data */
      data: components["schemas"]["BrainAtlasRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** BrainRegionRead */
    BrainRegionRead: {
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Annotation Value */
      annotation_value: number;
      /** Name */
      name: string;
      /** Acronym */
      acronym: string;
      /** Color Hex Triplet */
      color_hex_triplet: string;
      /** Parent Structure Id */
      parent_structure_id: string | null;
      /**
       * Hierarchy Id
       * Format: uuid
       */
      hierarchy_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseBrainRegionRead */
    ListResponseBrainRegionRead: {
      /** Data */
      data: components["schemas"]["BrainRegionRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** BrainRegionHierarchyRead */
    BrainRegionHierarchyRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseBrainRegionHierarchyRead */
    ListResponseBrainRegionHierarchyRead: {
      /** Data */
      data: components["schemas"]["BrainRegionHierarchyRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * ContextAnalyzerOutput
     * @description Output of the Context Analyzer tool.
     */
    ContextAnalyzerOutput: {
      /** Is In Project */
      is_in_project: boolean;
      /** Full Page Path */
      full_page_path: string;
      /** Page Description */
      page_description: string;
    };
    /** AgentRead */
    AgentRead:
      | components["schemas"]["NestedPersonRead"]
      | components["schemas"]["NestedConsortiumRead"];
    /** ContributionRead */
    ContributionRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      agent: components["schemas"]["AgentRead"];
      role: components["schemas"]["RoleRead"];
      entity: components["schemas"]["NestedEntityRead"];
    } & {
      [key: string]: unknown;
    };
    /** NestedConsortiumRead */
    NestedConsortiumRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Pref Label */
      pref_label: string;
      /**
       * Alternative Name
       * @default null
       */
      alternative_name: string | null;
      /** Type */
      type: string;
    } & {
      [key: string]: unknown;
    };
    /** NestedEntityRead */
    NestedEntityRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Type */
      type: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /** Authorized Public */
      authorized_public: boolean;
    } & {
      [key: string]: unknown;
    };
    /** RoleRead */
    RoleRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Role Id */
      role_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseContributionRead */
    ListResponseContributionRead: {
      /** Data */
      data: components["schemas"]["ContributionRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** Annotation */
    Annotation: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Pref Label */
      pref_label: string;
      /** Alt Label */
      alt_label: string;
      /** Definition */
      definition: string;
    } & {
      [key: string]: unknown;
    };
    /** EModelRead */
    EModelRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Iteration */
      iteration: string;
      /** Score */
      score: number;
      /** Seed */
      seed: number;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      exemplar_morphology: components["schemas"]["ExemplarMorphology"];
    } & {
      [key: string]: unknown;
    };
    /**
     * EntityType
     * @description Entity types.
     * @enum {string}
     */
    EntityType:
      | "analysis_software_source_code"
      | "brain_atlas"
      | "brain_atlas_region"
      | "cell_composition"
      | "electrical_cell_recording"
      | "electrical_recording_stimulus"
      | "emodel"
      | "experimental_bouton_density"
      | "experimental_neuron_density"
      | "experimental_synapses_per_connection"
      | "external_url"
      | "ion_channel_model"
      | "memodel"
      | "mesh"
      | "memodel_calibration_result"
      | "me_type_density"
      | "publication"
      | "reconstruction_morphology"
      | "simulation"
      | "simulation_campaign"
      | "simulation_campaign_generation"
      | "simulation_execution"
      | "simulation_result"
      | "scientific_artifact"
      | "single_neuron_simulation"
      | "single_neuron_synaptome"
      | "single_neuron_synaptome_simulation"
      | "subject"
      | "validation_result"
      | "circuit";
    /** ExemplarMorphology */
    ExemplarMorphology: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default null */
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
    } & {
      [key: string]: unknown;
    };
    /** LicenseRead */
    LicenseRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Label */
      label: string;
    } & {
      [key: string]: unknown;
    };
    /** MEModelCalibrationResultRead */
    MEModelCalibrationResultRead: {
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Holding Current */
      holding_current: number;
      /** Threshold Current */
      threshold_current: number;
      /**
       * Rin
       * @default null
       */
      rin: number | null;
      /**
       * Calibrated Entity Id
       * Format: uuid
       */
      calibrated_entity_id: string;
    } & {
      [key: string]: unknown;
    };
    /** MEModelRead */
    MEModelRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      validation_status?: components["schemas"]["ValidationStatus"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      morphology: components["schemas"]["ReconstructionMorphologyRead"];
      emodel: components["schemas"]["EModelRead"];
      /** @default null */
      calibration_result:
        | components["schemas"]["MEModelCalibrationResultRead"]
        | null;
    } & {
      [key: string]: unknown;
    };
    /** NestedContributionRead */
    NestedContributionRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      agent: components["schemas"]["AgentRead"];
      role: components["schemas"]["RoleRead"];
    } & {
      [key: string]: unknown;
    };
    /** NestedStrainRead */
    NestedStrainRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
    } & {
      [key: string]: unknown;
    };
    /** PointLocationBase */
    PointLocationBase: {
      /** X */
      x: number;
      /** Y */
      y: number;
      /** Z */
      z: number;
    } & {
      [key: string]: unknown;
    };
    /** ReconstructionMorphologyRead */
    ReconstructionMorphologyRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default null */
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * ValidationStatus
     * @enum {string}
     */
    ValidationStatus: "created" | "initialized" | "running" | "done" | "error";
    /** ListResponseMEModelRead */
    ListResponseMEModelRead: {
      /** Data */
      data: components["schemas"]["MEModelRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseReconstructionMorphologyRead */
    ListResponseReconstructionMorphologyRead: {
      /** Data */
      data: components["schemas"]["ReconstructionMorphologyRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * MeasurableEntity
     * @constant
     */
    MeasurableEntity: "reconstruction_morphology";
    /** MeasurementAnnotationRead */
    MeasurementAnnotationRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Entity Id
       * Format: uuid
       */
      entity_id: string;
      entity_type: components["schemas"]["MeasurableEntity"];
      /** Measurement Kinds */
      measurement_kinds: components["schemas"]["MeasurementKindCreate"][];
    } & {
      [key: string]: unknown;
    };
    /** MeasurementItem */
    MeasurementItem: {
      /** @default null */
      name: components["schemas"]["MeasurementStatistic"] | null;
      /** @default null */
      unit: components["schemas"]["MeasurementUnit"] | null;
      /** Value */
      value: number | null;
    } & {
      [key: string]: unknown;
    };
    /** MeasurementKindCreate */
    MeasurementKindCreate: {
      structural_domain: components["schemas"]["StructuralDomain"];
      /** Measurement Items */
      measurement_items: components["schemas"]["MeasurementItem"][];
      /** Pref Label */
      pref_label: string;
    } & {
      [key: string]: unknown;
    };
    /**
     * MeasurementStatistic
     * @enum {string}
     */
    MeasurementStatistic:
      | "mean"
      | "median"
      | "mode"
      | "variance"
      | "data_point"
      | "sample_size"
      | "standard_error"
      | "standard_deviation"
      | "raw"
      | "minimum"
      | "maximum"
      | "sum";
    /**
     * MeasurementUnit
     * @enum {string}
     */
    MeasurementUnit:
      | "dimensionless"
      | "1/μm"
      | "1/mm³"
      | "μm"
      | "μm²"
      | "μm³"
      | "radian";
    /** ReconstructionMorphologyAnnotationExpandedRead */
    ReconstructionMorphologyAnnotationExpandedRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default null */
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** @default null */
      measurement_annotation:
        | components["schemas"]["MeasurementAnnotationRead"]
        | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * StructuralDomain
     * @enum {string}
     */
    StructuralDomain:
      | "apical_dendrite"
      | "basal_dendrite"
      | "axon"
      | "soma"
      | "neuron_morphology";
    /** ReadOneReconstructionMorphologyIdGetResponse */
    ReadOneReconstructionMorphologyIdGetResponse:
      | components["schemas"]["ReconstructionMorphologyRead"]
      | components["schemas"]["ReconstructionMorphologyAnnotationExpandedRead"];
    /** MorphologyMetricsOutput */
    MorphologyMetricsOutput: {
      /**
       * aspect_ratio
       * @description Calculates the min/max ratio of the principal direction extents                 along the plane.
       * @default null
       */
      aspect_ratio: number | null;
      /**
       * circularity
       * @description Calculates the circularity of the morphology points along the plane.
       * @default null
       */
      circularity: number | null;
      /**
       * length_fraction_above_soma
       * @description Returns the length fraction of the segments that have their midpoints                             higher than the soma.
       * @default null
       */
      length_fraction_above_soma: number | null;
      /**
       * max_radial_distance
       * @description The maximum radial distance from the soma in micrometers.
       * @default null
       */
      max_radial_distance: number | null;
      /**
       * number_of_neurites
       * @description Number of neurites in a morphology.
       * @default null
       */
      number_of_neurites: number | null;
      /**
       * soma_radius [μm]
       * @description The radius of the soma in micrometers.
       * @default null
       */
      soma_radius: number | null;
      /**
       * soma_surface_area [μm^2]
       * @description The surface area of the soma in square micrometers.
       * @default null
       */
      soma_surface_area: number | null;
      /**
       * total_length [μm]
       * @description The total length of the morphology neurites in micrometers.
       * @default null
       */
      total_length: number | null;
      /**
       * total_width [μm]
       * @description The total width (X-range) of the morphology in micrometers.
       * @default null
       */
      total_height: number | null;
      /**
       * total_depth [μm]
       * @description The total depth (Z-range) of the morphology in micrometers.
       * @default null
       */
      total_depth: number | null;
      /**
       * total_area [μm^2]
       * @description The total surface area of all sections in square micrometers.
       * @default null
       */
      total_area: number | null;
      /**
       * total_volume [μm^3]
       * @description The total volume of all sections in cubic micrometers.
       * @default null
       */
      total_volume: number | null;
      /**
       * section_lengths [μm]
       * @description The distribution of lengths per section in micrometers.
       * @default null
       */
      section_lengths: number[] | null;
      /**
       * segment_radii [μm]
       * @description The distribution of radii of the morphology in micrometers.
       * @default null
       */
      segment_radii: number[] | null;
      /**
       * number_of_sections
       * @description The number of sections in the morphology.
       * @default null
       */
      number_of_sections: number | null;
      /**
       * local_bifurcation_angles [rad]
       * @description Angles between two sections computed at the bifurcation (local).
       * @default null
       */
      local_bifurcation_angles: number[] | null;
      /**
       * remote_bifurcation_angles [rad]
       * @description Angles between two sections computed at the end of the sections (remote).
       * @default null
       */
      remote_bifurcation_angles: number[] | null;
      /**
       * section_path_distances [μm]
       * @description Path distances from the soma to section endpoints in micrometers.
       * @default null
       */
      section_path_distances: number[] | null;
      /**
       * section_radial_distances [μm]
       * @description Radial distance from the soma to section endpoints in micrometers.
       * @default null
       */
      section_radial_distances: number[] | null;
      /**
       * section_branch_orders
       * @description The distribution of branch orders of sections, computed from soma.
       * @default null
       */
      section_branch_orders: number[] | null;
      /**
       * section_strahler_orders
       * @description The distribution of strahler branch orders of sections, computed from                 terminals.
       * @default null
       */
      section_strahler_orders: number[] | null;
    };
    /** ElectrophysiologyMetricsOutput */
    ElectrophysiologyMetricsOutput: {
      /**
       * Feature Dict
       * @description Mapping of feature name to its metric values. Each entry contains at least an 'avg', and optionally 'unit', 'num_traces', etc.
       */
      feature_dict: {
        [key: string]: {
          [key: string]: unknown;
        };
      };
    };
    /** OrganizationRead */
    OrganizationRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Pref Label */
      pref_label: string;
      /**
       * Alternative Name
       * @default null
       */
      alternative_name: string | null;
      /** Type */
      type: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseOrganizationRead */
    ListResponseOrganizationRead: {
      /** Data */
      data: components["schemas"]["OrganizationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** PersonRead */
    PersonRead: {
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Given Name
       * @default null
       */
      given_name: string | null;
      /**
       * Family Name
       * @default null
       */
      family_name: string | null;
      /** Pref Label */
      pref_label: string;
      /** Type */
      type: string;
      /** Sub Id */
      sub_id: string | null;
    } & {
      [key: string]: unknown;
    };
    /** ListResponsePersonRead */
    ListResponsePersonRead: {
      /** Data */
      data: components["schemas"]["PersonRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * PlotGeneratorToolOutput
     * @description Output class for the plot generator.
     */
    PlotGeneratorToolOutput: {
      /** Storage Id */
      storage_id: string;
    };
    /** ListResponseAnnotation */
    ListResponseAnnotation: {
      /** Data */
      data: components["schemas"]["Annotation"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * AgePeriod
     * @enum {string}
     */
    AgePeriod: "prenatal" | "postnatal" | "unknown";
    /** EModelReadExpanded */
    EModelReadExpanded: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Iteration */
      iteration: string;
      /** Score */
      score: number;
      /** Seed */
      seed: number;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["NestedSpeciesRead"];
      /** @default null */
      strain: components["schemas"]["NestedStrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      exemplar_morphology: components["schemas"]["ExemplarMorphology"];
      /** Ion Channel Models */
      ion_channel_models: components["schemas"]["IonChannelModelWAssets"][];
    } & {
      [key: string]: unknown;
    };
    /** IonChannelModelWAssets */
    IonChannelModelWAssets: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      brain_region: components["schemas"]["BrainRegionRead"];
      subject: components["schemas"]["NestedSubjectRead"];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Experiment Date
       * @default null
       */
      experiment_date: string | null;
      /**
       * Contact Email
       * @default null
       */
      contact_email: string | null;
      /**
       * Published In
       * @default null
       */
      published_in: string | null;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Nmodl Suffix */
      nmodl_suffix: string;
      /**
       * Is Ljp Corrected
       * @default false
       */
      is_ljp_corrected: boolean;
      /**
       * Is Temperature Dependent
       * @default false
       */
      is_temperature_dependent: boolean;
      /** Temperature Celsius */
      temperature_celsius: number;
      /**
       * Is Stochastic
       * @default false
       */
      is_stochastic: boolean;
      neuron_block: components["schemas"]["NeuronBlock"];
    } & {
      [key: string]: unknown;
    };
    /** NestedSubjectRead */
    NestedSubjectRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @description Sex of the subject */
      sex: components["schemas"]["Sex"];
      /**
       * Weight
       * @description Weight in grams
       * @default null
       */
      weight: components["schemas"]["Weight"] | null;
      /**
       * Age value
       * @description Age value interval.
       * @default null
       */
      age_value: number | null;
      /**
       * Minimum age range
       * @description Minimum age range
       * @default null
       */
      age_min: number | null;
      /**
       * Maximum age range
       * @description Maximum age range
       * @default null
       */
      age_max: number | null;
      /** @default null */
      age_period: components["schemas"]["AgePeriod"] | null;
      species: components["schemas"]["NestedSpeciesRead"];
    } & {
      [key: string]: unknown;
    };
    /** NeuronBlock */
    NeuronBlock: {
      /**
       * Global
       * @default []
       */
      global: {
        [key: string]: string | null;
      }[];
      /**
       * Range
       * @default []
       */
      range: {
        [key: string]: string | null;
      }[];
      /**
       * Useion
       * @default []
       */
      useion: components["schemas"]["UseIon"][];
      /**
       * Nonspecific
       * @default []
       */
      nonspecific: {
        [key: string]: string | null;
      }[];
    } & {
      [key: string]: unknown;
    };
    /**
     * Sex
     * @enum {string}
     */
    Sex: "male" | "female" | "unknown";
    /** UseIon */
    UseIon: {
      /** Ion Name */
      ion_name: string;
      /**
       * Read
       * @default []
       */
      read: string[];
      /**
       * Write
       * @default []
       */
      write: string[];
      /**
       * Valence
       * @default null
       */
      valence: number | null;
      /**
       * Main Ion
       * @default null
       */
      main_ion: boolean | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * Weight
     * @description Weight in grams
     */
    Weight: number;
    /** ListResponseEModelReadExpanded */
    ListResponseEModelReadExpanded: {
      /** Data */
      data: components["schemas"]["EModelReadExpanded"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ElectricalCellRecordingRead */
    ElectricalCellRecordingRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      brain_region: components["schemas"]["BrainRegionRead"];
      subject: components["schemas"]["NestedSubjectRead"];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Experiment Date
       * @default null
       */
      experiment_date: string | null;
      /**
       * Contact Email
       * @default null
       */
      contact_email: string | null;
      /**
       * Published In
       * @default null
       */
      published_in: string | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Liquid Junction Potential
       * @description Correction applied to the voltage trace, in mV
       * @default 0
       */
      ljp: number;
      /**
       * Recording Location
       * @description Location on the cell where recording was performed, in hoc-compatible format.
       */
      recording_location: string[];
      /**
       * Recording Type
       * @description Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]
       */
      recording_type: components["schemas"]["ElectricalRecordingType"];
      /**
       * Recording Origin
       * @description Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]
       */
      recording_origin: components["schemas"]["ElectricalRecordingOrigin"];
      /**
       * Temperature
       * @description Temperature at which the recording was performed, in degrees Celsius.
       * @default null
       */
      temperature: number | null;
      /**
       * Comment
       * @description Comment with further details.
       * @default null
       */
      comment: string | null;
      /**
       * Legacy Id
       * @default null
       */
      legacy_id: string[] | null;
      /**
       * Electrical Recording Stimuli
       * @description List of stimuli applied to the cell with their respective time steps
       * @default null
       */
      stimuli:
        | components["schemas"]["NestedElectricalRecordingStimulusRead"][]
        | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * ElectricalRecordingOrigin
     * @enum {string}
     */
    ElectricalRecordingOrigin: "in_vivo" | "in_vitro" | "in_silico" | "unknown";
    /**
     * ElectricalRecordingStimulusShape
     * @enum {string}
     */
    ElectricalRecordingStimulusShape:
      | "cheops"
      | "constant"
      | "pulse"
      | "step"
      | "ramp"
      | "noise"
      | "sinusoidal"
      | "other"
      | "two_steps"
      | "unknown";
    /**
     * ElectricalRecordingStimulusType
     * @enum {string}
     */
    ElectricalRecordingStimulusType:
      | "voltage_clamp"
      | "current_clamp"
      | "conductance_clamp"
      | "extracellular"
      | "other"
      | "unknown";
    /**
     * ElectricalRecordingType
     * @enum {string}
     */
    ElectricalRecordingType:
      | "intracellular"
      | "extracellular"
      | "both"
      | "unknown";
    /** NestedElectricalRecordingStimulusRead */
    NestedElectricalRecordingStimulusRead: {
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Dt
       * @default null
       */
      dt: number | null;
      injection_type: components["schemas"]["ElectricalRecordingStimulusType"];
      shape: components["schemas"]["ElectricalRecordingStimulusShape"];
      /**
       * Start Time
       * @default null
       */
      start_time: number | null;
      /**
       * End Time
       * @default null
       */
      end_time: number | null;
      /**
       * Recording Id
       * Format: uuid
       */
      recording_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseElectricalCellRecordingRead */
    ListResponseElectricalCellRecordingRead: {
      /** Data */
      data: components["schemas"]["ElectricalCellRecordingRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ExperimentalBoutonDensityRead */
    ExperimentalBoutonDensityRead: {
      subject: components["schemas"]["NestedSubjectRead"];
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Measurements */
      measurements: components["schemas"]["MeasurementRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /** MeasurementRead */
    MeasurementRead: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      unit: components["schemas"]["MeasurementUnit"];
      /** Value */
      value: number;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseExperimentalBoutonDensityRead */
    ListResponseExperimentalBoutonDensityRead: {
      /** Data */
      data: components["schemas"]["ExperimentalBoutonDensityRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ExperimentalNeuronDensityRead */
    ExperimentalNeuronDensityRead: {
      subject: components["schemas"]["NestedSubjectRead"];
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Measurements */
      measurements: components["schemas"]["MeasurementRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseExperimentalNeuronDensityRead */
    ListResponseExperimentalNeuronDensityRead: {
      /** Data */
      data: components["schemas"]["ExperimentalNeuronDensityRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ExperimentalSynapsesPerConnectionRead */
    ExperimentalSynapsesPerConnectionRead: {
      subject: components["schemas"]["NestedSubjectRead"];
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Measurements */
      measurements: components["schemas"]["MeasurementRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      pre_mtype: components["schemas"]["Annotation"];
      post_mtype: components["schemas"]["Annotation"];
      pre_region: components["schemas"]["BrainRegionRead"];
      post_region: components["schemas"]["BrainRegionRead"];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseExperimentalSynapsesPerConnectionRead */
    ListResponseExperimentalSynapsesPerConnectionRead: {
      /** Data */
      data: components["schemas"]["ExperimentalSynapsesPerConnectionRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** IonChannelModelRead */
    IonChannelModelRead: {
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      brain_region: components["schemas"]["BrainRegionRead"];
      subject: components["schemas"]["NestedSubjectRead"];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Experiment Date
       * @default null
       */
      experiment_date: string | null;
      /**
       * Contact Email
       * @default null
       */
      contact_email: string | null;
      /**
       * Published In
       * @default null
       */
      published_in: string | null;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Nmodl Suffix */
      nmodl_suffix: string;
      /**
       * Is Ljp Corrected
       * @default false
       */
      is_ljp_corrected: boolean;
      /**
       * Is Temperature Dependent
       * @default false
       */
      is_temperature_dependent: boolean;
      /** Temperature Celsius */
      temperature_celsius: number;
      /**
       * Is Stochastic
       * @default false
       */
      is_stochastic: boolean;
      neuron_block: components["schemas"]["NeuronBlock"];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseIonChannelModelRead */
    ListResponseIonChannelModelRead: {
      /** Data */
      data: components["schemas"]["IonChannelModelRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseMeasurementAnnotationRead */
    ListResponseMeasurementAnnotationRead: {
      /** Data */
      data: components["schemas"]["MeasurementAnnotationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * PlotMorphologyGetOneOutput
     * @description Output of the PlotMorphologyGetOneTool.
     */
    PlotMorphologyGetOneOutput: {
      /** Storage Id */
      storage_id: string;
    };
    /** SpeciesRead */
    SpeciesRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSpeciesRead */
    ListResponseSpeciesRead: {
      /** Data */
      data: components["schemas"]["SpeciesRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** StrainRead */
    StrainRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseStrainRead */
    ListResponseStrainRead: {
      /** Data */
      data: components["schemas"]["StrainRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** SubjectRead */
    SubjectRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @description Sex of the subject */
      sex: components["schemas"]["Sex"];
      /**
       * Weight
       * @description Weight in grams
       * @default null
       */
      weight: components["schemas"]["Weight"] | null;
      /**
       * Age value
       * @description Age value interval.
       * @default null
       */
      age_value: number | null;
      /**
       * Minimum age range
       * @description Minimum age range
       * @default null
       */
      age_min: number | null;
      /**
       * Maximum age range
       * @description Maximum age range
       * @default null
       */
      age_max: number | null;
      /** @default null */
      age_period: components["schemas"]["AgePeriod"] | null;
      species: components["schemas"]["NestedSpeciesRead"];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSubjectRead */
    ListResponseSubjectRead: {
      /** Data */
      data: components["schemas"]["SubjectRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** SimulationResultRead */
    SimulationResultRead: {
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Simulation Id
       * Format: uuid
       */
      simulation_id: string;
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSimulationResultRead */
    ListResponseSimulationResultRead: {
      /** Data */
      data: components["schemas"]["SimulationResultRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** SimulationRead */
    SimulationRead: {
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Simulation Campaign Id
       * Format: uuid
       */
      simulation_campaign_id: string;
      /**
       * Entity Id
       * Format: uuid
       */
      entity_id: string;
      /** Scan Parameters */
      scan_parameters: {
        [key: string]: unknown;
      };
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSimulationRead */
    ListResponseSimulationRead: {
      /** Data */
      data: components["schemas"]["SimulationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** NestedSimulationRead */
    NestedSimulationRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Simulation Campaign Id
       * Format: uuid
       */
      simulation_campaign_id: string;
      /**
       * Entity Id
       * Format: uuid
       */
      entity_id: string;
      /** Scan Parameters */
      scan_parameters: {
        [key: string]: unknown;
      };
    } & {
      [key: string]: unknown;
    };
    /** SimulationCampaignRead */
    SimulationCampaignRead: {
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Scan Parameters */
      scan_parameters: {
        [key: string]: unknown;
      };
      /**
       * Entity Id
       * Format: uuid
       */
      entity_id: string;
      /** Simulations */
      simulations: components["schemas"]["NestedSimulationRead"][];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSimulationCampaignRead */
    ListResponseSimulationCampaignRead: {
      /** Data */
      data: components["schemas"]["SimulationCampaignRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * ActivityType
     * @description Activity types.
     * @enum {string}
     */
    ActivityType:
      | "simulation_execution"
      | "simulation_generation"
      | "validation"
      | "calibration";
    /** SimulationExecutionRead */
    SimulationExecutionRead: {
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** @default null */
      type: components["schemas"]["ActivityType"] | null;
      /**
       * Start Time
       * @default null
       */
      start_time: string | null;
      /**
       * End Time
       * @default null
       */
      end_time: string | null;
      /** Used */
      used: components["schemas"]["NestedEntityRead"][];
      /** Generated */
      generated: components["schemas"]["NestedEntityRead"][];
      status: components["schemas"]["SimulationExecutionStatus"];
    } & {
      [key: string]: unknown;
    };
    /**
     * SimulationExecutionStatus
     * @enum {string}
     */
    SimulationExecutionStatus:
      | "created"
      | "pending"
      | "running"
      | "done"
      | "error";
    /** ListResponseSimulationExecutionRead */
    ListResponseSimulationExecutionRead: {
      /** Data */
      data: components["schemas"]["SimulationExecutionRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** SimulationGenerationRead */
    SimulationGenerationRead: {
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** @default null */
      type: components["schemas"]["ActivityType"] | null;
      /**
       * Start Time
       * @default null
       */
      start_time: string | null;
      /**
       * End Time
       * @default null
       */
      end_time: string | null;
      /** Used */
      used: components["schemas"]["NestedEntityRead"][];
      /** Generated */
      generated: components["schemas"]["NestedEntityRead"][];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSimulationGenerationRead */
    ListResponseSimulationGenerationRead: {
      /** Data */
      data: components["schemas"]["SimulationGenerationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** NestedSynaptome */
    NestedSynaptome: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
    } & {
      [key: string]: unknown;
    };
    /**
     * SingleNeuronSimulationStatus
     * @enum {string}
     */
    SingleNeuronSimulationStatus: "started" | "failure" | "success";
    /** SingleNeuronSynaptomeSimulationRead */
    SingleNeuronSynaptomeSimulationRead: {
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      status: components["schemas"]["SingleNeuronSimulationStatus"];
      /** Injection Location */
      injection_location: string[];
      /** Recording Location */
      recording_location: string[];
      synaptome: components["schemas"]["NestedSynaptome"];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSingleNeuronSynaptomeSimulationRead */
    ListResponseSingleNeuronSynaptomeSimulationRead: {
      /** Data */
      data: components["schemas"]["SingleNeuronSynaptomeSimulationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** NestedMEModel */
    NestedMEModel: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      validation_status?: components["schemas"]["ValidationStatus"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
    } & {
      [key: string]: unknown;
    };
    /** SingleNeuronSimulationRead */
    SingleNeuronSimulationRead: {
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      status: components["schemas"]["SingleNeuronSimulationStatus"];
      /** Injection Location */
      injection_location: string[];
      /** Recording Location */
      recording_location: string[];
      me_model: components["schemas"]["NestedMEModel"];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSingleNeuronSimulationRead */
    ListResponseSingleNeuronSimulationRead: {
      /** Data */
      data: components["schemas"]["SingleNeuronSimulationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /** SingleNeuronSynaptomeRead */
    SingleNeuronSynaptomeRead: {
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      me_model: components["schemas"]["NestedMEModel"];
      brain_region: components["schemas"]["BrainRegionRead"];
    } & {
      [key: string]: unknown;
    };
    /** ListResponseSingleNeuronSynaptomeRead */
    ListResponseSingleNeuronSynaptomeRead: {
      /** Data */
      data: components["schemas"]["SingleNeuronSynaptomeRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * CircuitBuildCategory
     * @description Information about how/from what source a circuit was built.
     *
     *     - computational_model: Any type of data-driven or statistical model
     *     - em_reconstruction: Reconstruction from EM
     *     (More categories may be added later, if needed).
     * @enum {string}
     */
    CircuitBuildCategory: "computational_model" | "em_reconstruction";
    /** CircuitRead */
    CircuitRead: {
      /** Contributions */
      contributions: components["schemas"]["NestedContributionRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][];
      /** @default null */
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      created_by: components["schemas"]["NestedPersonRead"];
      updated_by: components["schemas"]["NestedPersonRead"];
      brain_region: components["schemas"]["BrainRegionRead"];
      subject: components["schemas"]["NestedSubjectRead"];
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** @default null */
      type: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Experiment Date
       * @default null
       */
      experiment_date: string | null;
      /**
       * Contact Email
       * @default null
       */
      contact_email: string | null;
      /**
       * Published In
       * @default null
       */
      published_in: string | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Has Morphologies
       * @default false
       */
      has_morphologies: boolean;
      /**
       * Has Point Neurons
       * @default false
       */
      has_point_neurons: boolean;
      /**
       * Has Electrical Cell Models
       * @default false
       */
      has_electrical_cell_models: boolean;
      /**
       * Has Spines
       * @default false
       */
      has_spines: boolean;
      /** Number Neurons */
      number_neurons: number;
      /** Number Synapses */
      number_synapses: number;
      /** Number Connections */
      number_connections: number | null;
      scale: components["schemas"]["CircuitScale"];
      build_category: components["schemas"]["CircuitBuildCategory"];
      /**
       * Root Circuit Id
       * @default null
       */
      root_circuit_id: string | null;
      /**
       * Atlas Id
       * @default null
       */
      atlas_id: string | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * CircuitScale
     * @description Scale of the circuit.
     *
     *     - single: Single neuron + extrinsic connectivity
     *     - pair: Two connected neurons + intrinsic connectivity + extrinsic connectivity
     *     - small: Small microcircuit (3-20 neurons) + intrinsic connectivity + extrinsic connectivity;
     *       usually containing specific connectivity motifs
     *     - microcircuit: Any circuit larger than 20 neurons but not being a region, system, or
     *       whole-brain circuit; may be atlas-based or not
     *     - region: Atlas-based continuous volume of an entire brain region or a set of continuous
     *       sub-regions
     *     - system: Non-continuous circuit consisting of at least two microcircuits/regions that are
     *       connected by inter-region connectivity
     *     - whole_brain: Circuit representing an entire brain.
     * @enum {string}
     */
    CircuitScale:
      | "single"
      | "pair"
      | "small"
      | "microcircuit"
      | "region"
      | "system"
      | "whole_brain";
    /** ListResponseCircuitRead */
    ListResponseCircuitRead: {
      /** Data */
      data: components["schemas"]["CircuitRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      /** @default null */
      facets: components["schemas"]["Facets"] | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * GenerateSimulationsConfigOutput
     * @description Class holding the ordered list of json patchers to apply to the base config.
     */
    GenerateSimulationsConfigOutput: {
      /**
       * Updated
       * @default true
       */
      updated: boolean;
    };
    /**
     * FutureFeature
     * @description Schema for future feature documents.
     */
    FutureFeature: {
      /** Id */
      id: string;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Topic */
      topic: string;
      /** Feature Title */
      feature_title: string;
      /** Description */
      description: string;
      /** Scale */
      scale: string;
    };
    /**
     * GlossaryItemDocument
     * @description Schema for glossary item documents.
     */
    GlossaryItemDocument: {
      /** Id */
      id: string;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Definition */
      definition: string | null;
    };
    /**
     * NewsDocument
     * @description Schema for news documents.
     */
    NewsDocument: {
      /** Id */
      id: string;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Title */
      title: string;
      /** Category */
      category: string;
      /** Content */
      content: string | null;
    };
    /**
     * Page
     * @description Schema for page documents.
     */
    Page: {
      /** Id */
      id: string;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Title */
      title: string;
      /** Introduction */
      introduction: string;
      /** Content */
      content: string | null;
    };
    /**
     * PublicProject
     * @description Schema for public project documents.
     */
    PublicProject: {
      /** Id */
      id: string;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Name */
      name: string;
      /** Introduction */
      introduction: string;
      /** Description */
      description: string | null;
      /** Videos List */
      videos_list:
        | {
            [key: string]: unknown;
          }[]
        | null;
      /** Authors List */
      authors_list: {
        [key: string]: unknown;
      }[];
    };
    /**
     * Tutorial
     * @description Schema for tutorial documents.
     */
    Tutorial: {
      /** Id */
      id: string;
      /** Created At */
      created_at: string;
      /** Updated At */
      updated_at: string;
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Transcript */
      transcript: string | null;
      /** Video Url */
      video_url: string;
    };
    /**
     * OBIExpertOutput
     * @description Output schema for the OBI Expert tool.
     */
    OBIExpertOutput: {
      /** Results */
      results:
        | components["schemas"]["FutureFeature"][]
        | components["schemas"]["GlossaryItemDocument"][]
        | components["schemas"]["NewsDocument"][]
        | components["schemas"]["Page"][]
        | components["schemas"]["PublicProject"][]
        | components["schemas"]["Tutorial"][];
      /** Total Items */
      total_items: number;
    };
    /**
     * PlotElectricalCellRecordingGetOneOutput
     * @description Output of the PlotElectricalCellRecordingGetOneTool.
     */
    PlotElectricalCellRecordingGetOneOutput: {
      /** Storage Id */
      storage_id: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  question_suggestions_qa_question_suggestions_post: {
    parameters: {
      query?: {
        vlab_id?: string | null;
        project_id?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["QuestionsSuggestionsRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QuestionsSuggestions"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_available_LLM_models_qa_models_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OpenRouterModelResponse"][];
        };
      };
    };
  };
  stream_chat_agent_qa_chat_streamed__thread_id__post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ClientRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_threads_threads_get: {
    parameters: {
      query?: {
        virtual_lab_id?: string | null;
        project_id?: string | null;
        exclude_empty?: boolean;
        creation_date_lte?: string | null;
        creation_date_gte?: string | null;
        sort?:
          | "update_date"
          | "creation_date"
          | "-update_date"
          | "-creation_date";
        cursor?: string | null;
        page_size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaginatedResponse_ThreadsRead_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_thread_threads_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ThreadCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ThreadsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  search_threads_search_get: {
    parameters: {
      query: {
        query: string;
        virtual_lab_id?: string | null;
        project_id?: string | null;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SearchMessagesList"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  generate_title_threads__thread_id__generate_title_patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThreadGeneratBody"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ThreadsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_thread_by_id_threads__thread_id__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ThreadsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_thread_threads__thread_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_thread_title_threads__thread_id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThreadUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ThreadsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_thread_messages_threads__thread_id__messages_get: {
    parameters: {
      query?: {
        entity?: ("USER" | "AI_TOOL" | "TOOL" | "AI_MESSAGE")[] | null;
        sort?: "creation_date" | "-creation_date";
        vercel_format?: boolean;
        cursor?: string | null;
        page_size?: number;
      };
      header?: never;
      path: {
        thread_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["PaginatedResponse_MessagesRead_"]
            | components["schemas"]["PaginatedResponse_MessagesReadVercel_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  execute_tool_call_tools__thread_id__execute__tool_call_id__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        thread_id: string;
        tool_call_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExecuteToolCallRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExecuteToolCallResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_available_tools_tools_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ToolMetadata"][];
        };
      };
    };
  };
  get_tool_metadata_tools__name__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        name: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ToolMetadataDetailed"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  generate_presigned_url_storage__file_identifier__presigned_url_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        file_identifier: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_rate_limit_rate_limit_get: {
    parameters: {
      query?: {
        vlab_id?: string | null;
        project_id?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RateLimitOutput"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_state_state_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StateRead"];
        };
      };
    };
  };
  create_state_state_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["StateCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StateRead"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_state_state_delete: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
  patch_state_state_patch: {
    parameters: {
      query: {
        key: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatePatch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  healthz_healthz_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
    };
  };
  readyz__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
  settings_settings_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
