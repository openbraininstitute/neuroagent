"""Get all Me-Models."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseMEModelRead,
    ReadManyMemodelGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata

logger = logging.getLogger(__name__)


class MEModelGetAllInput(ReadManyMemodelGetParametersQuery):
    """Input for the ME-Model get all tool."""

    within_brain_region_brain_region_id: UUID | None = Field(
        default=None,
        description=(
            """UUID of a brain region. Returns items in that region and **all its sub-regions**. "
            Make an educated guess on whether the user wants to include sub-regions or not
            and use this when you want a broad match including sub-regions.
            To look up the UUID, first call the resolve-brain-region-tool."""
        ),
    )
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=UUID("e3e70682-c209-4cac-a29f-6fbed82c07cd"),
        description="The hierarchy ID for brain regions. The default value is the most commonly used hierarchy ID.",
    )
    brain_region__id: UUID | None = Field(
        default=None,
        description=(
            """UUID of a brain region. Returns items **only** in that exact region (no sub-regions). "
            Make an educated guess on whether the user wants to include sub-regions or not
            and use this when you need a narrow, exact match.
            To look up the UUID, first call the resolve-brain-region-tool."""
        ),
    )
    page_size: int = Field(
        ge=1,
        le=10,
        default=5,
        description="Number of items per page",
    )


class MEModelGetAllTool(BaseTool):
    """Definition of the ME-Model get all tool."""

    name: ClassVar[str] = "entitycore-memodel-getall"
    name_frontend: ClassVar[str] = "Get all ME-Models"
    description: ClassVar[
        str
    ] = """Search the entitycore database to find Morphological Electric models (ME-Model).
    These are models that are ready to be simulated. You will need the ID of the models to run the subsequent simulations."""
    description_frontend: ClassVar[
        str
    ] = """Searches for Morphological Electric models (ME-Model) in the entitycore database. Use this tool ewhen you want to :
    • Find MeModels in specific brain regions
    • Filter by subject and species
    • Access detailed MeModels data before running a simulation."""
    metadata: EntitycoreMetadata
    input_schema: MEModelGetAllInput

    async def arun(self) -> ListResponseMEModelRead:
        """Get many ME-Model from the database while allowing filtering.

        Returns
        -------
            ListResponseMEModelCalibrationResultRead describing the list of me model and their metadata.
        """
        query_params = self.input_schema.model_dump(exclude_defaults=True, mode="json")
        query_params["page_size"] = self.input_schema.page_size
        query_params["within_brain_region_hierarchy_id"] = (
            self.input_schema.within_brain_region_hierarchy_id
        )

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/memodel",
            headers=headers,
            params=query_params,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The ME-Model endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()

        # Set assets and legacy_id to empty lists for each morphology and emodel.
        for memodel in response_data["data"]:
            memodel["emodel"]["assets"] = []
            memodel["emodel"]["ion_channel_models"] = []
            memodel["emodel"]["assets"] = []
            memodel["emodel"]["legacy_id"] = []

        return ListResponseMEModelRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
