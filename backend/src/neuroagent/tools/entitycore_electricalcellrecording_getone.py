"""Get One Electrical Cell Recording tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ElectricalCellRecordingRead,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata

logger = logging.getLogger(__name__)


class ElectricalCellRecordingGetOneInput(BaseModel):
    """Inputs of the electrical cell recording get one tool."""

    recording_id: UUID = Field(
        description="ID of the electrical cell recording of interest in UUID format."
    )


class ElectricalCellRecordingGetOneTool(BaseTool):
    """Class defining the Get One Electrical Cell Recording logic."""

    name: ClassVar[str] = "entitycore-electricalcellrecording-getone"
    name_frontend: ClassVar[str] = "Get One Electrical Cell Recording"
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific electrical cell recording from the knowledge graph.
    Requires a 'recording_id' which is the ID of the recording of interest as registered in the knowledge graph.
    The output contains detailed information about the recording, including:
    - The recording ID
    - The recording name
    - The recording description
    - The recording type
    - The recording origin
    - The recording location
    - The liquid junction potential
    - Associated brain region information
    - Subject species information
    - Any additional metadata
    - Assets
    - Legacy ID
    - Stimuli information
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific electrical cell recording. Use this tool to:
    • View complete recording details
    • Access associated metadata
    • Get brain region and species information
    • Access recording assets and stimuli

    Specify the recording ID to retrieve its full details."""
    metadata: EntitycoreMetadata
    input_schema: ElectricalCellRecordingGetOneInput

    async def arun(self) -> ElectricalCellRecordingRead:
        """From a recording ID, extract detailed recording information.

        Returns
        -------
            ElectricalCellRecordingRead containing detailed recording information, or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/electrical-cell-recording/{self.input_schema.recording_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The electrical cell recording endpoint returned a non 200 response code. Error: {response.text}"
            )
        return ElectricalCellRecordingRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
