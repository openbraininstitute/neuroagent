"""ObiOne Electrophysiology Metrics tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.obione import (
    ElectrophysiologyMetricsOutput,
    ElectrophysiologyrecordingMetricsEndpointDeclaredElectrophysiologyrecordingMetricsTraceIdGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class EphysMetricsGetOneInputs(
    ElectrophysiologyrecordingMetricsEndpointDeclaredElectrophysiologyrecordingMetricsTraceIdGetParametersQuery
):
    """Input class of the ObiOne Electrophysiology Metrics tool."""

    electrical_cell_recording_id: UUID = Field(
        description="Id of the electrical cell recording from which features must be computed."
    )


class EphysMetricsGetOneMetadata(BaseMetadata):
    """Metadata of the ObiOne Electrophysiology Metrics tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class EphysMetricsGetOneTool(BaseTool):
    """ObiOne Electrophysiology Metrics tool."""

    name: ClassVar[str] = "obione-ephysmetrics-getone"
    name_frontend: ClassVar[str] = "Compute Electrophysiology Metrics"
    utterances: ClassVar[list[str]] = [
        "Analyze electrophysiological features",
        "Compute metrics for this recording",
        "Get electrophysiology data",
    ]
    description: ClassVar[str] = (
        """Given an electrical cell recording ID, fetch data about the electrophysiological features."""
    )
    description_frontend: ClassVar[
        str
    ] = """Analyze detailed electrophysiological features of neuron recordings. This tool allows you to:
    • Measure various electrophysiological properties
    • Calculate statistical metrics from recordings
    • Analyze specific electrical characteristics of neurons

    Provide an electrical cell recording ID to compute its detailed electrophysiological features."""
    metadata: EphysMetricsGetOneMetadata
    input_schema: EphysMetricsGetOneInputs

    async def arun(self) -> ElectrophysiologyMetricsOutput:
        """Run the electrophysiology feature extraction logic."""
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual_lab_id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project_id"] = str(self.metadata.project_id)

        query_params = self.input_schema.model_dump(
            exclude_defaults=True, exclude={"electrical_cell_recording_id"}
        )

        ephys_metrics_response = await self.metadata.httpx_client.get(
            url=f"{self.metadata.obi_one_url}/declared/electrophysiologyrecording-metrics/{self.input_schema.electrical_cell_recording_id}",
            headers=headers,
            params=query_params,
        )

        if ephys_metrics_response.status_code != 200:
            raise ValueError(
                f"The electrophysiology metrics endpoint returned a non 200 response code. Error: {ephys_metrics_response.text}"
            )
        return ElectrophysiologyMetricsOutput(**ephys_metrics_response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
