"""Get One Ion Channel tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    IonChannelRead,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata


class IonChannelGetOneInput(BaseModel):
    """Inputs for the ion-channel get one tool."""

    ion_channel_id: UUID = Field(
        description="ID of the ion-channel of interest in UUID format."
    )


class IonChannelGetOneTool(BaseTool):
    """Class defining the Get One IonChannel logic."""

    name: ClassVar[str] = "entitycore-ionchannel-getone"
    name_frontend: ClassVar[str] = "Get One Ion Channel"
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific ion-channel from the knowledge graph.
    Requires a 'ion_channel_id' which is the ID of the ion-channel of interest as registered in the knowledge graph.
    The output contains detailed information about the ion-channel, including:
    - The ion channel ID and basic identifiers
    - Core ion channel information and properties
    - Status and state information
    - Associated metadata and relationships
    - Creation and modification timestamps
    - Creation and update dates
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific ion-channel. Use this tool to:
    • View complete ion-channel details
    • Access detailed ion-channel information
    • Get creation and update information

    Specify the ion-channel ID to retrieve its full details."""
    metadata: EntitycoreMetadata
    input_schema: IonChannelGetOneInput

    async def arun(self) -> IonChannelRead:
        """From a ion-channel ID, extract detailed ion-channel information.

        Returns
        -------
            IonChannelRead containing detailed ion-channel information, or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/ion-channel/{self.input_schema.ion_channel_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The ion-channel endpoint returned a non 200 response code. Error: {response.text}"
            )
        return IonChannelRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
