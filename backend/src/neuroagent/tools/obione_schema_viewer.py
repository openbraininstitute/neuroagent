"""OBI GraphQL Schema Viewer tool."""

import logging
from pathlib import Path
from typing import ClassVar

from pydantic import BaseModel, Field

from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class ObiGraphQLInputs(BaseModel):
    """Input class of the OBI GraphQL tool."""

    schema_type: str = Field(
        default="morphology",
        description="Type of schema to display. Options: 'morphology', 'full'",
    )


class ObiGraphQLMetadata(BaseMetadata):
    """Metadata of the OBI GraphQL tool."""

    pass


class ObiGraphQLTool(BaseTool):
    """OBI GraphQL Schema Viewer tool."""

    name: ClassVar[str] = "obi_graphql"
    name_frontend: ClassVar[str] = "View GraphQL Schema"
    utterances: ClassVar[list[str]] = [
        "Show me the GraphQL schema",
        "What fields are available in the morphology metrics?",
        "Display the API schema",
        "What data can I query?",
        "Show available GraphQL types",
    ]
    description: ClassVar[str] = (
        """Display the GraphQL schema for ObiOne API. This tool shows the available types, fields, and queries that can be used to interact with the ObiOne service. The schema includes detailed information about morphology metrics and other available data structures."""
    )
    description_frontend: ClassVar[
        str
    ] = """View the complete GraphQL schema for the ObiOne API. This tool helps you understand:
    • Available data types and their fields
    • Query parameters and return types
    • Field descriptions and data types
    • API structure and capabilities

    Use this to understand what data you can query and how to structure your requests."""
    metadata: ObiGraphQLMetadata
    input_schema: ObiGraphQLInputs

    def _load_graphql_schema(self) -> str:
        """Load the GraphQL schema from the file."""
        schema_path = Path(__file__).parent / "autogenerated_types" / "obione.graphql"
        try:
            with open(schema_path, "r") as f:
                return f.read()
        except FileNotFoundError:
            return "GraphQL schema file not found."

    def _format_schema_for_description(
        self, schema_content: str, schema_type: str
    ) -> str:
        """Format the schema content for display."""
        if schema_type == "morphology":
            # Extract only morphology-related types
            lines = schema_content.split("\n")
            morphology_lines = []
            in_morphology_type = False
            in_multiple_values = False

            for line in lines:
                if line.strip().startswith("type MorphologyMetrics"):
                    in_morphology_type = True
                    morphology_lines.append(line)
                elif line.strip().startswith("type MultipleValuesContainer"):
                    in_multiple_values = True
                    morphology_lines.append(line)
                elif line.strip().startswith("type Query"):
                    morphology_lines.append(line)
                    morphology_lines.append(
                        lines[lines.index(line) + 1]
                    )  # Add the query line
                    break
                elif in_morphology_type or in_multiple_values:
                    morphology_lines.append(line)
                    if line.strip() == "}":
                        if in_morphology_type:
                            in_morphology_type = False
                        elif in_multiple_values:
                            in_multiple_values = False

            return "\n".join(morphology_lines)
        else:
            return schema_content

    async def arun(self) -> BaseModel:
        """Run the schema viewer logic."""
        schema_content = self._load_graphql_schema()
        formatted_schema = self._format_schema_for_description(
            schema_content, self.input_schema.schema_type
        )

        # Create a response model
        class SchemaResponse(BaseModel):
            schema_content: str
            schema_type: str

        return SchemaResponse(
            schema_content=formatted_schema, schema_type=self.input_schema.schema_type
        )

    @classmethod
    async def is_online(cls) -> bool:
        """Check if the tool is online."""
        return True  # This tool doesn't require external services
