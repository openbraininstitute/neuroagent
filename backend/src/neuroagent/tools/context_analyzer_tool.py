"""From url gives back what is on the current page."""

from typing import ClassVar, get_args
from urllib.parse import parse_qs, urlparse
from uuid import UUID

from pydantic import BaseModel

from neuroagent.tools.autogenerated_types.entitycore import EntityRoute
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class ContextAnalyzerInput(BaseModel):
    """Input class for the Context Analyzer tool, empty since no inputs."""


class ContextAnalyzerMetdata(BaseMetadata):
    """Metadata for the Context Analyzer tool."""

    current_frontend_url: str


class ContextAnalyzerOutput(BaseModel):
    """Output of the Context Analyzer tool."""

    raw_path: str
    query_params: dict[str, list[str]]
    brain_region_id: str | None = None
    observed_entity_type: str | None = None
    current_entity_id: str | None = None


def is_uuid(string: str) -> bool:
    """Check if a given string is a UUID."""
    try:
        UUID(string)
        return True
    except (ValueError, AttributeError, TypeError):
        return False


class ContextAnalyzerTool(BaseTool):
    """Class for the context analyzer tool."""

    name: ClassVar[str] = "url-analyzer-tool"
    name_frontend: ClassVar[str] = "Url Analyzer"
    utterances: ClassVar[list[str]] = [
        "What can I do here?",
        "Can you get me more info about the second morphology on screen",
        "What do I see on the current page ?",
    ]
    description: ClassVar[
        str
    ] = """Extracts relevant info from the url of the page the user is on. Call this tool when you need to get context for the user request.
    If the user has a vague question about the website USE THIS TOOL. ALWAYS treat the values from this tool as obsolete and call the tool again."""
    description_frontend: ClassVar[str] = (
        """Allows to get the current page the user is navigating. This allows the Agent to help the user navigate the website."""
    )
    metadata: ContextAnalyzerMetdata
    input_schema: ContextAnalyzerInput

    async def arun(self) -> ContextAnalyzerOutput:
        """From the current url, gives information on the current page.

        Returns
        -------
            Description of the current page the user is on, formatted as a string.
        """
        url = self.metadata.current_frontend_url

        # Get url and query params
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)

        # Remove the base path and split into components
        path: str = parsed_url.path

        if not path.lstrip("/").startswith("app/virtual-lab/"):
            raise ValueError("Invalid URL")

        # Variable path
        # [4:] skips 'app/virtual-lab/{vlab_id}/{proj_id}'
        current_page = path.lstrip("/").split("/")[4:]

        observed_entity_type = next(
            (
                route
                for route in reversed(current_page)
                if route in get_args(EntityRoute.model_fields["root"].annotation)
            ),
            None,
        )
        current_entity_id = next(
            (route for route in reversed(current_page) if is_uuid(route)), None
        )

        return ContextAnalyzerOutput(
            raw_path="/".join(current_page),
            query_params=query_params,
            brain_region_id=query_params["br_id"][0]
            if "br_id" in query_params
            else None,
            observed_entity_type=observed_entity_type,
            current_entity_id=current_entity_id,
        )

    @classmethod
    async def is_online(cls) -> bool:
        """Check if the tool is online. Always online."""
        return True
