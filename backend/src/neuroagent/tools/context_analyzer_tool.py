"""From url gives back what is on the current page."""

from typing import ClassVar, get_args
from urllib.parse import parse_qs, urlparse
from uuid import UUID

from pydantic import BaseModel

from neuroagent.tools.autogenerated_types.entitycore import EntityRoute
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class ContextAnalyzerInput(BaseModel):
    """Input class for the Context Analyzer tool, empty since no inputs."""


class ContextAnalyzerMetdata(BaseMetadata):
    """Metadata for the Context Analyzer tool."""

    current_frontend_url: str


class ContextAnalyzerOutput(BaseModel):
    """Output of the Context Analyzer tool."""

    raw_path: str
    query_params: dict[str, list[str]]
    brain_region_id: str | None = None
    observed_entity_type: str | None = None
    current_entity_id: str | None = None


def is_uuid(string: str) -> bool:
    """Check if a given string is a UUID."""
    try:
        UUID(string)
        return True
    except (ValueError, AttributeError, TypeError):
        return False


class ContextAnalyzerTool(BaseTool):
    """Class for the context analyzer tool."""

    name: ClassVar[str] = "context-analyzer-tool"
    name_frontend: ClassVar[str] = "Context Analyzer"
    utterances: ClassVar[list[str]] = [
        "What can I do here?",
        "Can you get me more info about the second morphology on screen",
        "What do I see on the current page ?",
        "Compute the morphometrics of this morphology."
        "Generate a simulation config for this circuit.",
    ]
    description: ClassVar[
        str
    ] = """Extracts relevant info from the url of the page the user is on. Lets you know which entity the user is currently viewing.
    Call this tool when you need to get context for the user request. It is fine to call it just in case "to be sure".
    If the user has a vague question about the website USE THIS TOOL. ALWAYS treat the values from this tool as obsolete and call the tool again."""
    description_frontend: ClassVar[str] = (
        """Allows to get the current page the user is navigating. This allows the Agent to help the user navigate the website."""
    )
    metadata: ContextAnalyzerMetdata
    input_schema: ContextAnalyzerInput

    async def arun(self) -> ContextAnalyzerOutput:
        """From the current url, gives information on the current page.

        Returns
        -------
            Description of the current page the user is on, formatted as a string.
        """
        url = self.metadata.current_frontend_url

        # Get url and query params
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)

        # Remove the base path and split into components
        path: str = parsed_url.path.lstrip("/")

        if not path.startswith("app/virtual-lab/"):
            raise ValueError("Invalid URL")

        # Variable path
        # [4:] skips 'app/virtual-lab/{vlab_id}/{proj_id}'
        current_page = path.split("/")[4:]

        # Get valid entity types
        ec_types = get_args(EntityRoute.model_fields["root"].annotation)
        # Frontend extends EC types
        extended_types = (
            "small-microcircuit-simulation",
            "paired-neuron-circuit-simulation",
        )

        valid_entity_types = ec_types + extended_types

        # Find entity type and ID (searching backwards for the last valid entity)
        observed_entity_type = None
        current_entity_id = None

        # Locate the potential entity
        for i in range(len(current_page) - 1, -1, -1):
            if current_page[i] in valid_entity_types:
                observed_entity_type = current_page[i]
                # Check if next segment is a UUID
                if i + 1 < len(current_page) and is_uuid(current_page[i + 1]):
                    current_entity_id = current_page[i + 1]
                break

        # Map frontend types to ec native types to make it simpler for following tc
        if observed_entity_type in extended_types:
            query_params["circuit__scale"] = (
                ["small"]
                if observed_entity_type == "small-microcircuit-simulation"
                else ["pair"]
            )
            observed_entity_type = "simulation-campaign"

        return ContextAnalyzerOutput(
            raw_path="/".join(current_page),
            query_params=query_params,
            brain_region_id=query_params.get("br_id", [None])[0],
            observed_entity_type=observed_entity_type,
            current_entity_id=current_entity_id,
        )

    @classmethod
    async def is_online(cls) -> bool:
        """Check if the tool is online. Always online."""
        return True
