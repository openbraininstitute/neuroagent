"""From url gives back what is on the current page."""

import json
from pathlib import Path
from typing import ClassVar
from urllib.parse import parse_qs, urlparse

from pydantic import BaseModel

from neuroagent.tools.autogenerated_types.entitycore import BrainRegionRead
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata


class ContextAnalyzerInput(BaseModel):
    """Input class for the Context Analyzer tool, empty since no inputs."""

    pass


class ContextAnalyzerMetdata(EntitycoreMetadata):
    """Metadata for the Context Analyzer tool."""

    current_frontend_url: str


class ContextAnalyzerOutput(BaseModel):
    """Output of the Context Analyzer tool."""

    is_in_project: bool
    full_page_path: str
    page_description: str


class ContextAnalyzerTool(BaseTool):
    """Class for the context analyzer tool."""

    name: ClassVar[str] = "context-analyzer-tool"
    name_frontend: ClassVar[str] = "Context Analyzer"
    description: ClassVar[
        str
    ] = """Gets a description of the current page the user is on. Call this tool when the user needs guidance on the platform.
    If the user has a vague question about the website USE THIS TOOL."""
    description_frontend: ClassVar[str] = (
        """Allows to get the current page the user is navigating. This allows the Agent to help the user navigate the website."""
    )
    metadata: ContextAnalyzerMetdata
    input_schema: ContextAnalyzerInput

    async def arun(self) -> ContextAnalyzerOutput:
        """From the current url, gives information on the current page.

        Returns
        -------
            Description of the current page the user is on, formatted as a string.
        """
        url = self.metadata.current_frontend_url

        # retreive description
        with (Path(__file__).parent.parent / "platform_description.json").open() as f:
            descriptions = json.load(f)

        # Get url and query params
        parsed_url = urlparse(url)
        query_params = parse_qs(parsed_url.query)

        # Remove the base path and split into components
        path: str = parsed_url.path
        if not path.startswith("/app/virtual-lab/"):
            raise ValueError("Invalid Virtual Lab URL")

        # Remove base path
        remaining_path = path[len("/app/virtual-lab/") :]
        path_components = [comp for comp in remaining_path.split("/") if comp]

        # Check if we're in a project or not
        if (
            len(path_components) >= 4
            and path_components[0] == "lab"
            and path_components[2] == "project"
        ):
            is_in_project = True
            page_path = path_components[4:] if len(path_components) > 4 else []

        elif len(path_components) >= 1 and path_components[0] == "explore":
            is_in_project = False
            page_path = path_components

        else:
            raise ValueError(f"Unrecognized URL pattern: {url}")

        # Get page type and other derived information
        page_type = page_path[0] if page_path else "unknown"
        full_page_path = "/".join(page_path)

        # Get the description of the current page
        page_description = "# Description of the curerent page \n\n"
        page_description += (
            descriptions["general"]
            + descriptions["sidebar"]
            + descriptions["page_selection"]
        )  # + descriptions["chat"]

        if page_type == "home":
            page_description += descriptions["home"]
        elif page_type == "library":
            page_description += descriptions["library"]
        elif page_type == "team":
            page_description += descriptions["project_team"]
        elif page_type == "activity":
            page_description += descriptions["activity"]
        elif page_type == "notebooks":
            page_description += descriptions["notebooks"]
        elif page_type == "explore":
            # Get headers for all entitycore calls
            headers: dict[str, str] = {}
            if self.metadata.vlab_id is not None:
                headers["virtual-lab-id"] = str(self.metadata.vlab_id)
            if self.metadata.project_id is not None:
                headers["project-id"] = str(self.metadata.project_id)

            # Get some information about the current brain region.
            if "br_id" in query_params:
                response = await self.metadata.httpx_client.get(
                    url=self.metadata.entitycore_url.rstrip("/")
                    + f"/brain-region/{query_params['br_id'][0]}",
                    headers=headers,
                )
                if response.status_code != 200:
                    raise ValueError(
                        f"The brain region endpoint returned a non 200 response code. Error: {response.text}"
                    )
                current_brain_region = BrainRegionRead(**response.json())

            # Handle explore sub-pages
            if (
                len(page_path) > 2
                and page_path[1] == "interactive"
                and page_path[2] == "experimental"
            ):
                entity_mapping = {
                    "morphology": "reconstruction-morphology",
                    "electrophysiology": "electrical-cell-recording",
                    "neuron-density": "experimental-neuron-density",
                    "bouton-density": "experimental-bouton-density",
                    "synapse-per-connection": "experimental-synapses-per-connection",
                }

                if len(page_path) == 4:
                    # artifacts list from a sepcific brain region.
                    entity_type = page_path[3]
                    match entity_type:
                        case "morphology":
                            page_description += descriptions["explore-morphology"]
                        case "electrophysiology":
                            page_description += descriptions[
                                "explore-electrophysiology"
                            ]
                        case "neuron-density":
                            page_description += descriptions["explore-neuron-density"]
                        case "bouton-density":
                            page_description += descriptions["explore-bouton-density"]
                        case "synapse-per-connection":
                            page_description += descriptions[
                                "explore-synapse-per-connection"
                            ]

                    if "br_id" in query_params:
                        query_param = {
                            "page_size": "30",
                            "page": "1",
                            "order_by": "-creation_date",
                            "within_brain_region_hierarchy_id": "e3e70682-c209-4cac-a29f-6fbed82c07cd",
                            "within_brain_region_brain_region_id": query_params[
                                "br_id"
                            ][0],
                            "within_brain_region_ascendants": "false",
                            "with_facets": "true",
                        }

                        response = await self.metadata.httpx_client.get(
                            url=self.metadata.entitycore_url.rstrip("/")
                            + f"/{entity_mapping[entity_type]}",
                            headers=headers,
                            params=query_param,
                        )
                        if response.status_code != 200:
                            raise ValueError(
                                f"The morphology endpoint returned a non 200 response code. Error: {response.text}"
                            )
                        entity_resonse = [
                            f"Name : {entity['name']}, ID : {entity['id']}"
                            for entity in response.json()["data"]
                        ]
                        if current_brain_region:
                            page_description += f"## Current user view \n\n The user is currenly viewing information in brain region : {current_brain_region.name}, with ID : {current_brain_region.id}. The {entity_type} currently on screen are: {entity_resonse}\n"

                if len(page_path) > 4:
                    # artifacts details.
                    entity_type = page_path[3]
                    match entity_type:
                        case "morphology":
                            page_description += descriptions["explore-morphology"]
                        case "electrophysiology":
                            page_description += descriptions[
                                "explore-electrophysiology"
                            ]
                        case "neuron-density":
                            page_description += descriptions["explore-neuron-density"]
                        case "bouton-density":
                            page_description += descriptions["explore-bouton-density"]
                        case "synapse-per-connection":
                            page_description += descriptions[
                                "explore-synapse-per-connection"
                            ]

                    entity_id = page_path[4]

                    # Get info about the current artifact selected.
                    if entity_id:
                        response = await self.metadata.httpx_client.get(
                            url=self.metadata.entitycore_url.rstrip("/")
                            + f"/{entity_mapping[entity_type]}/{entity_id}",
                            headers=headers,
                        )

                        if response.status_code != 200:
                            raise ValueError(
                                f"The entity endpoint returned a non 200 response code. Error: {response.text}"
                            )
                        response_json = response.json()
                        page_description += f"## Current user view \n\n The user is currenly viewing information about {entity_type}, with name : {response_json.get('name')}, with ID : {entity_id}.\n Complete description : {response_json}"

            else:
                # Base explore page description
                page_description += descriptions["explore"]
                page_description += f"## Current user view \n\n The user is currenly viewing information in brain region : {current_brain_region.name}, with ID : {current_brain_region.id}.\nComplete description : {current_brain_region.model_dump_json()}"

        elif page_type == "build":
            # Get headers for all entitycore calls
            headers: dict[str, str] = {}  # type: ignore
            if self.metadata.vlab_id is not None:
                headers["virtual-lab-id"] = str(self.metadata.vlab_id)
            if self.metadata.project_id is not None:
                headers["project-id"] = str(self.metadata.project_id)

            # Get some information about the current brain region.
            if "br_id" in query_params:
                response = await self.metadata.httpx_client.get(
                    url=self.metadata.entitycore_url.rstrip("/")
                    + f"/brain-region/{query_params['br_id'][0]}",
                    headers=headers,
                )
                if response.status_code != 200:
                    raise ValueError(
                        f"The brain region endpoint returned a non 200 response code. Error: {response.text}"
                    )
                current_brain_region = BrainRegionRead(**response.json())

            page_description += f"## Current user view \n\n The user is currenly viewing information in brain region : {current_brain_region.name}, with ID : {current_brain_region.id}.\nComplete description : {current_brain_region.model_dump_json()}"

            if len(page_path) > 3:
                if page_path[1] == "me-model":
                    if len(page_path) == 3 and page_path[2] == "new":
                        page_description += descriptions["build-me-model"]
                    elif len(page_path) == 4 and page_path[3] == "configure":
                        page_description += descriptions["build-me-model-details"]
                    elif len(page_path) == 5:
                        entity_type = page_path[4]
                        if entity_type == "morphology":
                            if "br_id" in query_params:
                                query_param = {
                                    "page_size": "30",
                                    "page": "1",
                                    "order_by": "-creation_date",
                                    "within_brain_region_hierarchy_id": "e3e70682-c209-4cac-a29f-6fbed82c07cd",
                                    "within_brain_region_brain_region_id": query_params[
                                        "br_id"
                                    ][0],
                                    "within_brain_region_ascendants": "false",
                                    "with_facets": "true",
                                }

                                response = await self.metadata.httpx_client.get(
                                    url=self.metadata.entitycore_url.rstrip("/")
                                    + "reconstruction-morphology",
                                    headers=headers,
                                    params=query_param,
                                )
                                if response.status_code != 200:
                                    raise ValueError(
                                        f"The morphology endpoint returned a non 200 response code. Error: {response.text}"
                                    )
                                entity_resonse = [
                                    f"Name : {entity['name']}, ID : {entity['id']}"
                                    for entity in response.json()["data"]
                                ]
                                page_description += f"## Current user view \n\n The {entity_type} currently on screen are: {entity_resonse}\n"

                            page_description += descriptions[
                                "build-me-model-morphology-selection"
                            ]

                        elif entity_type == "e-model":
                            if "br_id" in query_params:
                                query_param = {
                                    "page_size": "30",
                                    "page": "1",
                                    "order_by": "-creation_date",
                                    "within_brain_region_hierarchy_id": "e3e70682-c209-4cac-a29f-6fbed82c07cd",
                                    "within_brain_region_brain_region_id": query_params[
                                        "br_id"
                                    ][0],
                                    "within_brain_region_ascendants": "false",
                                    "with_facets": "true",
                                }

                                response = await self.metadata.httpx_client.get(
                                    url=self.metadata.entitycore_url.rstrip("/")
                                    + "/electrical-cell-recording",
                                    headers=headers,
                                    params=query_param,
                                )
                                if response.status_code != 200:
                                    raise ValueError(
                                        f"The electrical-cell-recording endpoint returned a non 200 response code. Error: {response.text}"
                                    )
                                entity_resonse = [
                                    f"Name : {entity['name']}, ID : {entity['id']}"
                                    for entity in response.json()["data"]
                                ]
                                page_description += f"## Current user view \n\n The {entity_type} currently on screen are: {entity_resonse}\n"
                                page_description += descriptions[
                                    "build-me-model-e-model-selection"
                                ]

                if page_path[1] == "synaptome":
                    if len(page_path) == 3 and page_path[2] == "new":
                        page_description += descriptions["build-synaptome"]
                    elif len(page_path) == 4 and page_path[3] == "configure":
                        page_description += descriptions["build-synaptome-details"]
                    else:
                        page_description += "This page has not be implemented yet."
            else:
                page_description += descriptions["build"]

        elif page_type == "simulate":
            page_description += descriptions["Experiment"]
        elif page_type == "admin":
            page_description += descriptions["Admin"]
        else:
            raise ValueError("Unknown page type.")

        return ContextAnalyzerOutput(
            is_in_project=is_in_project,
            full_page_path=full_page_path,
            page_description=page_description,
        )

    @classmethod
    async def is_online(cls) -> bool:
        """Check if the tool is online. Always online."""
        return True
