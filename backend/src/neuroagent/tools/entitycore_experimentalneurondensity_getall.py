"""Get Experimental Neuron Density tool."""

from typing import ClassVar, Literal

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseExperimentalNeuronDensityRead,
    ReadManyExperimentalNeuronDensityGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class ExperimentalNeuronDensityGetAllInput(
    ReadManyExperimentalNeuronDensityGetParametersQuery
):
    """Inputs for the experimental neuron density get all tool."""

    within_brain_region_brain_region_id: str | None = Field(  # type: ignore[assignment]
        default=None,
        description="ID of the brain region of interest in UUID format. To find the ID use the resolve-brain-region-tool first.",
    )
    within_brain_region_hierarchy_id: Literal[
        "e3e70682-c209-4cac-a29f-6fbed82c07cd"
    ] = Field(  # type: ignore[assignment]
        default="e3e70682-c209-4cac-a29f-6fbed82c07cd",
        description="The hierarchy ID for brain regions. This is fixed to ensure consistent results.",
    )


class ExperimentalNeuronDensityGetAllMetadata(BaseMetadata):
    """Metadata class for ExperimentalNeuronDensityGetAllTool."""

    httpx_client: AsyncClient
    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class ExperimentalNeuronDensityGetAllTool(BaseTool):
    """Class defining the Get Experimental Neuron Density logic."""

    name: ClassVar[str] = "entitycore-experimentalneurondensity-getall"
    name_frontend: ClassVar[str] = "Get All Experimental Neuron Densities"
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve experimental neuron densities.
    Requires a 'brain_region_id' which is the ID of the brain region of interest as registered in the knowledge graph.
    The output is a list of experimental neuron densities, containing:
    - The brain region ID and name
    - The subject species name
    - The density ID (it is the `id` field in the response - ignore other IDs)
    - The density name
    - The density description
    - Associated measurements
    - Associated contributions
    - Associated mtypes and etypes

    We explicitly exclude the assets but you can access them using the Get One Density tool.
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve experimental neuron densities. Use this tool to:
    • Find neuron densities in specific brain regions
    • Search by mtype or etype
    • Access detailed density data

    Specify brain region and optional criteria to find relevant densities."""
    metadata: ExperimentalNeuronDensityGetAllMetadata
    input_schema: ExperimentalNeuronDensityGetAllInput

    async def arun(self) -> ListResponseExperimentalNeuronDensityRead:
        """From query parameters, extract experimental neuron densities.

        Returns
        -------
            list of ExperimentalNeuronDensityRead to describe the density and its metadata, or an error dict.
        """
        query_params = self.input_schema.model_dump(exclude_defaults=True, mode="json")
        query_params["within_brain_region_hierarchy_id"] = (
            "e3e70682-c209-4cac-a29f-6fbed82c07cd"  # we need to explicitly add this since we exclude defaults
        )

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + "/experimental-neuron-density",
            headers=headers,
            params=query_params,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The experimental neuron density endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        # Set assets to empty lists for each density
        for density in response_data["data"]:
            density["assets"] = []

        return ListResponseExperimentalNeuronDensityRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
