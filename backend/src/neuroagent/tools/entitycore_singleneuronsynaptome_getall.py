"""Get All SingleNeuronSynaptome tool."""

from typing import ClassVar

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseSingleNeuronSynaptomeRead,
    ReadManySingleNeuronSynaptomeGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata


class SingleNeuronSynaptomeGetAllInput(ReadManySingleNeuronSynaptomeGetParametersQuery):
    """Inputs for the single-neuron-synaptome get all tool."""

    page_size: int = Field(
        ge=1,
        le=10,
        default=5,
        description="Number of items per page",
    )


class SingleNeuronSynaptomeGetAllTool(BaseTool):
    """Class defining the Get All Single Neuron Synaptomes logic."""

    name: ClassVar[str] = "entitycore-singleneuronsynaptome-getall"
    name_frontend: ClassVar[str] = "Get All Single Neuron Synaptomes"
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve single-neuron-synaptomes.
    The output is a list of single-neuron-synaptomes, containing:
    - The single neuron synaptome ID and basic identifiers
    - Core single neuron synaptome information and properties
    - Status and state information
    - Associated metadata and relationships
    - Creation and modification timestamps
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve single-neuron-synaptomes. Use this tool to:
    • Find single-neuron-synaptomes by various criteria
    • Access detailed single-neuron-synaptome data

    Specify optional criteria to find relevant single-neuron-synaptomes."""
    metadata: EntitycoreMetadata
    input_schema: SingleNeuronSynaptomeGetAllInput

    async def arun(self) -> ListResponseSingleNeuronSynaptomeRead:
        """Extract single-neuron-synaptomes.

        Returns
        -------
            list of single-neuron-synaptomes and their metadata, or an error dict.
        """
        query_params = self.input_schema.model_dump(exclude_defaults=True, mode="json")
        query_params["page_size"] = self.input_schema.page_size

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/single-neuron-synaptome",
            headers=headers,
            params=query_params,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The single-neuron-synaptome endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        return ListResponseSingleNeuronSynaptomeRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
