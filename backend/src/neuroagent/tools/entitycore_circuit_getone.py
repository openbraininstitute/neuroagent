"""Get One Circuit tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    CircuitRead,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata


class CircuitGetOneInput(BaseModel):
    """Inputs for the circuit get one tool."""

    circuit_id: UUID = Field(
        description="ID of the circuit of interest in UUID format."
    )


class CircuitGetOneTool(BaseTool):
    """Class defining the Get One Circuit logic."""

    name: ClassVar[str] = "entitycore-circuit-getone"
    name_frontend: ClassVar[str] = "Get One Circuit"
    utterances: ClassVar[list[str]] = [
        "Get details for this circuit",
        "Show me information about this circuit",
        "What are the properties of this circuit?",
    ]
    description: ClassVar[
        str
    ] = """Retrieves basic metadata information about a specific circuit from the knowledge graph.
    Requires a 'circuit_id' which is the ID of the circuit of interest as registered in the knowledge graph.
    
    **Important**: This tool only provides basic circuit metadata and does NOT contain detailed circuit metrics such as:
    - Node populations (biophysical or virtual neurons)
    - Edge populations (chemical or electrical connections)
    - Synaptic properties and connectivity data
    - Circuit statistics and measurements
    - Filterable properties for analysis
    
    The output contains basic information about the circuit, including:
    - The circuit ID and basic identifiers
    - Core circuit information and properties
    - Status and state information
    - Associated metadata and relationships
    - Creation and modification timestamps
    - Creation and update dates
    
    For detailed circuit analysis and metrics, use the obi-one endpoints:
    - `obione-circuitmetrics-getone` - Get comprehensive circuit metrics and properties
    - `obione-circuitconnectivitymetrics-getone` - Analyze connectivity patterns and synaptic connections
    """
    description_frontend: ClassVar[
        str
    ] = """Get basic metadata information about a specific circuit. Use this tool to:
    • View basic circuit metadata
    • Access circuit identifiers and status
    • Get creation and update information

    **Note**: This tool provides only basic metadata. For detailed circuit analysis, use:
    • `obione-circuitmetrics-getone` - Get comprehensive circuit metrics
    • `obione-circuitconnectivitymetrics-getone` - Analyze connectivity patterns

    Specify the circuit ID to retrieve its basic details."""
    metadata: EntitycoreMetadata
    input_schema: CircuitGetOneInput

    async def arun(self) -> CircuitRead:
        """From a circuit ID, extract detailed circuit information.

        Returns
        -------
            CircuitRead containing detailed circuit information, or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/circuit/{self.input_schema.circuit_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The circuit endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        response_data["url_link"] = (
            self.metadata.entity_frontend_url + "/" + response_data["id"]
        )
        return CircuitRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
