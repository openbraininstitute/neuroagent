"""Tool to generate an obi-one compatible simulation config."""

from typing import ClassVar

from openai import AsyncOpenAI
from pydantic import BaseModel, Field
from pydantic.json_schema import SkipJsonSchema

from neuroagent.tools.autogenerated_types.obione import (
    CircuitFromID,
    ObiOneScientificSimulationSimulationsSimulationsFormInitialize,
    SimulationsForm,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool
from neuroagent.utils import get_token_count


class GenerateSimulationsConfigInput(BaseModel):
    """Inputs of the GenerateSimulationsConfig tool."""

    circuit_id: str = Field(
        description="UUID of the target circuit that has to be simulated."
    )
    config_request: str = Field(
        description="A complete description of the desired configuration that will be sent to an LLM for JSON generation. This should describe the ENTIRE configuration as it should exist after any requested changes, not just the modifications. For example, if a user says 'add X to my config' or 'remove Y from my config', translate this into a full description of what the complete configuration should contain, including all existing elements plus the requested additions or minus the requested removals."
    )


class GenerateSimulationsConfigMetadata(BaseMetadata):
    """Metadata of the GenerateSimulationsConfig tool."""

    openai_client: AsyncOpenAI
    token_consumption: dict[str, str | int | None] | None = None


class InitializeNoCircuit(
    ObiOneScientificSimulationSimulationsSimulationsFormInitialize
):
    """Simulation Initialize block without reference to the circuit."""

    circuit: SkipJsonSchema[None] = Field(default=None, title="Circuit", exclude=True)  # type: ignore


class SimulationsFormModified(SimulationsForm):
    """Simulations form that redefines certain attributes."""

    initialize: InitializeNoCircuit = Field(
        ...,
        description="Parameters for initializing the simulation.",
        title="Initialization",
    )


class GenerateSimulationsConfigTool(BaseTool):
    """Class defining the GenerateSimulationsConfig tool."""

    name: ClassVar[str] = "obione-generatesimulationsconfig"
    name_frontend: ClassVar[str] = "Generate Simulation Config"
    utterances: ClassVar[list[str]] = [
        "Create a simulation configuration",
        "Generate a config for me",
        "Set up simulation parameters",
    ]
    description: ClassVar[
        str
    ] = """This tool generates JSON configurations for simulations based on natural language descriptions. It takes a user's request for a configuration (including modifications to existing configs) and uses an LLM with structured output to produce the corresponding JSON.
    Always use a circuit ID with this tool. If you can't see a reference to an existing circuit in the chat, ask for clarifications.
The tool is designed to handle both new configuration requests and modifications to existing configurations. When users request changes like "add feature X" or "remove setting Y", the tool requires a complete description of the desired final configuration state, not just the incremental changes.

Input: A comprehensive description of the desired configuration
Output: Structured JSON configuration generated by an LLM

Use this tool when users need to:
- Create new configurations from scratch
- Modify existing configurations
- Convert configuration requirements into structured JSON format

Always call this tool to generate a simulation config, never attempt to generate one yourself.
Do not try to generate a simulation config yourself if the tool fails.
    """
    description_frontend: ClassVar[
        str
    ] = """Create or modify JSON configurations using natural language.
Simply specify in plain english what you want your configuration to achieve or what changes you'd like to make."""
    metadata: GenerateSimulationsConfigMetadata
    input_schema: GenerateSimulationsConfigInput

    async def arun(self) -> SimulationsForm:
        """Run the tool."""
        system_prompt = """# Simulation Configuration Generator

You are an expert at generating valid JSON simulation configurations following the SimulationsForm schema.
The description of the required configuration is going to be the first `user` message you receive.
To generate a meaningful simulation config, follow these critical rules:

## Neuron Sets and References
- Generate neuron sets in the "neuron_sets" dictionary with meaningful keys
- **Only create neuron sets that will actually be used**
- For references (NeuronSetReference, TimestampsReference):
  - `block_name`: the dictionary key (e.g., "all_neurons")
  - `block_dict_name`: the parent dictionary name (e.g., "neuron_sets", "timestamps")
- Avoid duplicate or unused neuron sets unless specifically requested

## Timestamps and Stimuli Logic
- **Only generate timestamps if stimuli will use them**
- Choose stimulus type based on timing pattern:
  - **Single timestamp + MultiPulse**: For repeated pulses at one timepoint
  - **Multiple timestamps + single-pulse stimulus**: For stimuli at different timepoints
  - **Never combine MultiPulse with repetitive timestamps**

## Parameter Values
- Use single values, not single-element lists (e.g., `"duration": 500.0` not `"duration": [500.0]`)
- Lists indicate parameter sweeps - only use when scanning multiple values
- For IDNeuronSet, include meaningful number of neurons (typically 50+ for populations)

## Validation Checklist
Before outputting, verify:
- [ ] All references use existing dictionary keys with correct block_dict_name
- [ ] No unused neuron sets or timestamps
- [ ] Stimulus timing logic is coherent
- [ ] No single-element lists unless intentional parameter sweep

Generate only the JSON configuration, ensuring all references are internally consistent.
"""
        model = "gpt-5-mini"
        # Then generate the global class and make the according references
        response = await self.metadata.openai_client.beta.chat.completions.parse(
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": self.input_schema.config_request},
            ],
            model=model,
            response_format=SimulationsFormModified,
        )
        if response.choices[0].message.parsed:
            # Get the output config
            config = response.choices[0].message.parsed

            # Gather everything in the OBI-One compatible class
            output_config = SimulationsForm(
                type="SimulationsForm",
                timestamps=config.timestamps or {},
                stimuli=config.stimuli or {},
                recordings=config.recordings or {},
                neuron_sets=config.neuron_sets or {},
                synaptic_manipulations=config.synaptic_manipulations or {},
                initialize=ObiOneScientificSimulationSimulationsSimulationsFormInitialize(
                    circuit=CircuitFromID(
                        id_str=self.input_schema.circuit_id, type="CircuitFromID"
                    ),
                    **config.initialize.model_dump(),
                ),
                info=config.info,
            )

            # Assign token usage
            token_consumption = get_token_count(response.usage)
            self.metadata.token_consumption = {**token_consumption, "model": model}
        else:
            raise ValueError("Couldn't generate a valid simulation config.")
        return output_config

    @classmethod
    async def is_online(cls) -> bool:
        """Check if the tool is online."""
        return True
