"""Get Etype tool."""

import logging
from typing import ClassVar

from httpx import AsyncClient
from pydantic import BaseModel, Field
from pydantic.json_schema import SkipJsonSchema

from neuroagent.tools.autogenerated_types.entitycore.models import (
    ListResponseAnnotation,
)
from neuroagent.tools.autogenerated_types.entitycore.schemas import (
    ReadManyEtypeGetParams,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class EtypeGetAllInput(BaseModel):
    """Inputs of the knowledge graph API."""

    page_size: int = Field(default=100, description="Number of results per page.")
    page: int = Field(default=1, description="Page number for pagination.")
    pref_label: str | None = Field(
        default=None,
        description="Preferred label to filter e-types by.",
    )


class EtypeGetAllMetadata(BaseMetadata):
    """Metadata class for EtypeGetAllTool."""

    httpx_client: AsyncClient
    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class EtypeGetAllQueryParams(ReadManyEtypeGetParams):
    """Query parameters for EtypeGetAllTool with skipped JSON schema for certain fields."""

    virtual_lab_id: SkipJsonSchema[None] = None
    project_id: SkipJsonSchema[None] = None


class EtypeGetAllTool(BaseTool):
    """Class defining the Get Etype logic."""

    name: ClassVar[str] = "entitycore-etype-getall"
    name_frontend: ClassVar[str] = "Get All E-types"
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve e-types.
    The output is a list of e-types, containing:
    - The e-type ID
    - The e-type preferred label
    - The e-type description
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve e-types. Use this tool to:
    • Find e-types by preferred label
    • Access detailed e-type data

    Specify optional criteria to find relevant e-types."""
    metadata: EtypeGetAllMetadata
    input_schema: EtypeGetAllInput

    async def arun(self) -> ListResponseAnnotation:
        """Extract e-types.

        Returns
        -------
            list of e-types and their metadata, or an error dict.
        """
        logger.info(
            f"Entering Get Etype tool. Inputs: {self.input_schema.model_dump()}"
        )

        query_params = EtypeGetAllQueryParams(
            page_size=self.input_schema.page_size,
            page=self.input_schema.page,
            pref_label=self.input_schema.pref_label,
        )

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/etype",
            headers={
                **(
                    {"virtual-lab-id": self.metadata.vlab_id}
                    if self.metadata.vlab_id is not None
                    else {}
                ),
                **(
                    {"project-id": self.metadata.project_id}
                    if self.metadata.project_id is not None
                    else {}
                ),
            },
            params=query_params.model_dump(exclude_defaults=True),
        )
        if response.status_code != 200:
            raise ValueError(
                f"The etype endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        return ListResponseAnnotation(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
