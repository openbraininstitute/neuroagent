"""Get One Person tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    PersonRead,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata


class PersonGetOneInput(BaseModel):
    """Inputs of the knowledge graph API."""

    person_id: UUID = Field(description="ID of the person of interest in UUID format.")


class PersonGetOneTool(BaseTool):
    """Class defining the Get One Person logic."""

    name: ClassVar[str] = "entitycore-person-getone"
    name_frontend: ClassVar[str] = "Get One Person"
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific person from the knowledge graph.
    Requires a 'person_id' which is the ID of the person of interest as registered in the knowledge graph.
    The output contains detailed information about the person, including:
    - The person ID
    - The person's given name
    - The person's family name
    - The person's preferred label
    - Creation and update dates
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific person. Use this tool to:
    • View complete person details
    • Access person names and labels
    • Get creation and update information

    Specify the person ID to retrieve their full details."""
    metadata: EntitycoreMetadata
    input_schema: PersonGetOneInput

    async def arun(self) -> PersonRead:
        """From a person ID, extract detailed person information.

        Returns
        -------
            PersonRead containing detailed person information, or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/person/{self.input_schema.person_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The person endpoint returned a non 200 response code. Error: {response.text}"
            )
        return PersonRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
