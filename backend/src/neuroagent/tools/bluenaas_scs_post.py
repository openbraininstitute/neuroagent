"""BlueNaaS single cell stimulation, simulation and synapse placement tool."""

import logging
from typing import ClassVar, Literal

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.bluenaas.models import (
    CurrentInjectionConfig,
    ExperimentSetupConfig,
    RecordingLocation,
    SimulationStimulusConfig,
    SingleNeuronSimulationConfigInput,
)
from neuroagent.tools.autogenerated_types.bluenaas.schemas import (
    RunSimulationApiBluenaasSimulationSingleNeuronVirtualLabIdProjectIdRunPostParams,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class SCSPostMetadata(BaseMetadata):
    """Metadata class for the get all simulations api."""

    httpx_client: AsyncClient
    vlab_id: str
    project_id: str
    bluenaas_url: str


class InputSCSPost(BaseModel):
    """Inputs for the BlueNaaS single-neuron simulation."""

    me_model_id: str = Field(
        description=(
            "ID of the neuron model to be used in the simulation. The model ID can be"
            " fetched using the 'memodelgetall-tool'."
        )
    )
    current_injection__inject_to: str = Field(
        default="soma[0]", description="Section to inject the current to."
    )
    current_injection__stimulus__stimulus_type: Literal[
        "current_clamp", "voltage_clamp", "conductance"
    ] = Field(default="current_clamp", description="Type of stimulus to be used.")
    current_injection__stimulus__stimulus_protocol: Literal[
        "ap_waveform", "idrest", "iv", "fire_pattern"
    ] = Field(default="ap_waveform", description="Stimulus protocol to be used.")

    current_injection__stimulus__amplitudes: list[float] = Field(
        default=[0.1],
        min_length=1,
        description="List of amplitudes for the stimulus",
    )
    record_from: list[RecordingLocation] = Field(
        default=[RecordingLocation(section="soma[0]", offset=0.5)],
        description=(
            "List of sections to record from during the simulation. Each record"
            " configuration includes the section name and offset."
        ),
    )
    conditions__celsius: int = Field(
        default=34, ge=0, le=50, description="Temperature in celsius"
    )
    conditions__vinit: int = Field(default=-73, description="Initial voltage in mV")
    conditions__hypamp: int = Field(default=0, description="Holding current in nA")
    conditions__max_time: int = Field(
        default=100, le=3000, description="Maximum simulation time in ms"
    )
    conditions__time_step: float = Field(
        default=0.05, ge=0.001, le=10, description="Time step in ms"
    )
    conditions__seed: int = Field(default=100, description="Random seed")


class SCSPostToolOutput(BaseModel):
    """Should return a successful POST request."""

    id: str
    name: str
    status: Literal["success", "pending", "error"]
    error: str | None


class SCSPostTool(BaseTool):
    """Class defining the SCSPost tool."""

    name: ClassVar[str] = "scspost-tool"
    name_frontend: ClassVar[str] = "Run Single-Neuron Simulation"
    description: ClassVar[str] = """Runs a single-neuron simulation.
    Requires a "me_model_id" which must be fetched through the 'memodelgetall-tool' or directly provided by the user.
    Optionally, the user can specify simulation parameters.
    Returns the id of the simulation along with metadatas to fetch the simulation result and analyse it at a later stage.
    """
    description_frontend: ClassVar[
        str
    ] = """Run new single-neuron simulations. This tool helps you:
    • Set up and run neuron simulations
    • Configure simulation parameters
    • Test different stimulation protocols

    Specify the model and simulation parameters to start a new simulation run."""
    metadata: SCSPostMetadata
    input_schema: InputSCSPost
    hil: ClassVar[bool] = True

    async def arun(self) -> SCSPostToolOutput:
        """Run the SCSPost tool."""
        logger.info(
            f"Running SCSPost tool with inputs {self.input_schema.model_dump()}"
        )

        body = SingleNeuronSimulationConfigInput(
            synaptome=None,
            current_injection=CurrentInjectionConfig(
                inject_to=self.input_schema.current_injection__inject_to,
                stimulus=SimulationStimulusConfig(
                    stimulus_type=self.input_schema.current_injection__stimulus__stimulus_type,
                    stimulus_protocol=self.input_schema.current_injection__stimulus__stimulus_protocol,
                    amplitudes=self.input_schema.current_injection__stimulus__amplitudes,
                ),
            ),
            record_from=[
                RecordingLocation(section=r.section, offset=r.offset)
                for r in self.input_schema.record_from
            ],
            conditions=ExperimentSetupConfig(
                celsius=self.input_schema.conditions__celsius,
                vinit=self.input_schema.conditions__vinit,
                hypamp=self.input_schema.conditions__hypamp,
                max_time=self.input_schema.conditions__max_time,
                time_step=self.input_schema.conditions__time_step,
                seed=self.input_schema.conditions__seed,
            ),
            type="single-neuron-simulation",
            duration=self.input_schema.conditions__max_time,
        )

        params = RunSimulationApiBluenaasSimulationSingleNeuronVirtualLabIdProjectIdRunPostParams(
            virtual_lab_id=self.metadata.vlab_id,
            project_id=self.metadata.project_id,
            model_id=self.input_schema.me_model_id,
            realtime=False,
            body=body,
        )

        response = await self.metadata.httpx_client.post(
            url=f"{self.metadata.bluenaas_url}/simulation/single-neuron/{params.virtual_lab_id}/{params.project_id}/run",
            params=params.model_dump(
                exclude_defaults=True, exclude={"virtual_lab_id", "project_id", "body"}
            ),
            json=params.body.model_dump(),
        )
        json_response = response.json()
        return SCSPostToolOutput(
            id=json_response["id"],
            status=json_response["status"],
            name=json_response["name"],
            error=json_response["error"],
        )

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, bluenaas_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            bluenaas_url,
        )
        return response.status_code == 200
