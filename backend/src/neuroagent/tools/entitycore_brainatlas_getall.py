"""Get Brain Atlas tool."""

from typing import ClassVar

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseBrainAtlasRead,
    ReadManyBrainAtlasGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class BrainAtlasGetAllInput(ReadManyBrainAtlasGetParametersQuery):
    """Inputs for the brain atlas get all tool."""

    page_size: int = Field(
        ge=1,
        le=10,
        default=5,
        description="Number of items per page",
    )


class BrainAtlasGetAllMetadata(BaseMetadata):
    """Metadata class for BrainAtlasGetAllTool."""

    httpx_client: AsyncClient
    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class BrainAtlasGetAllTool(BaseTool):
    """Class defining the Get Brain Atlas logic."""

    name: ClassVar[str] = "entitycore-brainatlas-getall"
    name_frontend: ClassVar[str] = "Get All Brain Atlases"
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve brain atlases.
    The output is a list of brain atlases, containing:
    - The brain atlas ID
    - The brain atlas name
    - The brain atlas species
    - Creation and update dates
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve brain atlases. Use this tool to:
    • Find brain atlases by name
    • Filter brain atlases by species
    • Access detailed brain atlas data

    Specify optional criteria to find relevant brain atlases."""
    metadata: BrainAtlasGetAllMetadata
    input_schema: BrainAtlasGetAllInput

    async def arun(self) -> ListResponseBrainAtlasRead:
        """Extract brain atlases.

        Returns
        -------
            list of brain atlases and their metadata, or an error dict.
        """
        query_params = self.input_schema.model_dump(exclude_defaults=True, mode="json")
        query_params["page_size"] = self.input_schema.page_size

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/brain-atlas",
            headers=headers,
            params=query_params,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The brain atlas endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        return ListResponseBrainAtlasRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
