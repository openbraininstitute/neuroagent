"""Get One Experimental Neuron Density tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ExperimentalNeuronDensityRead,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class ExperimentalNeuronDensityGetOneInput(BaseModel):
    """Inputs of the knowledge graph API."""

    density_id: str = Field(
        description="ID of the experimental neuron density of interest in UUID format."
    )


class ExperimentalNeuronDensityGetOneMetadata(BaseMetadata):
    """Metadata class for ExperimentalNeuronDensityGetOneTool."""

    entitycore_url: str
    httpx_client: AsyncClient
    vlab_id: str | None
    project_id: str | None


class ExperimentalNeuronDensityGetOneTool(BaseTool):
    """Class defining the Get One Experimental Neuron Density logic."""

    name: ClassVar[str] = "entitycore-experimentalneurondensity-getone"
    name_frontend: ClassVar[str] = "Get One Experimental Neuron Density"
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific experimental neuron density from the knowledge graph.
    Requires a 'density_id' which is the ID of the density of interest as registered in the knowledge graph.
    The output contains detailed information about the density, including:
    - The density ID (it is the `id` field in the response - ignore other IDs)
    - The density name
    - The density description
    - Associated brain region information
    - Subject species information
    - Associated measurements
    - Associated assets
    - Associated contributions
    - Associated mtypes and etypes
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific experimental neuron density. Use this tool to:
    • View complete density details
    • Access associated metadata
    • Get brain region and species information

    Specify the density ID to retrieve its full details."""
    metadata: ExperimentalNeuronDensityGetOneMetadata
    input_schema: ExperimentalNeuronDensityGetOneInput

    async def arun(self) -> ExperimentalNeuronDensityRead:
        """From a density ID, extract detailed density information.

        Returns
        -------
            ExperimentalNeuronDensityRead containing detailed density information, or an error dict.
        """
        # Validate the UUID format
        density_id = UUID(self.input_schema.density_id)

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/experimental-neuron-density/{density_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The experimental neuron density endpoint returned a non 200 response code. Error: {response.text}"
            )
        return ExperimentalNeuronDensityRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
