"""BlueNaaS single cell stimulation, simulation and synapse placement tool."""

import logging
from typing import ClassVar

from httpx import AsyncClient

from neuroagent.tools.autogenerated_types.bluenaas import (
    PaginatedResponseUnionMEModelResponseSynaptomeModelResponse,
    RetrieveNeuronModelsApiBluenaasNeuronModelVirtualLabIdProjectIdMeModelsGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class MEModelGetAllMetadata(BaseMetadata):
    """Metadata class for the get all me models api."""

    httpx_client: AsyncClient
    vlab_id: str
    project_id: str
    bluenaas_url: str


class MEModelGetAllToolOutput(
    PaginatedResponseUnionMEModelResponseSynaptomeModelResponse
):
    """Rebranding."""


class MEModelGetAllTool(BaseTool):
    """Class defining the MEModelGetAll tool."""

    name: ClassVar[str] = "memodelgetall-tool"
    name_frontend: ClassVar[str] = "Get All ME Models"
    description: ClassVar[str] = """Get multiple me models from the user.
    Returns `page_size` ME-models that belong to the user's project.
    If the user requests an ME-model with specific criteria, use this tool
    to retrieve multiple of its ME-models and chose yourself the one(s) that fit the user's request."""
    description_frontend: ClassVar[
        str
    ] = """Browse through available neuron models in your project. This tool helps you:
    • List all your neuron models
    • Find models by type (single-neuron or synaptome)
    • Navigate through multiple models using pagination

    The tool returns a list of models with their metadata and properties."""
    metadata: MEModelGetAllMetadata
    input_schema: RetrieveNeuronModelsApiBluenaasNeuronModelVirtualLabIdProjectIdMeModelsGetParametersQuery

    async def arun(self) -> MEModelGetAllToolOutput:
        """Run the MEModelGetAll tool."""
        logger.info(
            f"Running MEModelGetAll tool with inputs {self.input_schema.model_dump()}"
        )

        response = await self.metadata.httpx_client.get(
            url=f"{self.metadata.bluenaas_url}/neuron-model/{self.metadata.vlab_id}/{self.metadata.project_id}/me-models",
            params=self.input_schema.model_dump(exclude_defaults=True),
        )

        return MEModelGetAllToolOutput(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, bluenaas_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            bluenaas_url,
        )
        return response.status_code == 200
