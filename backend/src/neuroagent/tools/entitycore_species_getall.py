"""Get All Species tool."""

from typing import ClassVar

from httpx import AsyncClient
from pydantic import Field
from pydantic.json_schema import SkipJsonSchema

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseSpeciesRead,
    ReadManySpeciesGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata


class SpeciesGetAllInput(ReadManySpeciesGetParametersQuery):
    """Inputs for the species get all tool."""

    page_size: int = Field(
        ge=1,
        le=10,
        default=5,
        description="Number of items per page",
    )
    semantic_search: str | None = Field(
        default=None,
        title="Species Name Search",
        description="Perform semantic search to find species by their names. Enter any text related to a species name (e.g., 'Mus Musculus', 'Homo Sapiens', 'Rattus Norvegicus') and receive results ranked by semantic similarity to your query.",
    )
    name: SkipJsonSchema[None] = Field(default=None, exclude=True)
    name__in: SkipJsonSchema[None] = Field(default=None, exclude=True)
    name__ilike: SkipJsonSchema[None] = Field(default=None, exclude=True)


class SpeciesGetAllTool(BaseTool):
    """Class defining the Get Species logic."""

    name: ClassVar[str] = "entitycore-species-getall"
    name_frontend: ClassVar[str] = "Get All Species"
    utterances: ClassVar[list[str]] = [
        "Find species",
        "Show me available species",
        "What species are there?",
    ]
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve species.
    The output is a list of species, containing:
    - The species ID
    - The species name
    - The species taxonomy ID
    - Creation and update dates

    Note: The `semantic_search` parameter will always return results even for irrelevant queries - critically evaluate whether returned species are actually related to your search terms.
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve species. Use this tool to:
    • Find species by name
    • Access detailed species data

    Specify optional criteria to find relevant species."""
    metadata: EntitycoreMetadata
    input_schema: SpeciesGetAllInput

    async def arun(self) -> ListResponseSpeciesRead:
        """Extract species.

        Returns
        -------
            list of species and their metadata, or an error dict.
        """
        query_params = self.input_schema.model_dump(exclude_defaults=True, mode="json")
        query_params["page_size"] = self.input_schema.page_size

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/species",
            headers=headers,
            params=query_params,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The species endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        return ListResponseSpeciesRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
