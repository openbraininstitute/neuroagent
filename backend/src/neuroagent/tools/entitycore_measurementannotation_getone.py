"""Get One Measurement Annotation tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    MeasurementAnnotationRead,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class MeasurementAnnotationGetOneInput(BaseModel):
    """Inputs of the measurement annotation get one tool."""

    measurement_annotation_id: str = Field(
        description="ID of the measurement annotation of interest in UUID format."
    )


class MeasurementAnnotationGetOneMetadata(BaseMetadata):
    """Metadata class for MeasurementAnnotationGetOneTool."""

    entitycore_url: str
    httpx_client: AsyncClient
    vlab_id: str | None
    project_id: str | None


class MeasurementAnnotationGetOneTool(BaseTool):
    """Class defining the Get One Measurement Annotation logic."""

    name: ClassVar[str] = "entitycore-measurementannotation-getone"
    name_frontend: ClassVar[str] = "Get One Measurement Annotation"
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific measurement annotation from the knowledge graph.
    Requires a 'measurement_annotation_id' which is the ID of the measurement annotation of interest as registered in the knowledge graph.
    The output contains detailed information about the measurement annotation, including:
    - The measurement annotation ID
    - The creation date
    - The update date
    - The entity ID
    - The entity type
    - The measurement kinds
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific measurement annotation. Use this tool to:
    • View complete measurement annotation details
    • Access associated metadata
    • Get measurement kinds information

    Specify the measurement annotation ID to retrieve its full details."""
    metadata: MeasurementAnnotationGetOneMetadata
    input_schema: MeasurementAnnotationGetOneInput

    async def arun(self) -> MeasurementAnnotationRead:
        """From a measurement annotation ID, extract detailed measurement annotation information.

        Returns
        -------
            MeasurementAnnotationRead containing detailed measurement annotation information, or an error dict.
        """
        # Validate the UUID format
        measurement_annotation_id = UUID(self.input_schema.measurement_annotation_id)

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/measurement-annotation/{measurement_annotation_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The measurement annotation endpoint returned a non 200 response code. Error: {response.text}"
            )
        return MeasurementAnnotationRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
