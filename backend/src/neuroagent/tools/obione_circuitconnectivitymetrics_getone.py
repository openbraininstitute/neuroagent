"""Obi-one circuit connectivity metrics tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.obione import (
    ConnectivityMetricsOutput,
    ConnectivityMetricsRequest,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class CircuitConnectivityMetricsGetOneToolInput(ConnectivityMetricsRequest):
    """Input class of the circuit connectivity metrics tool."""

    circuit_id: UUID = Field(  # type: ignore[assignment]
        description="ID of the circuit from which the connectivity metrics should be computed."
    )


class CircuitConnectivityMetricsGetOneToolMetadata(BaseMetadata):
    """Metadata class of the circuit connectivity metrics tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class CircuitConnectivityMetricsGetOneTool(BaseTool):
    """Tool to compute the circuit connectivity metrics."""

    name: ClassVar[str] = "obione-circuitconnectivitymetrics-getone"
    name_frontend: ClassVar[str] = "Compute Circuit Connectivity Metrics"
    utterances: ClassVar[list[str]] = [
        "Analyze the circuit connectivity",
        "Compute connectivity metrics for this circuit",
        "Get connectivity information about this circuit",
        "Analyze synaptic connections in this circuit",
    ]
    description: ClassVar[str] = (
        "Analyze connectivity patterns between neuron groups in a circuit.\n\n"
        "**Use this tool to:**\n"
        "- Get connection probabilities between pre/post synaptic groups\n"
        "- Calculate mean synapse counts per connection\n"
        "- Group results by properties (mtype, layer, etc.)\n\n"
        "**Prerequisites:** Call `obione-circuitmetrics-getone` first to get available edge populations and node sets.\n\n"
        "**Common parameters:**\n"
        "- `edge_population`: e.g., 'S1nonbarrel_neurons__S1nonbarrel_neurons__chemical'\n"
        "- `pre_node_set`/`post_node_set`: 'Excitatory', 'Inhibitory', or custom selections\n"
        "- `group_by`: 'mtype', 'layer', 'synapse_class', etc.\n\n"
        "**Example:** Analyze excitatoryâ†’inhibitory connections grouped by morphological type."
    )
    description_frontend: ClassVar[
        str
    ] = """Analyze connectivity patterns between neuron groups.

Returns connection probabilities and mean synapse counts between pre/post synaptic groups, grouped by specified criteria (e.g., mtype, layer)."""
    metadata: CircuitConnectivityMetricsGetOneToolMetadata
    input_schema: CircuitConnectivityMetricsGetOneToolInput

    async def arun(self) -> ConnectivityMetricsOutput:
        """Run the circuit connectivity metrics calculations."""
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual_lab_id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project_id"] = str(self.metadata.project_id)

        request_body = self.input_schema.model_dump(
            exclude_defaults=True,
            mode="json",
            # exclude={"circuit_id"}  # theere is a bug in obi-one that requires to be both a path and request body parameter
        )

        connectivity_metrics_response = await self.metadata.httpx_client.post(
            url=f"{self.metadata.obi_one_url}/declared/connectivity-metrics/{{circuit_id}}",  # circuit_id is passed in the body due to a bug in obi-one
            headers=headers,
            json=request_body,
        )

        if connectivity_metrics_response.status_code != 200:
            raise ValueError(
                f"The connectivity metrics endpoint returned a non 200 response code. Error: {connectivity_metrics_response.text}"
            )
        return ConnectivityMetricsOutput(**connectivity_metrics_response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
