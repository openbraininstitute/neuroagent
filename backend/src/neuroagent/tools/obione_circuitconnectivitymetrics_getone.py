"""Obi-one circuit connectivity metrics tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.obione import (
    ConnectivityMetricsOutput,
    ConnectivityMetricsRequest,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class CircuitConnectivityMetricsGetOneToolInput(ConnectivityMetricsRequest):
    """Input class of the circuit connectivity metrics tool."""

    circuit_id: UUID = Field(
        description="ID of the circuit from which the connectivity metrics should be computed."
    )


class CircuitConnectivityMetricsGetOneToolMetadata(BaseMetadata):
    """Metadata class of the circuit connectivity metrics tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class CircuitConnectivityMetricsGetOneTool(BaseTool):
    """Tool to compute the circuit connectivity metrics."""

    name: ClassVar[str] = "obione-circuitconnectivitymetrics-getone"
    name_frontend: ClassVar[str] = "Compute Circuit Connectivity Metrics"
    utterances: ClassVar[list[str]] = [
        "Analyze the circuit connectivity",
        "Compute connectivity metrics for this circuit",
        "Get connectivity information about this circuit",
        "Analyze synaptic connections in this circuit",
    ]
    description: ClassVar[str] = (
        "Given a circuit ID and edge population, compute the connectivity metrics of it. To be able to provide the rest of the parameters, you need to call the `obione-circuitmetrics-getone` tool first with `level_of_detail_nodes=1`.\n\n"
        "## SONATA Node Sets Specification\n"
        "The `pre_selection` and `post_selection` parameters support the full SONATA Node Sets specification format:\n\n"
        "### Simple Expressions\n"
        "- **Attribute matching**: `{\"layer\": \"2\"}` - select nodes where layer equals \"2\"\n"
        "- **List matching (OR)**: `{\"mtype\": [\"SLM_PPA\", \"SP_PC\"]}` - select nodes where mtype is SLM_PPA OR SP_PC\n"
        "- **Dictionary matching (AND)**: `{\"synapse_class\": \"EXC\", \"mtype\": \"SLM_PPA\"}` - select nodes where synapse_class is EXC AND mtype is SLM_PPA\n"
        "- **Regex matching**: `{\"mtype\": {\"$regex\": \"^SP_.*\"}}` - select nodes where mtype matches regex pattern\n"
        "- **Numeric operators**: `{\"x\": {\"$gt\": 100}}`, `{\"y\": {\"$lt\": 50}}`, `{\"z\": {\"$gte\": 0, \"$lte\": 100}}`\n\n"
        "### Compound Expressions\n"
        "- **Node set references**: `[\"Excitatory\", \"Inhibitory\"]` - combine multiple node sets with OR logic\n"
        "- **Nested compounds**: `[\"Layer2_3\", \"Layer4_5\"]` where Layer2_3 and Layer4_5 are defined node sets\n\n"
        "### Special Keys\n"
        "- **Population selection**: `{\"population\": \"hippocampus_neurons\"}` - select all nodes from specific population\n"
        "- **Node ID selection**: `{\"node_id\": [10, 11, 12, 13, 14, 15]}` - select specific node IDs\n\n"
        "### Available Operators\n"
        "- `$regex` (String): Regular expression matching\n"
        "- `$gt` (Numeric): Greater than\n"
        "- `$lt` (Numeric): Less than\n"
        "- `$gte` (Numeric): Greater than or equal\n"
        "- `$lte` (Numeric): Less than or equal\n\n"
        "Example parameters:\n"
        "{\n"
        '  "circuit_id": "PLACEHOLDER_CIRCUIT_ID",\n'
        '  "edge_population": "S1nonbarrel_neurons__S1nonbarrel_neurons__chemical",\n'
        '  "pre_selection": {"layer": "2"},\n'
        '  "pre_node_set": "Inhibitory",\n'
        '  "post_selection": {"layer": ["2", "3"]},\n'
        '  "post_node_set": "Excitatory",\n'
        '  "group_by": "mtype",\n'
        '  "max_distance": null\n'
        "}\n\n"
        "Note: Use `obione-circuitmetrics-getone` with `level_of_detail_nodes=1` to get available attribute names and values for the circuit."
    )
    description_frontend: ClassVar[str] = (
        """Analyze a circuit's connectivity patterns, including connection probabilities and synapse counts."""
    )
    metadata: CircuitConnectivityMetricsGetOneToolMetadata
    input_schema: CircuitConnectivityMetricsGetOneToolInput

    async def arun(self) -> ConnectivityMetricsOutput:
        """Run the circuit connectivity metrics calculations."""
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual_lab_id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project_id"] = str(self.metadata.project_id)

        request_body = self.input_schema.model_dump(
            exclude_defaults=True,
            mode="json",
            # exclude={"circuit_id"}  # theere is a bug in obi-one that requires to be both a path and request body parameter
        )

        connectivity_metrics_response = await self.metadata.httpx_client.post(
            url=f"{self.metadata.obi_one_url}/declared/connectivity-metrics/{self.input_schema.circuit_id}",
            headers=headers,
            data=request_body,
        )

        if connectivity_metrics_response.status_code != 200:
            raise ValueError(
                f"The connectivity metrics endpoint returned a non 200 response code. Error: {connectivity_metrics_response.text}"
            )
        return ConnectivityMetricsOutput(**connectivity_metrics_response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
