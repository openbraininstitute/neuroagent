"""Obi-one circuit connectivity metrics tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.obione import (
    ConnectivityMetricsOutput,
    ConnectivityMetricsRequest,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class CircuitConnectivityMetricsGetOneToolInput(
    ConnectivityMetricsRequest,
):
    """Input class of the circuit connectivity metrics tool."""

    circuit_id: UUID = Field(  # type: ignore[assignment]
        description="ID of the circuit from which the connectivity metrics should be computed."
    )
    # there is a bug in obi-one that does not allow sending null for this field so instead we force this to be a required field
    group_by: str = Field(
        description="Morphological type of the neuron.",
    )

    # there is a bug in obi-one that does not allow sending null for these fields, so we set default to empty dict
    pre_selection: dict[str, str | list[str]] = Field(
        default_factory=dict,
        description=(
            "Additional filter for pre-synaptic neurons in Sonata nodeset JSON format. "
            "Applied on top of pre_node_set if present. "
            'Format: {"property": "value"} or {"property": ["val1", "val2"]}. '
            'Example: {"mtype": "L2/3PC"} filters to L2/3 pyramidal cells. '
            "Note: Inspect the `property_unique_values` of the corresponding node population in the `obione-circuitmetrics-getone` tool output to see valid values. "
            "If not provided, only pre_node_set filter is applied."
        ),
    )
    # there is a bug in obi-one that does not allow sending null for this field, so we set default to empty dict
    post_selection: dict[str, str | list[str]] = Field(
        default_factory=dict,
        description=(
            "Additional filter for post-synaptic neurons in Sonata nodeset JSON format. "
            "Applied on top of post_node_set if present. "
            'Format: {"property": "value"} or {"property": ["val1", "val2"]}. '
            'Example: {"mtype": "L5PC"} filters to L5 pyramidal cells. '
            "Note: Inspect the `property_unique_values` of the corresponding node population in the `obione-circuitmetrics-getone` tool output to see valid values. "
            "If not provided, only post_node_set filter is applied."
        ),
    )


class CircuitConnectivityMetricsGetOneToolMetadata(BaseMetadata):
    """Metadata class of the circuit connectivity metrics tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class CircuitConnectivityMetricsGetOneTool(BaseTool):
    """Tool to compute the circuit connectivity metrics."""

    name: ClassVar[str] = "obione-circuitconnectivitymetrics-getone"
    name_frontend: ClassVar[str] = "Compute Circuit Connectivity Metrics"
    utterances: ClassVar[list[str]] = [
        "Analyze the circuit connectivity",
        "Compute connectivity metrics for this circuit",
        "Get connectivity information about this circuit",
        "Analyze synaptic connections in this circuit",
    ]
    description: ClassVar[str] = (
        "Analyze connectivity patterns between neuron groups in a circuit.\n\n"
        "**Use this tool to:**\n"
        "- Get connection probabilities between pre/post synaptic groups\n"
        "- Calculate mean synapse counts per connection\n"
        "- Group results by properties (mtype, layer, etc.)\n\n"
        "**Prerequisites:** Call `obione-circuitmetrics-getone` first to get available edge populations, node sets, property names and possible property values.\n\n"
        "**Neuron filtering (optional):**\n"
        "- `pre_node_set`/`post_node_set`: 'Excitatory', 'Inhibitory', or custom selections\n"
        "- `pre_selection`: Additional filter for pre-synaptic neurons (applied on top of pre_node_set)\n"
        "- `post_selection`: Additional filter for post-synaptic neurons (applied on top of post_node_set)\n"
        '- Format: `{"property": "value"}` or `{"property": ["val1", "val2"]}`\n'
        '- Example: `{"mtype": "L2/3PC"}` filters to L2/3 pyramidal cells\n\n'
        "**Common parameters:**\n"
        "- `edge_population`: e.g., 'S1nonbarrel_neurons__S1nonbarrel_neurons__chemical'\n"
        "- `group_by`: 'mtype', 'layer', 'synapse_class', etc.\n\n"
        "**Example:** Analyze L2/3 pyramidal cells â†’ L5 pyramidal cells connections grouped by morphological type."
    )
    description_frontend: ClassVar[
        str
    ] = """Analyze connectivity patterns between neuron groups.

Returns connection probabilities and mean synapse counts between pre/post synaptic groups, grouped by specified criteria (e.g., mtype, layer).

Supports optional pre_selection and post_selection parameters as additional filters on top of node sets."""
    metadata: CircuitConnectivityMetricsGetOneToolMetadata
    input_schema: CircuitConnectivityMetricsGetOneToolInput

    async def arun(self) -> ConnectivityMetricsOutput:
        """Run the circuit connectivity metrics calculations."""
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual_lab_id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project_id"] = str(self.metadata.project_id)

        request_body = self.input_schema.model_dump(
            exclude_defaults=False,
            mode="json",
        )

        # we want to ensure that pre_selection and post_selection are always sent as empty dicts if not provided, to fix a bug in obi-one
        if request_body.get("pre_selection") is None:
            request_body["pre_selection"] = {}

        if request_body.get("post_selection") is None:
            request_body["post_selection"] = {}

        connectivity_metrics_response = await self.metadata.httpx_client.post(
            url=f"{self.metadata.obi_one_url}/declared/connectivity-metrics/{{circuit_id}}",  # circuit_id is passed in the body due to a bug in obi-one
            headers=headers,
            json=request_body,
        )

        if connectivity_metrics_response.status_code != 200:
            raise ValueError(
                f"The connectivity metrics endpoint returned a non 200 response code. Error: {connectivity_metrics_response.text}"
            )
        return ConnectivityMetricsOutput(**connectivity_metrics_response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
