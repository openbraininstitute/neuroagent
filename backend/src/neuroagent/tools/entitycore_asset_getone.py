"""Get One Asset tool."""

from typing import ClassVar

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.schemas import EntityRoute
from neuroagent.tools.autogenerated_types.entitycore import AssetRead
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class AssetGetOneMetadata(BaseMetadata):
    """Metadata class for AssetGetOneTool."""

    httpx_client: AsyncClient
    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class AssetGetOneInputSchema(BaseModel):
    """Input schema for AssetGetOneTool."""

    entity_route: EntityRoute = Field(..., description="The route of the entity")
    entity_id: str = Field(..., description="The ID of the entity")
    asset_id: str = Field(..., description="The ID of the asset")


class AssetGetOneTool(BaseTool):
    """Class defining the Get One Asset logic."""

    name: ClassVar[str] = "entitycore-asset-getone"
    name_frontend: ClassVar[str] = "Get One Asset"
    description: ClassVar[
        str
    ] = """Retrieves a single asset from the entitycore service.
    The output contains:
    - The asset path
    - The asset full path
    - Whether it's a directory
    - Content type
    - Size
    - SHA256 digest
    - Metadata
    - Label
    - ID
    - Status
    """
    description_frontend: ClassVar[str] = """Retrieve a single asset. Use this tool to:
    • Get detailed information about a specific asset
    • Access asset metadata and properties

    Specify the entity route and entity ID to retrieve the asset."""
    metadata: AssetGetOneMetadata
    input_schema: AssetGetOneInputSchema

    async def arun(self) -> AssetRead:
        """Get one asset.

        Returns
        -------
            Asset information or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=f"{self.metadata.entitycore_url.rstrip('/')}/{self.input_schema.entity_route}/{self.input_schema.entity_id}/assets/{self.input_schema.asset_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The asset endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        return AssetRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
