# generated by fastapi-codegen:
#   filename:  ec_openapi.json
#   timestamp: 2025-05-26T14:44:46+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Literal, Optional, Union
from uuid import UUID

from pydantic import UUID4, BaseModel, Field, PositiveFloat, RootModel


class AgePeriod(RootModel[Literal['prenatal', 'postnatal', 'unknown']]):
    root: Literal['prenatal', 'postnatal', 'unknown'] = Field(..., title='AgePeriod')


class Annotation(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    pref_label: str = Field(..., title='Pref Label')
    alt_label: str = Field(..., title='Alt Label')
    definition: str = Field(..., title='Definition')


class ApiErrorCode(
    RootModel[
        Literal[
            'GENERIC_ERROR',
            'NOT_AUTHENTICATED',
            'NOT_AUTHORIZED',
            'INVALID_REQUEST',
            'ENTITY_NOT_FOUND',
            'ENTITY_FORBIDDEN',
            'ENTITY_DUPLICATED',
            'ASSET_NOT_FOUND',
            'ASSET_DUPLICATED',
            'ASSET_INVALID_FILE',
            'ASSET_MISSING_PATH',
            'ASSET_INVALID_PATH',
            'ASSET_NOT_A_DIRECTORY',
            'ASSET_INVALID_SCHEMA',
            'ION_NAME_NOT_FOUND',
        ]
    ]
):
    root: Literal[
        'GENERIC_ERROR',
        'NOT_AUTHENTICATED',
        'NOT_AUTHORIZED',
        'INVALID_REQUEST',
        'ENTITY_NOT_FOUND',
        'ENTITY_FORBIDDEN',
        'ENTITY_DUPLICATED',
        'ASSET_NOT_FOUND',
        'ASSET_DUPLICATED',
        'ASSET_INVALID_FILE',
        'ASSET_MISSING_PATH',
        'ASSET_INVALID_PATH',
        'ASSET_NOT_A_DIRECTORY',
        'ASSET_INVALID_SCHEMA',
        'ION_NAME_NOT_FOUND',
    ] = Field(..., description='API Error codes.', title='ApiErrorCode')


class AssetLabel(
    RootModel[
        Literal[
            'neurolucida',
            'swc',
            'hdf5',
            'cell_composition_summary',
            'cell_composition_volumes',
            'single_neuron_synaptome_config',
            'single_neuron_synaptome_simulation_io_result',
            'single_cell_simulation_data',
        ]
    ]
):
    root: Literal[
        'neurolucida',
        'swc',
        'hdf5',
        'cell_composition_summary',
        'cell_composition_volumes',
        'single_neuron_synaptome_config',
        'single_neuron_synaptome_simulation_io_result',
        'single_cell_simulation_data',
    ] = Field(..., title='AssetLabel')


class AssetStatus(RootModel[Literal['created', 'deleted']]):
    root: Literal['created', 'deleted'] = Field(..., title='AssetStatus')


class BodyUploadEntityAssetEntityRouteEntityIdAssetsPost(BaseModel):
    file: bytes = Field(..., title='File')
    meta: Optional[Dict[str, Any]] = Field(None, title='Meta')
    label: Optional[AssetLabel] = None


class BrainAtlasRegionRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    volume: Optional[float] = Field(..., title='Volume')
    is_leaf_region: bool = Field(..., title='Is Leaf Region')
    brain_atlas_id: UUID = Field(..., title='Brain Atlas Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')


class BrainRegionHierarchyRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')


class BrainRegionRead(BaseModel):
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    annotation_value: int = Field(..., title='Annotation Value')
    name: str = Field(..., title='Name')
    acronym: str = Field(..., title='Acronym')
    color_hex_triplet: str = Field(..., title='Color Hex Triplet')
    parent_structure_id: Optional[UUID] = Field(..., title='Parent Structure Id')
    hierarchy_id: UUID = Field(..., title='Hierarchy Id')


class ContributionCreate(BaseModel):
    agent_id: UUID = Field(..., title='Agent Id')
    role_id: UUID = Field(..., title='Role Id')
    entity_id: UUID = Field(..., title='Entity Id')


class EModelCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    iteration: str = Field(..., title='Iteration')
    score: float = Field(..., title='Score')
    seed: int = Field(..., title='Seed')
    species_id: UUID = Field(..., title='Species Id')
    strain_id: Optional[UUID] = Field(None, title='Strain Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    exemplar_morphology_id: UUID = Field(..., title='Exemplar Morphology Id')


class ElectricalRecordingOrigin(
    RootModel[Literal['in_vivo', 'in_vitro', 'in_silico', 'unknown']]
):
    root: Literal['in_vivo', 'in_vitro', 'in_silico', 'unknown'] = Field(
        ..., title='ElectricalRecordingOrigin'
    )


class ElectricalRecordingStimulusShape(
    RootModel[
        Literal[
            'cheops',
            'constant',
            'pulse',
            'step',
            'ramp',
            'noise',
            'sinusoidal',
            'other',
            'two_steps',
            'unknown',
        ]
    ]
):
    root: Literal[
        'cheops',
        'constant',
        'pulse',
        'step',
        'ramp',
        'noise',
        'sinusoidal',
        'other',
        'two_steps',
        'unknown',
    ] = Field(..., title='ElectricalRecordingStimulusShape')


class ElectricalRecordingStimulusType(
    RootModel[
        Literal[
            'voltage_clamp',
            'current_clamp',
            'conductance_clamp',
            'extracellular',
            'other',
            'unknown',
        ]
    ]
):
    root: Literal[
        'voltage_clamp',
        'current_clamp',
        'conductance_clamp',
        'extracellular',
        'other',
        'unknown',
    ] = Field(..., title='ElectricalRecordingStimulusType')


class ElectricalRecordingType(
    RootModel[Literal['intracellular', 'extracellular', 'both', 'unknown']]
):
    root: Literal['intracellular', 'extracellular', 'both', 'unknown'] = Field(
        ..., title='ElectricalRecordingType'
    )


class EntityRoute(
    RootModel[
        Literal[
            'analysis-software-source-code',
            'brain-atlas',
            'brain-atlas-region',
            'emodel',
            'cell-composition',
            'experimental-bouton-density',
            'experimental-neuron-density',
            'experimental-synapses-per-connection',
            'memodel',
            'mesh',
            'me-type-density',
            'reconstruction-morphology',
            'electrical-cell-recording',
            'electrical-recording-stimulus',
            'single-neuron-simulation',
            'single-neuron-synaptome',
            'single-neuron-synaptome-simulation',
            'ion-channel-model',
            'subject',
            'validation-result',
        ]
    ]
):
    root: Literal[
        'analysis-software-source-code',
        'brain-atlas',
        'brain-atlas-region',
        'emodel',
        'cell-composition',
        'experimental-bouton-density',
        'experimental-neuron-density',
        'experimental-synapses-per-connection',
        'memodel',
        'mesh',
        'me-type-density',
        'reconstruction-morphology',
        'electrical-cell-recording',
        'electrical-recording-stimulus',
        'single-neuron-simulation',
        'single-neuron-synaptome',
        'single-neuron-synaptome-simulation',
        'ion-channel-model',
        'subject',
        'validation-result',
    ] = Field(..., title='EntityRoute')


class EntityType(
    RootModel[
        Literal[
            'analysis_software_source_code',
            'brain_atlas',
            'brain_atlas_region',
            'emodel',
            'cell_composition',
            'experimental_bouton_density',
            'experimental_neuron_density',
            'experimental_synapses_per_connection',
            'memodel',
            'mesh',
            'me_type_density',
            'reconstruction_morphology',
            'electrical_cell_recording',
            'electrical_recording_stimulus',
            'single_neuron_simulation',
            'single_neuron_synaptome',
            'single_neuron_synaptome_simulation',
            'ion_channel_model',
            'subject',
            'validation_result',
        ]
    ]
):
    root: Literal[
        'analysis_software_source_code',
        'brain_atlas',
        'brain_atlas_region',
        'emodel',
        'cell_composition',
        'experimental_bouton_density',
        'experimental_neuron_density',
        'experimental_synapses_per_connection',
        'memodel',
        'mesh',
        'me_type_density',
        'reconstruction_morphology',
        'electrical_cell_recording',
        'electrical_recording_stimulus',
        'single_neuron_simulation',
        'single_neuron_synaptome',
        'single_neuron_synaptome_simulation',
        'ion_channel_model',
        'subject',
        'validation_result',
    ] = Field(..., description='Entity types.', title='EntityType')


class ErrorResponse(BaseModel):
    error_code: ApiErrorCode
    message: str = Field(..., title='Message')
    details: Optional[Any] = Field(None, title='Details')


class ExperimentalBoutonDensityCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license_id: Optional[UUID] = Field(None, title='License Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    subject_id: UUID = Field(..., title='Subject Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    legacy_id: Optional[str] = Field(..., title='Legacy Id')


class ExperimentalNeuronDensityCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license_id: Optional[UUID] = Field(None, title='License Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    subject_id: UUID = Field(..., title='Subject Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    legacy_id: Optional[str] = Field(..., title='Legacy Id')


class ExperimentalSynapsesPerConnectionCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license_id: Optional[UUID] = Field(None, title='License Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    subject_id: UUID = Field(..., title='Subject Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    legacy_id: Optional[str] = Field(..., title='Legacy Id')
    pre_mtype_id: UUID = Field(..., title='Pre Mtype Id')
    post_mtype_id: UUID = Field(..., title='Post Mtype Id')
    pre_region_id: UUID = Field(..., title='Pre Region Id')
    post_region_id: UUID = Field(..., title='Post Region Id')


class Facet(BaseModel):
    id: Union[UUID, int] = Field(..., title='Id')
    label: str = Field(..., title='Label')
    count: int = Field(..., title='Count')
    type: Optional[str] = Field(..., title='Type')


class Facets(RootModel[Optional[Dict[str, List[Facet]]]]):
    root: Optional[Dict[str, List[Facet]]] = None


class LicenseCreate(BaseModel):
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    label: str = Field(..., title='Label')


class LicenseRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    label: str = Field(..., title='Label')


class MeasurableEntity(RootModel[Literal['reconstruction_morphology']]):
    root: Literal['reconstruction_morphology'] = Field(..., title='MeasurableEntity')


class MeasurementStatistic(
    RootModel[
        Literal[
            'mean',
            'median',
            'mode',
            'variance',
            'data_point',
            'sample_size',
            'standard_error',
            'standard_deviation',
            'raw',
            'minimum',
            'maximum',
            'sum',
        ]
    ]
):
    root: Literal[
        'mean',
        'median',
        'mode',
        'variance',
        'data_point',
        'sample_size',
        'standard_error',
        'standard_deviation',
        'raw',
        'minimum',
        'maximum',
        'sum',
    ] = Field(..., title='MeasurementStatistic')


class MeasurementUnit(
    RootModel[Literal['dimensionless', '1/μm', '1/mm³', 'μm', 'μm²', 'μm³', 'radian']]
):
    root: Literal['dimensionless', '1/μm', '1/mm³', 'μm', 'μm²', 'μm³', 'radian'] = (
        Field(..., title='MeasurementUnit')
    )


class NestedSynaptome(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')


class OrganizationCreate(BaseModel):
    pref_label: str = Field(..., title='Pref Label')
    alternative_name: Optional[str] = Field(None, title='Alternative Name')
    legacy_id: Optional[str] = Field(None, title='Legacy Id')


class OrganizationRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    pref_label: str = Field(..., title='Pref Label')
    alternative_name: Optional[str] = Field(None, title='Alternative Name')
    type: str = Field(..., title='Type')


class PaginationResponse(BaseModel):
    page: int = Field(..., title='Page')
    page_size: int = Field(..., title='Page Size')
    total_items: int = Field(..., title='Total Items')


class PersonCreate(BaseModel):
    given_name: Optional[str] = Field(None, title='Given Name')
    family_name: Optional[str] = Field(None, title='Family Name')
    pref_label: str = Field(..., title='Pref Label')
    legacy_id: Optional[str] = Field(None, title='Legacy Id')


class PersonRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    given_name: Optional[str] = Field(None, title='Given Name')
    family_name: Optional[str] = Field(None, title='Family Name')
    pref_label: str = Field(..., title='Pref Label')
    type: str = Field(..., title='Type')


class PointLocationBase(BaseModel):
    x: float = Field(..., title='X')
    y: float = Field(..., title='Y')
    z: float = Field(..., title='Z')


class ReconstructionMorphologyCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license_id: Optional[UUID] = Field(None, title='License Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    location: Optional[PointLocationBase] = None
    legacy_id: Optional[List[str]] = Field(None, title='Legacy Id')
    species_id: UUID = Field(..., title='Species Id')
    strain_id: Optional[UUID] = Field(None, title='Strain Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')


class RoleCreate(BaseModel):
    name: str = Field(..., title='Name')
    role_id: str = Field(..., title='Role Id')


class RoleRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    role_id: str = Field(..., title='Role Id')


class Sex(RootModel[Literal['male', 'female', 'unknown']]):
    root: Literal['male', 'female', 'unknown'] = Field(..., title='Sex')


class SingleNeuronSimulationStatus(RootModel[Literal['started', 'failure', 'success']]):
    root: Literal['started', 'failure', 'success'] = Field(
        ..., title='SingleNeuronSimulationStatus'
    )


class SingleNeuronSynaptomeCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    me_model_id: UUID = Field(..., title='Me Model Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')


class SingleNeuronSynaptomeSimulationCreate(BaseModel):
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    status: SingleNeuronSimulationStatus
    injection_location: List[str] = Field(..., title='Injection Location')
    recording_location: List[str] = Field(..., title='Recording Location')
    synaptome_id: UUID = Field(..., title='Synaptome Id')


class SpeciesCreate(BaseModel):
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')


class SpeciesRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')


class StrainCreate(BaseModel):
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')
    species_id: UUID = Field(..., title='Species Id')


class StrainRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')
    species_id: UUID = Field(..., title='Species Id')


class StructuralDomain(
    RootModel[
        Literal[
            'apical_dendrite', 'basal_dendrite', 'axon', 'soma', 'neuron_morphology'
        ]
    ]
):
    root: Literal[
        'apical_dendrite', 'basal_dendrite', 'axon', 'soma', 'neuron_morphology'
    ] = Field(..., title='StructuralDomain')


class SubjectCreate(BaseModel):
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    sex: Sex = Field(..., description='Sex of the subject', title='Sex')
    weight: Optional[PositiveFloat] = Field(
        None, description='Weight in grams', title='Weight'
    )
    age_value: Optional[float] = Field(
        None, description='Age value interval.', title='Age value'
    )
    age_min: Optional[float] = Field(
        None, description='Minimum age range', title='Minimum age range'
    )
    age_max: Optional[float] = Field(
        None, description='Maximum age range', title='Maximum age range'
    )
    age_period: Optional[AgePeriod] = None
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    species_id: UUID = Field(..., title='Species Id')


class SubjectRead(BaseModel):
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    sex: Sex = Field(..., description='Sex of the subject')
    weight: Optional[PositiveFloat] = Field(
        None, description='Weight in grams', title='Weight'
    )
    age_value: Optional[float] = Field(
        None, description='Age value interval.', title='Age value'
    )
    age_min: Optional[float] = Field(
        None, description='Minimum age range', title='Minimum age range'
    )
    age_max: Optional[float] = Field(
        None, description='Maximum age range', title='Maximum age range'
    )
    age_period: Optional[AgePeriod] = None
    species: SpeciesRead


class UseIon(BaseModel):
    ion_name: str = Field(..., title='Ion Name')
    read: Optional[List[str]] = Field([], title='Read')
    write: Optional[List[str]] = Field([], title='Write')
    valence: Optional[int] = Field(None, title='Valence')
    main_ion: Optional[bool] = Field(None, title='Main Ion')


class ValidationResultCreate(BaseModel):
    name: str = Field(..., title='Name')
    passed: bool = Field(..., title='Passed')
    validated_entity_id: UUID = Field(..., title='Validated Entity Id')


class ValidationResultRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    passed: bool = Field(..., title='Passed')
    validated_entity_id: UUID = Field(..., title='Validated Entity Id')


class ValidationStatus(
    RootModel[Literal['created', 'initialized', 'running', 'done', 'error']]
):
    root: Literal['created', 'initialized', 'running', 'done', 'error'] = Field(
        ..., title='ValidationStatus'
    )


class HealthGetResponse(BaseModel):
    pass


class VersionGetResponse(BaseModel):
    pass


class VirtualLabId(RootModel[Optional[UUID4]]):
    root: Optional[UUID4] = Field(..., title='Virtual Lab Id')


class ProjectId(RootModel[Optional[UUID4]]):
    root: Optional[UUID4] = Field(..., title='Project Id')


class AssetPath(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Asset Path')


class SpeciesIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Species Id  In')


class Name(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Name')


class NameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Name  In')


class NameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Name  Ilike')


class Id(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Id')


class IdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Id  In')


class OrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Order By')


class SpeciesName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Species  Name')


class SpeciesNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Species  Name  In')


class SpeciesNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Species  Name  Ilike')


class SpeciesId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Species  Id')


class SpeciesOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Species  Order By')


class StrainName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Strain  Name')


class StrainNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Strain  Name  In')


class StrainNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Strain  Name  Ilike')


class StrainId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Strain  Id')


class StrainOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Strain  Order By')


class Acronym(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Acronym')


class AnnotationValue(RootModel[Optional[int]]):
    root: Optional[int] = Field(..., title='Annotation Value')


class HierarchyId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Hierarchy Id')


class CreationDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Creation Date  Lte')


class CreationDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Creation Date  Gte')


class UpdateDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Update Date  Lte')


class UpdateDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Update Date  Gte')


class ContributionId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Contribution  Id')


class ContributionPrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Contribution  Pref Label')


class ContributionPrefLabelIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Contribution  Pref Label  In')


class ContributionOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Contribution  Order By')


class CreatedById(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Created By  Id')


class CreatedByPrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Created By  Pref Label')


class CreatedByPrefLabelIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Created By  Pref Label  In')


class CreatedByOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Created By  Order By')


class UpdatedById(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Updated By  Id')


class UpdatedByPrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Updated By  Pref Label')


class UpdatedByPrefLabelIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Updated By  Pref Label  In')


class UpdatedByOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Updated By  Order By')


class SubjectName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Subject  Name')


class SubjectNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Subject  Name  In')


class SubjectNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Subject  Name  Ilike')


class SubjectSpeciesIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Subject  Species Id  In')


class SubjectId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Subject  Id')


class SubjectOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Subject  Order By')


class BrainRegionName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Brain Region  Name')


class BrainRegionNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Brain Region  Name  In')


class BrainRegionNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Brain Region  Name  Ilike')


class BrainRegionId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Brain Region  Id')


class BrainRegionIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Brain Region  Id  In')


class BrainRegionAcronym(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Brain Region  Acronym')


class BrainRegionAcronymIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Brain Region  Acronym  In')


class BrainRegionOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Brain Region  Order By')


class Search(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Search')


class WithinBrainRegionHierarchyId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Within Brain Region Hierarchy Id')


class WithinBrainRegionBrainRegionId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Within Brain Region Brain Region Id')


class ScoreLte(RootModel[Optional[float]]):
    root: Optional[float] = Field(..., title='Score  Lte')


class ScoreGte(RootModel[Optional[float]]):
    root: Optional[float] = Field(..., title='Score  Gte')


class EtypeId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Etype  Id')


class EtypePrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Etype  Pref Label')


class EtypePrefLabelIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Etype  Pref Label  In')


class EtypeOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Etype  Order By')


class MtypeId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Mtype  Id')


class MtypePrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Mtype  Pref Label')


class MtypePrefLabelIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Mtype  Pref Label  In')


class MtypeOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Mtype  Order By')


class ExemplarMorphologyName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Exemplar Morphology  Name')


class ExemplarMorphologyNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Exemplar Morphology  Name  In')


class ExemplarMorphologyNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Exemplar Morphology  Name  Ilike')


class ExemplarMorphologyCreationDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        ..., title='Exemplar Morphology  Creation Date  Lte'
    )


class ExemplarMorphologyCreationDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        ..., title='Exemplar Morphology  Creation Date  Gte'
    )


class ExemplarMorphologyUpdateDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Exemplar Morphology  Update Date  Lte')


class ExemplarMorphologyUpdateDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Exemplar Morphology  Update Date  Gte')


class ExemplarMorphologyId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Exemplar Morphology  Id')


class ExemplarMorphologyIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Exemplar Morphology  Id  In')


class ExemplarMorphologySpeciesIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Exemplar Morphology  Species Id  In')


class ExemplarMorphologyOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Exemplar Morphology  Order By')


class MeasurementAnnotationCreationDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        ..., title='Measurement Annotation  Creation Date  Lte'
    )


class MeasurementAnnotationCreationDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        ..., title='Measurement Annotation  Creation Date  Gte'
    )


class MeasurementAnnotationUpdateDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        ..., title='Measurement Annotation  Update Date  Lte'
    )


class MeasurementAnnotationUpdateDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        ..., title='Measurement Annotation  Update Date  Gte'
    )


class MeasurementKindPrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Measurement Kind  Pref Label')


class MeasurementKindDefinition(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Measurement Kind  Definition')


class MeasurementKindStructuralDomain(RootModel[Optional[StructuralDomain]]):
    root: Optional[StructuralDomain] = Field(
        ..., title='Measurement Kind  Structural Domain'
    )


class MeasurementItemName(RootModel[Optional[MeasurementStatistic]]):
    root: Optional[MeasurementStatistic] = Field(..., title='Measurement Item  Name')


class MeasurementItemUnit(RootModel[Optional[MeasurementUnit]]):
    root: Optional[MeasurementUnit] = Field(..., title='Measurement Item  Unit')


class MeasurementItemValueGte(RootModel[Optional[float]]):
    root: Optional[float] = Field(..., title='Measurement Item  Value  Gte')


class MeasurementItemValueLte(RootModel[Optional[float]]):
    root: Optional[float] = Field(..., title='Measurement Item  Value  Lte')


class PrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pref Label')


class PrefLabelIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pref Label  In')


class PreMtypeId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Pre Mtype  Id')


class PreMtypePrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Mtype  Pref Label')


class PreMtypePrefLabelIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Mtype  Pref Label  In')


class PreMtypeOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Mtype  Order By')


class PostMtypeId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Post Mtype  Id')


class PostMtypePrefLabel(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Mtype  Pref Label')


class PostMtypePrefLabelIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Mtype  Pref Label  In')


class PostMtypeOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Mtype  Order By')


class PreRegionName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Region  Name')


class PreRegionNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Region  Name  In')


class PreRegionNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Region  Name  Ilike')


class PreRegionId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Pre Region  Id')


class PreRegionIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Region  Id  In')


class PreRegionAcronym(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Region  Acronym')


class PreRegionAcronymIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Region  Acronym  In')


class PreRegionOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Pre Region  Order By')


class PostRegionName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Region  Name')


class PostRegionNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Region  Name  In')


class PostRegionNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Region  Name  Ilike')


class PostRegionId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Post Region  Id')


class PostRegionIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Region  Id  In')


class PostRegionAcronym(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Region  Acronym')


class PostRegionAcronymIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Region  Acronym  In')


class PostRegionOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Post Region  Order By')


class NmodlSuffix(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Nmodl Suffix')


class IsLjpCorrected(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(..., title='Is Ljp Corrected')


class IsTemperatureDependent(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(..., title='Is Temperature Dependent')


class TemperatureCelsiusLte(RootModel[Optional[int]]):
    root: Optional[int] = Field(..., title='Temperature Celsius  Lte')


class TemperatureCelsiusGte(RootModel[Optional[int]]):
    root: Optional[int] = Field(..., title='Temperature Celsius  Gte')


class IsStochastic(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(..., title='Is Stochastic')


class EntityId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Entity Id')


class EntityType1(RootModel[Optional[MeasurableEntity]]):
    root: Optional[MeasurableEntity] = Field(..., title='Entity Type')


class ValidationStatus1(RootModel[Optional[ValidationStatus]]):
    root: Optional[ValidationStatus] = Field(..., title='Validation Status')


class MorphologyName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Morphology  Name')


class MorphologyNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Morphology  Name  In')


class MorphologyNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Morphology  Name  Ilike')


class MorphologyCreationDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Morphology  Creation Date  Lte')


class MorphologyCreationDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Morphology  Creation Date  Gte')


class MorphologyUpdateDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Morphology  Update Date  Lte')


class MorphologyUpdateDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Morphology  Update Date  Gte')


class MorphologyId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Morphology  Id')


class MorphologyIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Morphology  Id  In')


class MorphologySpeciesIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Morphology  Species Id  In')


class MorphologyOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Morphology  Order By')


class EmodelName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Emodel  Name')


class EmodelNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Emodel  Name  In')


class EmodelNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Emodel  Name  Ilike')


class EmodelSpeciesIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Emodel  Species Id  In')


class EmodelCreationDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Emodel  Creation Date  Lte')


class EmodelCreationDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Emodel  Creation Date  Gte')


class EmodelUpdateDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Emodel  Update Date  Lte')


class EmodelUpdateDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Emodel  Update Date  Gte')


class EmodelId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Emodel  Id')


class EmodelIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Emodel  Id  In')


class EmodelScoreLte(RootModel[Optional[float]]):
    root: Optional[float] = Field(..., title='Emodel  Score  Lte')


class EmodelScoreGte(RootModel[Optional[float]]):
    root: Optional[float] = Field(..., title='Emodel  Score  Gte')


class EmodelOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Emodel  Order By')


class Expand(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(..., title='Expand')


class Status(RootModel[Optional[SingleNeuronSimulationStatus]]):
    root: Optional[SingleNeuronSimulationStatus] = Field(..., title='Status')


class MeModelName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Me Model  Name')


class MeModelNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Me Model  Name  In')


class MeModelNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Me Model  Name  Ilike')


class MeModelCreationDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Me Model  Creation Date  Lte')


class MeModelCreationDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Me Model  Creation Date  Gte')


class MeModelUpdateDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Me Model  Update Date  Lte')


class MeModelUpdateDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Me Model  Update Date  Gte')


class MeModelId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Me Model  Id')


class MeModelIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Me Model  Id  In')


class MeModelSpeciesIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Me Model  Species Id  In')


class MeModelValidationStatus(RootModel[Optional[ValidationStatus]]):
    root: Optional[ValidationStatus] = Field(..., title='Me Model  Validation Status')


class MeModelOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Me Model  Order By')


class SynaptomeName(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Synaptome  Name')


class SynaptomeNameIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Synaptome  Name  In')


class SynaptomeNameIlike(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Synaptome  Name  Ilike')


class SynaptomeCreationDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Synaptome  Creation Date  Lte')


class SynaptomeCreationDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Synaptome  Creation Date  Gte')


class SynaptomeUpdateDateLte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Synaptome  Update Date  Lte')


class SynaptomeUpdateDateGte(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(..., title='Synaptome  Update Date  Gte')


class SynaptomeId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Synaptome  Id')


class SynaptomeIdIn(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Synaptome  Id  In')


class SynaptomeOrderBy(RootModel[Optional[str]]):
    root: Optional[str] = Field(..., title='Synaptome  Order By')


class Passed(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(..., title='Passed')


class ValidatedEntityId(RootModel[Optional[UUID]]):
    root: Optional[UUID] = Field(..., title='Validated Entity Id')


class AgentRead(RootModel[Union[PersonRead, OrganizationRead]]):
    root: Union[PersonRead, OrganizationRead]


class AssetRead(BaseModel):
    path: str = Field(..., title='Path')
    full_path: str = Field(..., title='Full Path')
    is_directory: bool = Field(..., title='Is Directory')
    content_type: str = Field(..., title='Content Type')
    size: int = Field(..., title='Size')
    sha256_digest: Optional[str] = Field(..., title='Sha256 Digest')
    meta: Dict[str, Any] = Field(..., title='Meta')
    label: Optional[AssetLabel] = None
    id: UUID = Field(..., title='Id')
    status: AssetStatus


class BrainAtlasRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    hierarchy_id: UUID = Field(..., title='Hierarchy Id')
    species: SpeciesRead


class ContributionReadWithoutEntity(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    agent: AgentRead
    role: RoleRead


class ElectricalCellRecordingCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license_id: Optional[UUID] = Field(None, title='License Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ljp: Optional[float] = Field(
        0,
        description='Correction applied to the voltage trace, in mV',
        title='Liquid Junction Potential',
    )
    recording_location: List[str] = Field(
        ...,
        description='Location on the cell where recording was performed, in hoc-compatible format.',
        title='Recording Location',
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title='Recording Type',
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title='Recording Origin',
    )
    comment: Optional[str] = Field(
        None, description='Comment with further details.', title='Comment'
    )
    legacy_id: Optional[List[str]] = Field(None, title='Legacy Id')
    subject_id: UUID = Field(..., title='Subject Id')
    brain_region_id: Optional[UUID] = Field(None, title='Brain Region Id')


class ElectricalRecordingStimulusRead(BaseModel):
    type: Optional[EntityType] = None
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    dt: Optional[float] = Field(None, title='Dt')
    injection_type: ElectricalRecordingStimulusType
    shape: ElectricalRecordingStimulusShape
    start_time: Optional[float] = Field(None, title='Start Time')
    end_time: Optional[float] = Field(None, title='End Time')


class EntityRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    id: UUID = Field(..., title='Id')
    type: str = Field(..., title='Type')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(..., title='Authorized Public')


class ExemplarMorphology(BaseModel):
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    location: Optional[PointLocationBase] = None
    legacy_id: Optional[List[str]] = Field(..., title='Legacy Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')


class ListResponseAnnotation(BaseModel):
    data: List[Annotation] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseAssetRead(BaseModel):
    data: List[AssetRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseBrainAtlasRead(BaseModel):
    data: List[BrainAtlasRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseBrainAtlasRegionRead(BaseModel):
    data: List[BrainAtlasRegionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseBrainRegionHierarchyRead(BaseModel):
    data: List[BrainRegionHierarchyRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseBrainRegionRead(BaseModel):
    data: List[BrainRegionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseLicenseRead(BaseModel):
    data: List[LicenseRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseOrganizationRead(BaseModel):
    data: List[OrganizationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponsePersonRead(BaseModel):
    data: List[PersonRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseRoleRead(BaseModel):
    data: List[RoleRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSpeciesRead(BaseModel):
    data: List[SpeciesRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseStrainRead(BaseModel):
    data: List[StrainRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSubjectRead(BaseModel):
    data: List[SubjectRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseValidationResultRead(BaseModel):
    data: List[ValidationResultRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class MEModelCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    validation_status: Optional[ValidationStatus] = Field(
        default_factory=lambda: ValidationStatus.model_validate('created')
    )
    holding_current: Optional[float] = Field(None, title='Holding Current')
    threshold_current: Optional[float] = Field(None, title='Threshold Current')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    morphology_id: UUID = Field(..., title='Morphology Id')
    emodel_id: UUID = Field(..., title='Emodel Id')
    species_id: UUID = Field(..., title='Species Id')
    strain_id: Optional[UUID] = Field(None, title='Strain Id')


class MeasurementItem(BaseModel):
    name: Optional[MeasurementStatistic] = None
    unit: Optional[MeasurementUnit] = None
    value: Optional[float] = Field(..., title='Value')


class MeasurementKindCreate(BaseModel):
    structural_domain: StructuralDomain
    measurement_items: List[MeasurementItem] = Field(..., title='Measurement Items')
    pref_label: str = Field(..., title='Pref Label')


class MeasurementKindRead(BaseModel):
    structural_domain: StructuralDomain
    measurement_items: List[MeasurementItem] = Field(..., title='Measurement Items')
    pref_label: str = Field(..., title='Pref Label')


class MeasurementRead(BaseModel):
    id: int = Field(..., title='Id')
    name: str = Field(..., title='Name')
    unit: MeasurementUnit
    value: float = Field(..., title='Value')


class NestedMEModel(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    validation_status: Optional[ValidationStatus] = Field(
        default_factory=lambda: ValidationStatus.model_validate('created')
    )
    holding_current: Optional[float] = Field(None, title='Holding Current')
    threshold_current: Optional[float] = Field(None, title='Threshold Current')
    mtypes: Optional[List[Annotation]] = Field(..., title='Mtypes')
    etypes: Optional[List[Annotation]] = Field(..., title='Etypes')


class NeuronBlock(BaseModel):
    global_: Optional[List[Dict[str, Optional[str]]]] = Field(
        [], alias='global', title='Global'
    )
    range: Optional[List[Dict[str, Optional[str]]]] = Field([], title='Range')
    useion: Optional[List[UseIon]] = Field([], title='Useion')
    nonspecific: Optional[List[Dict[str, Optional[str]]]] = Field(
        [], title='Nonspecific'
    )


class ReconstructionMorphologyRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    type: Optional[EntityType] = None
    assets: List[AssetRead] = Field(..., title='Assets')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license: Optional[LicenseRead] = None
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    location: Optional[PointLocationBase] = None
    legacy_id: Optional[List[str]] = Field(..., title='Legacy Id')
    species: SpeciesRead
    strain: Optional[StrainRead] = None
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    mtypes: Optional[List[Annotation]] = Field(..., title='Mtypes')


class SingleNeuronSimulationCreate(BaseModel):
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    status: SingleNeuronSimulationStatus
    injection_location: List[str] = Field(..., title='Injection Location')
    recording_location: List[str] = Field(..., title='Recording Location')
    me_model_id: UUID = Field(..., title='Me Model Id')


class SingleNeuronSimulationRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    assets: List[AssetRead] = Field(..., title='Assets')
    type: Optional[EntityType] = None
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    brain_region: BrainRegionRead
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    status: SingleNeuronSimulationStatus
    injection_location: List[str] = Field(..., title='Injection Location')
    recording_location: List[str] = Field(..., title='Recording Location')
    me_model: NestedMEModel


class SingleNeuronSynaptomeRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    assets: List[AssetRead] = Field(..., title='Assets')
    type: Optional[EntityType] = None
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    me_model: NestedMEModel
    brain_region: BrainRegionRead


class SingleNeuronSynaptomeSimulationRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    assets: List[AssetRead] = Field(..., title='Assets')
    type: Optional[EntityType] = None
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    brain_region: BrainRegionRead
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    status: SingleNeuronSimulationStatus
    injection_location: List[str] = Field(..., title='Injection Location')
    recording_location: List[str] = Field(..., title='Recording Location')
    synaptome: NestedSynaptome


class ContributionRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    agent: AgentRead
    role: RoleRead
    entity: EntityRead


class EModelRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    assets: List[AssetRead] = Field(..., title='Assets')
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    iteration: str = Field(..., title='Iteration')
    score: float = Field(..., title='Score')
    seed: int = Field(..., title='Seed')
    id: UUID = Field(..., title='Id')
    species: SpeciesRead
    strain: Optional[StrainRead] = None
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    mtypes: Optional[List[Annotation]] = Field(..., title='Mtypes')
    etypes: Optional[List[Annotation]] = Field(..., title='Etypes')
    exemplar_morphology: ExemplarMorphology


class ElectricalCellRecordingRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    type: Optional[EntityType] = None
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license: Optional[LicenseRead] = None
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ljp: Optional[float] = Field(
        0,
        description='Correction applied to the voltage trace, in mV',
        title='Liquid Junction Potential',
    )
    recording_location: List[str] = Field(
        ...,
        description='Location on the cell where recording was performed, in hoc-compatible format.',
        title='Recording Location',
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title='Recording Type',
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title='Recording Origin',
    )
    comment: Optional[str] = Field(
        None, description='Comment with further details.', title='Comment'
    )
    legacy_id: Optional[List[str]] = Field(None, title='Legacy Id')
    subject: SubjectRead
    brain_region: BrainRegionRead
    assets: Optional[List[AssetRead]] = Field(..., title='Assets')
    stimuli: Optional[List[ElectricalRecordingStimulusRead]] = Field(
        None,
        description='List of stimuli applied to the cell with their respective time steps',
        title='Electrical Recording Stimuli',
    )


class ExperimentalBoutonDensityRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license: Optional[LicenseRead] = None
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    subject: SubjectRead
    measurements: Optional[List[MeasurementRead]] = Field(..., title='Measurements')
    assets: Optional[List[AssetRead]] = Field(..., title='Assets')
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    brain_region: BrainRegionRead
    mtypes: Optional[List[Annotation]] = Field(..., title='Mtypes')


class ExperimentalNeuronDensityRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license: Optional[LicenseRead] = None
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    subject: SubjectRead
    measurements: Optional[List[MeasurementRead]] = Field(..., title='Measurements')
    assets: Optional[List[AssetRead]] = Field(..., title='Assets')
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    brain_region: BrainRegionRead
    mtypes: Optional[List[Annotation]] = Field(..., title='Mtypes')
    etypes: Optional[List[Annotation]] = Field(..., title='Etypes')


class ExperimentalSynapsesPerConnectionRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license: Optional[LicenseRead] = None
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    subject: SubjectRead
    measurements: Optional[List[MeasurementRead]] = Field(..., title='Measurements')
    assets: Optional[List[AssetRead]] = Field(..., title='Assets')
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    brain_region: BrainRegionRead
    pre_mtype: Annotation
    post_mtype: Annotation
    pre_region: BrainRegionRead
    post_region: BrainRegionRead


class IonChannelModelCreate(BaseModel):
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    nmodl_suffix: str = Field(..., title='Nmodl Suffix')
    is_ljp_corrected: Optional[bool] = Field(False, title='Is Ljp Corrected')
    is_temperature_dependent: Optional[bool] = Field(
        False, title='Is Temperature Dependent'
    )
    temperature_celsius: int = Field(..., title='Temperature Celsius')
    is_stochastic: Optional[bool] = Field(False, title='Is Stochastic')
    neuron_block: NeuronBlock
    species_id: UUID = Field(..., title='Species Id')
    strain_id: Optional[UUID] = Field(None, title='Strain Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')


class IonChannelModelExpanded(BaseModel):
    assets: List[AssetRead] = Field(..., title='Assets')
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    nmodl_suffix: str = Field(..., title='Nmodl Suffix')
    is_ljp_corrected: Optional[bool] = Field(False, title='Is Ljp Corrected')
    is_temperature_dependent: Optional[bool] = Field(
        False, title='Is Temperature Dependent'
    )
    temperature_celsius: int = Field(..., title='Temperature Celsius')
    is_stochastic: Optional[bool] = Field(False, title='Is Stochastic')
    neuron_block: NeuronBlock
    species: SpeciesRead
    strain: Optional[StrainRead] = None
    brain_region: BrainRegionRead
    contributions: List[ContributionReadWithoutEntity] = Field(
        ..., title='Contributions'
    )


class IonChannelModelRead(BaseModel):
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    nmodl_suffix: str = Field(..., title='Nmodl Suffix')
    is_ljp_corrected: Optional[bool] = Field(False, title='Is Ljp Corrected')
    is_temperature_dependent: Optional[bool] = Field(
        False, title='Is Temperature Dependent'
    )
    temperature_celsius: int = Field(..., title='Temperature Celsius')
    is_stochastic: Optional[bool] = Field(False, title='Is Stochastic')
    neuron_block: NeuronBlock
    species: SpeciesRead
    strain: Optional[StrainRead] = None
    brain_region: BrainRegionRead


class IonChannelModelWAssets(BaseModel):
    assets: List[AssetRead] = Field(..., title='Assets')
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    nmodl_suffix: str = Field(..., title='Nmodl Suffix')
    is_ljp_corrected: Optional[bool] = Field(False, title='Is Ljp Corrected')
    is_temperature_dependent: Optional[bool] = Field(
        False, title='Is Temperature Dependent'
    )
    temperature_celsius: int = Field(..., title='Temperature Celsius')
    is_stochastic: Optional[bool] = Field(False, title='Is Stochastic')
    neuron_block: NeuronBlock
    species: SpeciesRead
    strain: Optional[StrainRead] = None
    brain_region: BrainRegionRead


class ListResponseContributionRead(BaseModel):
    data: List[ContributionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseElectricalCellRecordingRead(BaseModel):
    data: List[ElectricalCellRecordingRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalBoutonDensityRead(BaseModel):
    data: List[ExperimentalBoutonDensityRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalNeuronDensityRead(BaseModel):
    data: List[ExperimentalNeuronDensityRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseExperimentalSynapsesPerConnectionRead(BaseModel):
    data: List[ExperimentalSynapsesPerConnectionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseIonChannelModelRead(BaseModel):
    data: List[IonChannelModelRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseReconstructionMorphologyRead(BaseModel):
    data: List[ReconstructionMorphologyRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSimulationRead(BaseModel):
    data: List[SingleNeuronSimulationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSynaptomeRead(BaseModel):
    data: List[SingleNeuronSynaptomeRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseSingleNeuronSynaptomeSimulationRead(BaseModel):
    data: List[SingleNeuronSynaptomeSimulationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class MEModelRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    validation_status: Optional[ValidationStatus] = Field(
        default_factory=lambda: ValidationStatus.model_validate('created')
    )
    holding_current: Optional[float] = Field(None, title='Holding Current')
    threshold_current: Optional[float] = Field(None, title='Threshold Current')
    id: UUID = Field(..., title='Id')
    species: SpeciesRead
    strain: Optional[StrainRead] = None
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    mtypes: Optional[List[Annotation]] = Field(..., title='Mtypes')
    etypes: Optional[List[Annotation]] = Field(..., title='Etypes')
    morphology: ReconstructionMorphologyRead
    emodel: EModelRead


class MeasurementAnnotationCreate(BaseModel):
    entity_id: UUID = Field(..., title='Entity Id')
    entity_type: MeasurableEntity
    measurement_kinds: List[MeasurementKindCreate] = Field(
        ..., title='Measurement Kinds'
    )


class MeasurementAnnotationRead(BaseModel):
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    entity_id: UUID = Field(..., title='Entity Id')
    entity_type: MeasurableEntity
    measurement_kinds: List[MeasurementKindRead] = Field(..., title='Measurement Kinds')


class ReconstructionMorphologyAnnotationExpandedRead(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    type: Optional[EntityType] = None
    assets: List[AssetRead] = Field(..., title='Assets')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    license: Optional[LicenseRead] = None
    id: UUID = Field(..., title='Id')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    location: Optional[PointLocationBase] = None
    legacy_id: Optional[List[str]] = Field(..., title='Legacy Id')
    species: SpeciesRead
    strain: Optional[StrainRead] = None
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    mtypes: Optional[List[Annotation]] = Field(..., title='Mtypes')
    measurement_annotation: Optional[MeasurementAnnotationRead] = None


class ReconstructionMorphologyIdGetResponse(
    RootModel[
        Union[
            ReconstructionMorphologyRead, ReconstructionMorphologyAnnotationExpandedRead
        ]
    ]
):
    root: Union[
        ReconstructionMorphologyRead, ReconstructionMorphologyAnnotationExpandedRead
    ] = Field(..., title='Response Read One Reconstruction Morphology  Id   Get')


class EModelReadExpanded(BaseModel):
    created_by: Optional[PersonRead] = None
    updated_by: Optional[PersonRead] = None
    assets: List[AssetRead] = Field(..., title='Assets')
    type: Optional[EntityType] = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: Optional[bool] = Field(False, title='Authorized Public')
    creation_date: datetime = Field(..., title='Creation Date')
    update_date: datetime = Field(..., title='Update Date')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    iteration: str = Field(..., title='Iteration')
    score: float = Field(..., title='Score')
    seed: int = Field(..., title='Seed')
    id: UUID = Field(..., title='Id')
    species: SpeciesRead
    strain: Optional[StrainRead] = None
    brain_region: BrainRegionRead
    contributions: Optional[List[ContributionReadWithoutEntity]] = Field(
        ..., title='Contributions'
    )
    mtypes: Optional[List[Annotation]] = Field(..., title='Mtypes')
    etypes: Optional[List[Annotation]] = Field(..., title='Etypes')
    exemplar_morphology: ExemplarMorphology
    ion_channel_models: List[IonChannelModelWAssets] = Field(
        ..., title='Ion Channel Models'
    )


class ListResponseEModelReadExpanded(BaseModel):
    data: List[EModelReadExpanded] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseMEModelRead(BaseModel):
    data: List[MEModelRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None


class ListResponseMeasurementAnnotationRead(BaseModel):
    data: List[MeasurementAnnotationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Optional[Facets] = None
