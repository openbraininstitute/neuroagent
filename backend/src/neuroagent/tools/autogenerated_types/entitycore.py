# generated by datamodel-codegen:
#   filename:  https://staging.openbraininstitute.org/api/entitycore/openapi.json

from __future__ import annotations

from datetime import timedelta
from pathlib import Path
from typing import Any, Literal
from uuid import UUID

from pydantic import (
    UUID4,
    AnyUrl,
    AwareDatetime,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
)


class ActivityType(
    RootModel[
        Literal[
            'simulation_execution',
            'simulation_generation',
            'validation',
            'calibration',
            'analysis_notebook_execution',
            'ion_channel_modeling_execution',
            'ion_channel_modeling_config_generation',
            'circuit_extraction_config_generation',
            'circuit_extraction_execution',
        ]
    ]
):
    root: Literal[
        'simulation_execution',
        'simulation_generation',
        'validation',
        'calibration',
        'analysis_notebook_execution',
        'ion_channel_modeling_execution',
        'ion_channel_modeling_config_generation',
        'circuit_extraction_config_generation',
        'circuit_extraction_execution',
    ] = Field(..., description='Activity types.', title='ActivityType')


class AgePeriod(RootModel[Literal['prenatal', 'postnatal', 'unknown']]):
    root: Literal['prenatal', 'postnatal', 'unknown'] = Field(..., title='AgePeriod')


class AnalysisNotebookExecutionCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used_ids: list[UUID] = Field(default=[], title='Used Ids')
    generated_ids: list[UUID] = Field(default=[], title='Generated Ids')
    analysis_notebook_template_id: UUID | None = Field(
        default=None, title='Analysis Notebook Template Id'
    )
    analysis_notebook_environment_id: UUID = Field(
        ..., title='Analysis Notebook Environment Id'
    )


class AnalysisNotebookResultCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')


class AnalysisNotebookResultUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')


class CountMax(RootModel[int]):
    root: int = Field(..., ge=0, title='Count Max')


class AnalysisScale(RootModel[Literal['subcellular', 'cellular', 'circuit', 'system']]):
    root: Literal['subcellular', 'cellular', 'circuit', 'system'] = Field(
        ...,
        description='Rough scale that an activity takes place in. Note: Not equal to CircuitScale.',
        title='AnalysisScale',
    )


class AnnotationAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    pref_label: str | None = Field(default='<NOT_SET>', title='Pref Label')
    alt_label: str | None = Field(default='<NOT_SET>', title='Alt Label')
    definition: str | None = Field(default='<NOT_SET>', title='Definition')


class AnnotationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    pref_label: str = Field(..., title='Pref Label')
    alt_label: str = Field(..., title='Alt Label')
    definition: str = Field(..., title='Definition')


class AnnotationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    pref_label: str = Field(..., title='Pref Label')
    alt_label: str = Field(..., title='Alt Label')
    definition: str = Field(..., title='Definition')


class ApiErrorCode(
    RootModel[
        Literal[
            'GENERIC_ERROR',
            'NOT_AUTHENTICATED',
            'NOT_AUTHORIZED',
            'INVALID_REQUEST',
            'ENTITY_NOT_FOUND',
            'ENTITY_FORBIDDEN',
            'ENTITY_DUPLICATED',
            'ASSET_NOT_FOUND',
            'ASSET_DUPLICATED',
            'ASSET_INVALID_FILE',
            'ASSET_MISSING_PATH',
            'ASSET_INVALID_PATH',
            'ASSET_NOT_A_DIRECTORY',
            'ASSET_INVALID_SCHEMA',
            'ASSET_INVALID_CONTENT_TYPE',
            'ION_NAME_NOT_FOUND',
            'S3_CANNOT_CREATE_PRESIGNED_URL',
            'OPENAI_API_KEY_MISSING',
            'OPENAI_API_ERROR',
        ]
    ]
):
    root: Literal[
        'GENERIC_ERROR',
        'NOT_AUTHENTICATED',
        'NOT_AUTHORIZED',
        'INVALID_REQUEST',
        'ENTITY_NOT_FOUND',
        'ENTITY_FORBIDDEN',
        'ENTITY_DUPLICATED',
        'ASSET_NOT_FOUND',
        'ASSET_DUPLICATED',
        'ASSET_INVALID_FILE',
        'ASSET_MISSING_PATH',
        'ASSET_INVALID_PATH',
        'ASSET_NOT_A_DIRECTORY',
        'ASSET_INVALID_SCHEMA',
        'ASSET_INVALID_CONTENT_TYPE',
        'ION_NAME_NOT_FOUND',
        'S3_CANNOT_CREATE_PRESIGNED_URL',
        'OPENAI_API_KEY_MISSING',
        'OPENAI_API_ERROR',
    ] = Field(..., description='API Error codes.', title='ApiErrorCode')


class AssetLabel(
    RootModel[
        Literal[
            'morphology',
            'morphology_with_spines',
            'cell_composition_summary',
            'cell_composition_volumes',
            'single_neuron_synaptome_config',
            'single_neuron_synaptome_simulation_data',
            'single_neuron_simulation_data',
            'sonata_circuit',
            'compressed_sonata_circuit',
            'circuit_figures',
            'circuit_analysis_data',
            'circuit_connectivity_matrices',
            'nwb',
            'neuron_hoc',
            'emodel_optimization_output',
            'sonata_simulation_config',
            'simulation_generation_config',
            'ion_channel_modeling_generation_config',
            'custom_node_sets',
            'campaign_generation_config',
            'campaign_summary',
            'replay_spikes',
            'voltage_report',
            'spike_report',
            'neuron_mechanisms',
            'brain_atlas_annotation',
            'brain_atlas_region_mesh',
            'voxel_densities',
            'validation_result_figure',
            'validation_result_details',
            'simulation_designer_image',
            'circuit_visualization',
            'node_stats',
            'network_stats_a',
            'network_stats_b',
            'cell_surface_mesh',
            'jupyter_notebook',
            'requirements',
            'ion_channel_model_figure',
            'ion_channel_model_figure_summary_json',
            'ion_channel_model_thumbnail',
            'circuit_extraction_config',
        ]
    ]
):
    root: Literal[
        'morphology',
        'morphology_with_spines',
        'cell_composition_summary',
        'cell_composition_volumes',
        'single_neuron_synaptome_config',
        'single_neuron_synaptome_simulation_data',
        'single_neuron_simulation_data',
        'sonata_circuit',
        'compressed_sonata_circuit',
        'circuit_figures',
        'circuit_analysis_data',
        'circuit_connectivity_matrices',
        'nwb',
        'neuron_hoc',
        'emodel_optimization_output',
        'sonata_simulation_config',
        'simulation_generation_config',
        'ion_channel_modeling_generation_config',
        'custom_node_sets',
        'campaign_generation_config',
        'campaign_summary',
        'replay_spikes',
        'voltage_report',
        'spike_report',
        'neuron_mechanisms',
        'brain_atlas_annotation',
        'brain_atlas_region_mesh',
        'voxel_densities',
        'validation_result_figure',
        'validation_result_details',
        'simulation_designer_image',
        'circuit_visualization',
        'node_stats',
        'network_stats_a',
        'network_stats_b',
        'cell_surface_mesh',
        'jupyter_notebook',
        'requirements',
        'ion_channel_model_figure',
        'ion_channel_model_figure_summary_json',
        'ion_channel_model_thumbnail',
        'circuit_extraction_config',
    ] = Field(..., description='See docs/asset-labels.md.', title='AssetLabel')


class AssetStatus(RootModel[Literal['created', 'deleted']]):
    root: Literal['created', 'deleted'] = Field(..., title='AssetStatus')


class Author(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    given_name: str = Field(..., title='Given Name')
    family_name: str = Field(..., title='Family Name')


class BodyUploadEntityAssetEntityRouteEntityIdAssetsPost(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    file: bytes = Field(..., title='File')
    label: AssetLabel
    meta: dict[str, Any] | None = Field(default=None, title='Meta')


class BrainRegionAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    annotation_value: int | str | None = Field(
        default='<NOT_SET>', title='Annotation Value'
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    acronym: str | None = Field(default='<NOT_SET>', title='Acronym')
    color_hex_triplet: str | None = Field(
        default='<NOT_SET>', title='Color Hex Triplet'
    )
    parent_structure_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Parent Structure Id'
    )
    hierarchy_id: UUID | str | None = Field(default='<NOT_SET>', title='Hierarchy Id')


class BrainRegionCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    annotation_value: int = Field(..., title='Annotation Value')
    name: str = Field(..., title='Name')
    acronym: str = Field(..., title='Acronym')
    color_hex_triplet: str = Field(..., title='Color Hex Triplet')
    parent_structure_id: UUID | None = Field(default=None, title='Parent Structure Id')
    hierarchy_id: UUID = Field(..., title='Hierarchy Id')


class BrainRegionHierarchyAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')


class BrainRegionHierarchyCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')


class BrainRegionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    annotation_value: int = Field(..., title='Annotation Value')
    name: str = Field(..., title='Name')
    acronym: str = Field(..., title='Acronym')
    color_hex_triplet: str = Field(..., title='Color Hex Triplet')
    parent_structure_id: UUID | None = Field(default=None, title='Parent Structure Id')
    hierarchy_id: UUID = Field(..., title='Hierarchy Id')


class CalibrationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used_ids: list[UUID] = Field(default=[], title='Used Ids')
    generated_ids: list[UUID] = Field(default=[], title='Generated Ids')


class CellMorphologyGenerationType(
    RootModel[
        Literal[
            'digital_reconstruction',
            'modified_reconstruction',
            'computationally_synthesized',
            'placeholder',
        ]
    ]
):
    root: Literal[
        'digital_reconstruction',
        'modified_reconstruction',
        'computationally_synthesized',
        'placeholder',
    ] = Field(..., title='CellMorphologyGenerationType')


class CellMorphologyProtocolDesign(
    RootModel[Literal['electron_microscopy', 'cell_patch', 'fluorophore']]
):
    root: Literal['electron_microscopy', 'cell_patch', 'fluorophore'] = Field(
        ..., title='CellMorphologyProtocolDesign'
    )


class CircuitBuildCategory(
    RootModel[Literal['computational_model', 'em_reconstruction']]
):
    root: Literal['computational_model', 'em_reconstruction'] = Field(
        ...,
        description='Information about how/from what source a circuit was built.\n\n- computational_model: Any type of data-driven or statistical model\n- em_reconstruction: Reconstruction from EM\n(More categories may be added later, if needed).',
        title='CircuitBuildCategory',
    )


class CircuitExtractionCampaignCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


class CircuitExtractionCampaignUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    scan_parameters: dict[str, Any] | str | None = Field(
        default='<NOT_SET>', title='Scan Parameters'
    )


class CircuitExtractionConfigCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    circuit_id: UUID = Field(..., title='Circuit Id')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


CircuitExtractionConfigGenerationCreate = CalibrationCreate


class CircuitExtractionConfigUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    circuit_id: UUID | str | None = Field(default='<NOT_SET>', title='Circuit Id')
    scan_parameters: dict[str, Any] | str | None = Field(
        default='<NOT_SET>', title='Scan Parameters'
    )


class CircuitExtractionExecutionStatus(
    RootModel[Literal['created', 'pending', 'running', 'done', 'error']]
):
    root: Literal['created', 'pending', 'running', 'done', 'error'] = Field(
        ..., title='CircuitExtractionExecutionStatus'
    )


class CircuitScale(
    RootModel[
        Literal[
            'single', 'pair', 'small', 'microcircuit', 'region', 'system', 'whole_brain'
        ]
    ]
):
    root: Literal[
        'single', 'pair', 'small', 'microcircuit', 'region', 'system', 'whole_brain'
    ] = Field(
        ...,
        description='Scale of the circuit.\n\n- single: Single neuron + extrinsic connectivity\n- pair: Two connected neurons + intrinsic connectivity + extrinsic connectivity\n- small: Small microcircuit (3-20 neurons) + intrinsic connectivity + extrinsic connectivity;\n  usually containing specific connectivity motifs\n- microcircuit: Any circuit larger than 20 neurons but not being a region, system, or\n  whole-brain circuit; may be atlas-based or not\n- region: Atlas-based continuous volume of an entire brain region or a set of continuous\n  sub-regions\n- system: Non-continuous circuit consisting of at least two microcircuits/regions that are\n  connected by inter-region connectivity\n- whole_brain: Circuit representing an entire brain.',
        title='CircuitScale',
    )


class CircuitUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    license_id: UUID | str | None = Field(default='<NOT_SET>', title='License Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    subject_id: UUID | str | None = Field(default='<NOT_SET>', title='Subject Id')
    experiment_date: AwareDatetime | str | None = Field(
        default='<NOT_SET>', title='Experiment Date'
    )
    contact_email: str | None = Field(default='<NOT_SET>', title='Contact Email')
    published_in: str | None = Field(default='<NOT_SET>', title='Published In')
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    has_morphologies: bool | str | None = Field(
        default='<NOT_SET>', title='Has Morphologies'
    )
    has_point_neurons: bool | str | None = Field(
        default='<NOT_SET>', title='Has Point Neurons'
    )
    has_electrical_cell_models: bool | str | None = Field(
        default='<NOT_SET>', title='Has Electrical Cell Models'
    )
    has_spines: bool | str | None = Field(default='<NOT_SET>', title='Has Spines')
    number_neurons: int | str | None = Field(
        default='<NOT_SET>', title='Number Neurons'
    )
    number_synapses: int | str | None = Field(
        default='<NOT_SET>', title='Number Synapses'
    )
    number_connections: int | str | None = Field(
        default='<NOT_SET>', title='Number Connections'
    )
    scale: CircuitScale | str | None = Field(default='<NOT_SET>', title='Scale')
    build_category: CircuitBuildCategory | str | None = Field(
        default='<NOT_SET>', title='Build Category'
    )
    root_circuit_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Root Circuit Id'
    )
    atlas_id: UUID | str | None = Field(default='<NOT_SET>', title='Atlas Id')


class ProtocolDocument(RootModel[AnyUrl]):
    root: AnyUrl = Field(..., title='Protocol Document')


class ComputationallySynthesizedCellMorphologyProtocolCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['computationally_synthesized'] = Field(
        ..., title='Generation Type'
    )
    method_type: str = Field(..., title='Method Type')


class ConsortiumCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    pref_label: str = Field(..., title='Pref Label')
    alternative_name: str | None = Field(default=None, title='Alternative Name')
    legacy_id: str | None = Field(default=None, title='Legacy Id')


class ContentType(
    RootModel[
        Literal[
            'application/json',
            'application/swc',
            'application/nrrd',
            'application/obj',
            'application/hoc',
            'application/asc',
            'application/abf',
            'application/nwb',
            'application/x-hdf5',
            'text/plain',
            'application/vnd.directory',
            'application/mod',
            'application/pdf',
            'image/png',
            'image/jpeg',
            'model/gltf-binary',
            'application/gzip',
            'image/webp',
            'application/x-ipynb+json',
        ]
    ]
):
    root: Literal[
        'application/json',
        'application/swc',
        'application/nrrd',
        'application/obj',
        'application/hoc',
        'application/asc',
        'application/abf',
        'application/nwb',
        'application/x-hdf5',
        'text/plain',
        'application/vnd.directory',
        'application/mod',
        'application/pdf',
        'image/png',
        'image/jpeg',
        'model/gltf-binary',
        'application/gzip',
        'image/webp',
        'application/x-ipynb+json',
    ] = Field(..., title='ContentType')


class ContributionCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    agent_id: UUID = Field(..., title='Agent Id')
    role_id: UUID = Field(..., title='Role Id')
    entity_id: UUID = Field(..., title='Entity Id')


class DeleteResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')


class DerivationType(
    RootModel[Literal['circuit_extraction', 'circuit_rewiring', 'unspecified']]
):
    root: Literal['circuit_extraction', 'circuit_rewiring', 'unspecified'] = Field(
        ...,
        description='Represents the type of derivation relationship between two entities.\n\nAttributes:\n    circuit_extraction: Indicates that the entity was derived by extracting a set of nodes from\n     a circuit.\n    circuit_rewiring: Indicates that the entity was derived by rewiring the connectivity of\n      a circuit.\n    unspecified: Indicates a derivation that does not require a specific type.',
        title='DerivationType',
    )


class DetailedFile(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')
    size: int = Field(..., title='Size')
    last_modified: AwareDatetime = Field(..., title='Last Modified')


class DetailedFileList(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    files: dict[str, DetailedFile] = Field(..., title='Files')


class Magnification(RootModel[float]):
    root: float = Field(..., ge=0.0, title='Magnification')


class TissueShrinkage(RootModel[float]):
    root: float = Field(..., ge=0.0, title='Tissue Shrinkage')


class DirectoryUpload(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    directory_name: Path = Field(..., title='Directory Name')
    files: list[Path] = Field(..., title='Files')
    meta: dict[str, Any] | None = Field(..., title='Meta')
    label: AssetLabel


class DockerDependency(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    image_repository: str = Field(
        ...,
        examples=['openbraininstitute/obi-notebook-image'],
        title='Image Repository',
    )
    image_tag: str | None = Field(
        default=None, examples=['>=2025.09.24-2'], title='Image Tag'
    )
    image_digest: str | None = Field(
        default=None,
        description='SHA256 digest',
        examples=['3406990b6e4c7192317b6fdc5680498744f6142f01f0287f4ee0420d8c74063c'],
        title='Image Digest',
    )
    docker_version: str | None = Field(
        default=None, examples=['>=20.10,<29.0'], title='Docker Version'
    )


class DockerRuntimeInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    image_repository: str = Field(
        ...,
        examples=['openbraininstitute/obi-notebook-image'],
        title='Image Repository',
    )
    image_tag: str = Field(..., examples=['2025.09.24-2'], title='Image Tag')
    image_digest: str | None = Field(
        default=None,
        description='SHA256 digest',
        examples=['3406990b6e4c7192317b6fdc5680498744f6142f01f0287f4ee0420d8c74063c'],
        title='Image Digest',
    )
    docker_version: str | None = Field(
        default=None, examples=['28.4.0'], title='Docker Version'
    )


class EMCellMeshGenerationMethod(RootModel[Literal['marching_cubes']]):
    root: Literal['marching_cubes'] = Field(
        ...,
        description='The algorithm generating the mesh from a volume.\n\nmarching_cubes: The marching cubes algorithm.',
        title='EMCellMeshGenerationMethod',
    )


class EMCellMeshType(RootModel[Literal['static', 'dynamic']]):
    root: Literal['static', 'dynamic'] = Field(
        ...,
        description='How an EM cell mesh was created.\n\nstatic: The mesh was precomputed at a given level of detail.\ndynamic: The mesh was dynamically generated at query time.',
        title='EMCellMeshType',
    )


class EMCellMeshUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    license_id: UUID | str | None = Field(default='<NOT_SET>', title='License Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    subject_id: UUID | str | None = Field(default='<NOT_SET>', title='Subject Id')
    experiment_date: AwareDatetime | str | None = Field(
        default='<NOT_SET>', title='Experiment Date'
    )
    contact_email: str | None = Field(default='<NOT_SET>', title='Contact Email')
    published_in: str | None = Field(default='<NOT_SET>', title='Published In')
    release_version: int | str | None = Field(
        default='<NOT_SET>', title='Release Version'
    )
    dense_reconstruction_cell_id: int | str | None = Field(
        default='<NOT_SET>', title='Dense Reconstruction Cell Id'
    )
    generation_method: EMCellMeshGenerationMethod | str | None = Field(
        default='<NOT_SET>', title='Generation Method'
    )
    level_of_detail: int | str | None = Field(
        default='<NOT_SET>', title='Level Of Detail'
    )
    generation_parameters: dict[str, Any] | str | None = Field(
        default='<NOT_SET>', title='Generation Parameters'
    )
    mesh_type: EMCellMeshType | str | None = Field(
        default='<NOT_SET>', title='Mesh Type'
    )
    em_dense_reconstruction_dataset_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Em Dense Reconstruction Dataset Id'
    )


class EModelCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    iteration: str = Field(..., title='Iteration')
    score: float = Field(..., title='Score')
    seed: int = Field(..., title='Seed')
    species_id: UUID = Field(..., title='Species Id')
    strain_id: UUID | None = Field(default=None, title='Strain Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    exemplar_morphology_id: UUID = Field(..., title='Exemplar Morphology Id')


class EModelUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    description: str | None = Field(default='<NOT_SET>', title='Description')
    name: str | None = Field(default='<NOT_SET>', title='Name')
    iteration: str | None = Field(default='<NOT_SET>', title='Iteration')
    score: float | str | None = Field(default='<NOT_SET>', title='Score')
    seed: int | str | None = Field(default='<NOT_SET>', title='Seed')
    species_id: UUID | str | None = Field(default='<NOT_SET>', title='Species Id')
    strain_id: UUID | str | None = Field(default='<NOT_SET>', title='Strain Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    exemplar_morphology_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Exemplar Morphology Id'
    )


class ETypeClassificationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    entity_id: UUID = Field(..., title='Entity Id')
    etype_class_id: UUID = Field(..., title='Etype Class Id')


class ElectricalRecordingOrigin(
    RootModel[Literal['in_vivo', 'in_vitro', 'in_silico', 'unknown']]
):
    root: Literal['in_vivo', 'in_vitro', 'in_silico', 'unknown'] = Field(
        ..., title='ElectricalRecordingOrigin'
    )


class ElectricalRecordingStimulusShape(
    RootModel[
        Literal[
            'cheops',
            'constant',
            'pulse',
            'step',
            'ramp',
            'noise',
            'sinusoidal',
            'other',
            'two_steps',
            'unknown',
        ]
    ]
):
    root: Literal[
        'cheops',
        'constant',
        'pulse',
        'step',
        'ramp',
        'noise',
        'sinusoidal',
        'other',
        'two_steps',
        'unknown',
    ] = Field(..., title='ElectricalRecordingStimulusShape')


class ElectricalRecordingStimulusType(
    RootModel[
        Literal[
            'voltage_clamp',
            'current_clamp',
            'conductance_clamp',
            'extracellular',
            'other',
            'unknown',
        ]
    ]
):
    root: Literal[
        'voltage_clamp',
        'current_clamp',
        'conductance_clamp',
        'extracellular',
        'other',
        'unknown',
    ] = Field(..., title='ElectricalRecordingStimulusType')


class ElectricalRecordingStimulusUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    dt: float | str | None = Field(default='<NOT_SET>', title='Dt')
    injection_type: ElectricalRecordingStimulusType | str | None = Field(
        default='<NOT_SET>', title='Injection Type'
    )
    shape: ElectricalRecordingStimulusShape | str | None = Field(
        default='<NOT_SET>', title='Shape'
    )
    start_time: float | str | None = Field(default='<NOT_SET>', title='Start Time')
    end_time: float | str | None = Field(default='<NOT_SET>', title='End Time')
    recording_id: UUID | str | None = Field(default='<NOT_SET>', title='Recording Id')


class ElectricalRecordingType(
    RootModel[Literal['intracellular', 'extracellular', 'both', 'unknown']]
):
    root: Literal['intracellular', 'extracellular', 'both', 'unknown'] = Field(
        ..., title='ElectricalRecordingType'
    )


class EntityCountRead(RootModel[dict[str, int]]):
    root: dict[str, int]


class EntityRoute(
    RootModel[
        Literal[
            'analysis-software-source-code',
            'brain-atlas',
            'brain-atlas-region',
            'cell-composition',
            'cell-morphology',
            'cell-morphology-protocol',
            'electrical-cell-recording',
            'electrical-recording',
            'electrical-recording-stimulus',
            'emodel',
            'experimental-bouton-density',
            'experimental-neuron-density',
            'experimental-synapses-per-connection',
            'external-url',
            'ion-channel-model',
            'ion-channel-modeling-campaign',
            'ion-channel-modeling-config',
            'ion-channel-recording',
            'memodel',
            'memodel-calibration-result',
            'me-type-density',
            'simulation',
            'simulation-campaign',
            'simulation-result',
            'scientific-artifact',
            'single-neuron-simulation',
            'single-neuron-synaptome',
            'single-neuron-synaptome-simulation',
            'subject',
            'validation-result',
            'circuit',
            'circuit-extraction-campaign',
            'circuit-extraction-config',
            'em-dense-reconstruction-dataset',
            'em-cell-mesh',
            'analysis-notebook-template',
            'analysis-notebook-environment',
            'analysis-notebook-result',
        ]
    ]
):
    root: Literal[
        'analysis-software-source-code',
        'brain-atlas',
        'brain-atlas-region',
        'cell-composition',
        'cell-morphology',
        'cell-morphology-protocol',
        'electrical-cell-recording',
        'electrical-recording',
        'electrical-recording-stimulus',
        'emodel',
        'experimental-bouton-density',
        'experimental-neuron-density',
        'experimental-synapses-per-connection',
        'external-url',
        'ion-channel-model',
        'ion-channel-modeling-campaign',
        'ion-channel-modeling-config',
        'ion-channel-recording',
        'memodel',
        'memodel-calibration-result',
        'me-type-density',
        'simulation',
        'simulation-campaign',
        'simulation-result',
        'scientific-artifact',
        'single-neuron-simulation',
        'single-neuron-synaptome',
        'single-neuron-synaptome-simulation',
        'subject',
        'validation-result',
        'circuit',
        'circuit-extraction-campaign',
        'circuit-extraction-config',
        'em-dense-reconstruction-dataset',
        'em-cell-mesh',
        'analysis-notebook-template',
        'analysis-notebook-environment',
        'analysis-notebook-result',
    ] = Field(..., title='EntityRoute')


class EntityType(
    RootModel[
        Literal[
            'analysis_software_source_code',
            'brain_atlas',
            'brain_atlas_region',
            'cell_composition',
            'cell_morphology',
            'cell_morphology_protocol',
            'electrical_cell_recording',
            'electrical_recording',
            'electrical_recording_stimulus',
            'emodel',
            'experimental_bouton_density',
            'experimental_neuron_density',
            'experimental_synapses_per_connection',
            'external_url',
            'ion_channel_model',
            'ion_channel_modeling_campaign',
            'ion_channel_modeling_config',
            'ion_channel_recording',
            'memodel',
            'memodel_calibration_result',
            'me_type_density',
            'simulation',
            'simulation_campaign',
            'simulation_result',
            'scientific_artifact',
            'single_neuron_simulation',
            'single_neuron_synaptome',
            'single_neuron_synaptome_simulation',
            'subject',
            'validation_result',
            'circuit',
            'circuit_extraction_campaign',
            'circuit_extraction_config',
            'em_dense_reconstruction_dataset',
            'em_cell_mesh',
            'analysis_notebook_template',
            'analysis_notebook_environment',
            'analysis_notebook_result',
        ]
    ]
):
    root: Literal[
        'analysis_software_source_code',
        'brain_atlas',
        'brain_atlas_region',
        'cell_composition',
        'cell_morphology',
        'cell_morphology_protocol',
        'electrical_cell_recording',
        'electrical_recording',
        'electrical_recording_stimulus',
        'emodel',
        'experimental_bouton_density',
        'experimental_neuron_density',
        'experimental_synapses_per_connection',
        'external_url',
        'ion_channel_model',
        'ion_channel_modeling_campaign',
        'ion_channel_modeling_config',
        'ion_channel_recording',
        'memodel',
        'memodel_calibration_result',
        'me_type_density',
        'simulation',
        'simulation_campaign',
        'simulation_result',
        'scientific_artifact',
        'single_neuron_simulation',
        'single_neuron_synaptome',
        'single_neuron_synaptome_simulation',
        'subject',
        'validation_result',
        'circuit',
        'circuit_extraction_campaign',
        'circuit_extraction_config',
        'em_dense_reconstruction_dataset',
        'em_cell_mesh',
        'analysis_notebook_template',
        'analysis_notebook_environment',
        'analysis_notebook_result',
    ] = Field(..., description='Entity types.', title='EntityType')


class EntityTypeWithBrainRegion(
    RootModel[
        Literal[
            'brain_atlas_region',
            'cell_composition',
            'cell_morphology',
            'circuit',
            'electrical_cell_recording',
            'electrical_recording',
            'em_cell_mesh',
            'em_dense_reconstruction_dataset',
            'emodel',
            'experimental_bouton_density',
            'experimental_neuron_density',
            'experimental_synapses_per_connection',
            'ion_channel_model',
            'ion_channel_recording',
            'me_type_density',
            'memodel',
            'scientific_artifact',
            'single_neuron_simulation',
            'single_neuron_synaptome',
            'single_neuron_synaptome_simulation',
        ]
    ]
):
    root: Literal[
        'brain_atlas_region',
        'cell_composition',
        'cell_morphology',
        'circuit',
        'electrical_cell_recording',
        'electrical_recording',
        'em_cell_mesh',
        'em_dense_reconstruction_dataset',
        'emodel',
        'experimental_bouton_density',
        'experimental_neuron_density',
        'experimental_synapses_per_connection',
        'ion_channel_model',
        'ion_channel_recording',
        'me_type_density',
        'memodel',
        'scientific_artifact',
        'single_neuron_simulation',
        'single_neuron_synaptome',
        'single_neuron_synaptome_simulation',
    ] = Field(..., title='EntityTypeWithBrainRegion')


class ErrorResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    error_code: ApiErrorCode
    message: str = Field(..., title='Message')
    details: Any | None = Field(default=None, title='Details')


class ExternalSource(RootModel[Literal['channelpedia', 'modeldb', 'icgenealogy']]):
    root: Literal['channelpedia', 'modeldb', 'icgenealogy'] = Field(
        ...,
        description='External sources that can be used for external urls.',
        title='ExternalSource',
    )


class ExternalUrlCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    source: ExternalSource
    url: AnyUrl = Field(..., title='Url')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')


class Facet(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID | int = Field(..., title='Id')
    label: str = Field(..., title='Label')
    count: int = Field(..., title='Count')
    type: str | None = Field(..., title='Type')


class Facets(RootModel[dict[str, list[Facet]]]):
    root: dict[str, list[Facet]]


class HierarchyNode(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    parent_id: UUID | None = Field(..., title='Parent Id')
    children: list[HierarchyNode] = Field(default=[], title='Children')
    authorized_public: bool = Field(..., title='Authorized Public')
    authorized_project_id: UUID = Field(..., title='Authorized Project Id')


class HierarchyTree(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    derivation_type: DerivationType
    data: list[HierarchyNode] = Field(..., title='Data')


class IonChannelAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    label: str | None = Field(default='<NOT_SET>', title='Label')
    gene: str | None = Field(default='<NOT_SET>', title='Gene')
    synonyms: list[str] | str | None = Field(default='<NOT_SET>', title='Synonyms')


class IonChannelCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    label: str = Field(..., title='Label')
    gene: str = Field(..., title='Gene')
    synonyms: list[str] = Field(..., title='Synonyms')


IonChannelModelingCampaignCreate = CircuitExtractionCampaignCreate


IonChannelModelingCampaignUserUpdate = CircuitExtractionCampaignUserUpdate


class IonChannelModelingConfigCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ion_channel_modeling_campaign_id: UUID = Field(
        ..., title='Ion Channel Modeling Campaign Id'
    )
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


IonChannelModelingConfigGenerationCreate = CalibrationCreate


class IonChannelModelingConfigUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    ion_channel_modeling_campaign_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Ion Channel Modeling Campaign Id'
    )
    scan_parameters: dict[str, Any] | str | None = Field(
        default='<NOT_SET>', title='Scan Parameters'
    )


class IonChannelModelingExecutionStatus(
    RootModel[Literal['created', 'pending', 'running', 'done', 'error']]
):
    root: Literal['created', 'pending', 'running', 'done', 'error'] = Field(
        ..., title='IonChannelModelingExecutionStatus'
    )


class IonChannelRecordingCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    subject_id: UUID = Field(..., title='Subject Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ljp: float = Field(
        default=0.0,
        description='Correction applied to the voltage trace, in mV',
        title='Liquid Junction Potential',
    )
    recording_location: list[str] = Field(
        ...,
        description='Location on the cell where recording was performed, in hoc-compatible format.',
        title='Recording Location',
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title='Recording Type',
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title='Recording Origin',
    )
    temperature: float | None = Field(
        default=None,
        description='Temperature at which the recording was performed, in degrees Celsius.',
        title='Temperature',
    )
    comment: str | None = Field(
        default=None, description='Comment with further details.', title='Comment'
    )
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')
    cell_line: str = Field(
        ...,
        description='The cell line from which the ion channel was recorded',
        title='Cell Line',
    )
    ion_channel_id: UUID = Field(
        ...,
        description='The id of the ion channel that was recorded from',
        title='Ion Channel ID',
    )


class IonChannelRecordingUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    license_id: UUID | str | None = Field(default='<NOT_SET>', title='License Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    subject_id: UUID | str | None = Field(default='<NOT_SET>', title='Subject Id')
    experiment_date: AwareDatetime | str | None = Field(
        default='<NOT_SET>', title='Experiment Date'
    )
    contact_email: str | None = Field(default='<NOT_SET>', title='Contact Email')
    published_in: str | None = Field(default='<NOT_SET>', title='Published In')
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    ljp: float | str | None = Field(default='<NOT_SET>', title='Ljp')
    recording_location: list[str] | str | None = Field(
        default='<NOT_SET>', title='Recording Location'
    )
    recording_type: ElectricalRecordingType | str | None = Field(
        default='<NOT_SET>', title='Recording Type'
    )
    recording_origin: ElectricalRecordingOrigin | str | None = Field(
        default='<NOT_SET>', title='Recording Origin'
    )
    temperature: float | str | None = Field(default='<NOT_SET>', title='Temperature')
    comment: str | None = Field(default='<NOT_SET>', title='Comment')
    legacy_id: list[str] | str | None = Field(default='<NOT_SET>', title='Legacy Id')
    cell_line: str | None = Field(default='<NOT_SET>', title='Cell Line')
    ion_channel_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Ion Channel Id'
    )


class LicenseAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    label: str | None = Field(default='<NOT_SET>', title='Label')


class LicenseCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    label: str = Field(..., title='Label')


class LicenseRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    label: str = Field(..., title='Label')


class MEModelCalibrationResultCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    holding_current: float = Field(..., title='Holding Current')
    threshold_current: float = Field(..., title='Threshold Current')
    rin: float | None = Field(default=None, title='Rin')
    calibrated_entity_id: UUID = Field(..., title='Calibrated Entity Id')


class MEModelCalibrationResultUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    holding_current: float | str | None = Field(
        default='<NOT_SET>', title='Holding Current'
    )
    threshold_current: float | str | None = Field(
        default='<NOT_SET>', title='Threshold Current'
    )
    rin: float | str | None = Field(default='<NOT_SET>', title='Rin')
    calibrated_entity_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Calibrated Entity Id'
    )


class MTypeClassificationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    entity_id: UUID = Field(..., title='Entity Id')
    mtype_class_id: UUID = Field(..., title='Mtype Class Id')


class MeasurableEntity(RootModel[Literal['cell_morphology']]):
    root: Literal['cell_morphology'] = Field(..., title='MeasurableEntity')


class MeasurementStatistic(
    RootModel[
        Literal[
            'mean',
            'median',
            'mode',
            'variance',
            'data_point',
            'sample_size',
            'standard_error',
            'standard_deviation',
            'raw',
            'minimum',
            'maximum',
            'sum',
        ]
    ]
):
    root: Literal[
        'mean',
        'median',
        'mode',
        'variance',
        'data_point',
        'sample_size',
        'standard_error',
        'standard_deviation',
        'raw',
        'minimum',
        'maximum',
        'sum',
    ] = Field(..., title='MeasurementStatistic')


class MeasurementUnit(
    RootModel[Literal['dimensionless', '1/μm', '1/mm³', 'μm', 'μm²', 'μm³', 'radian']]
):
    root: Literal['dimensionless', '1/μm', '1/mm³', 'μm', 'μm²', 'μm³', 'radian'] = (
        Field(..., title='MeasurementUnit')
    )


class ModifiedMorphologyMethodType(
    RootModel[Literal['cloned', 'mix_and_match', 'mousified', 'ratified']]
):
    root: Literal['cloned', 'mix_and_match', 'mousified', 'ratified'] = Field(
        ..., title='ModifiedMorphologyMethodType'
    )


class ModifiedReconstructionCellMorphologyProtocolCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['modified_reconstruction'] = Field(
        ..., title='Generation Type'
    )
    method_type: ModifiedMorphologyMethodType


class NestedComputationallySynthesizedCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    id: UUID = Field(..., title='Id')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['computationally_synthesized'] = Field(
        ..., title='Generation Type'
    )
    method_type: str = Field(..., title='Method Type')


class NestedConsortiumRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    pref_label: str = Field(..., title='Pref Label')
    alternative_name: str | None = Field(default=None, title='Alternative Name')
    type: str = Field(..., title='Type')


class NestedElectricalRecordingStimulusRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    dt: float | None = Field(default=None, title='Dt')
    injection_type: ElectricalRecordingStimulusType
    shape: ElectricalRecordingStimulusShape
    start_time: float | None = Field(default=None, title='Start Time')
    end_time: float | None = Field(default=None, title='End Time')
    recording_id: UUID = Field(..., title='Recording Id')


class NestedEntityRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    type: str = Field(..., title='Type')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(..., title='Authorized Public')


class NestedExternalUrlRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    source: ExternalSource
    url: AnyUrl = Field(..., title='Url')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    source_name: str = Field(..., title='Source Name')


class NestedIonChannelModelingConfigRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ion_channel_modeling_campaign_id: UUID = Field(
        ..., title='Ion Channel Modeling Campaign Id'
    )
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


class NestedIonChannelRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    label: str = Field(..., title='Label')
    gene: str = Field(..., title='Gene')
    synonyms: list[str] = Field(..., title='Synonyms')


class NestedIonChannelRecordingRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ljp: float = Field(
        default=0.0,
        description='Correction applied to the voltage trace, in mV',
        title='Liquid Junction Potential',
    )
    recording_location: list[str] = Field(
        ...,
        description='Location on the cell where recording was performed, in hoc-compatible format.',
        title='Recording Location',
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title='Recording Type',
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title='Recording Origin',
    )
    temperature: float | None = Field(
        default=None,
        description='Temperature at which the recording was performed, in degrees Celsius.',
        title='Temperature',
    )
    comment: str | None = Field(
        default=None, description='Comment with further details.', title='Comment'
    )
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')
    cell_line: str = Field(
        ...,
        description='The cell line from which the ion channel was recorded',
        title='Cell Line',
    )


class NestedModifiedReconstructionCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    id: UUID = Field(..., title='Id')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['modified_reconstruction'] = Field(
        ..., title='Generation Type'
    )
    method_type: ModifiedMorphologyMethodType


NestedOrganizationRead = NestedConsortiumRead


class NestedPersonRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    given_name: str | None = Field(default=None, title='Given Name')
    family_name: str | None = Field(default=None, title='Family Name')
    pref_label: str = Field(..., title='Pref Label')
    type: str = Field(..., title='Type')
    sub_id: UUID | None = Field(..., title='Sub Id')


class NestedPlaceholderCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['placeholder'] = Field(..., title='Generation Type')


class NestedPublicationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    DOI: str = Field(..., title='Doi')
    title: str | None = Field(default=None, title='Title')
    authors: list[Author] | None = Field(default=None, title='Authors')
    publication_year: int | None = Field(default=None, title='Publication Year')
    abstract: str | None = Field(default=None, title='Abstract')


class NestedScientificArtifactRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')


class NestedSimulationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    simulation_campaign_id: UUID = Field(..., title='Simulation Campaign Id')
    entity_id: UUID = Field(..., title='Entity Id')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


class NestedSpeciesRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')


class NestedStrainRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')
    species_id: UUID = Field(..., title='Species Id')


class Weight(RootModel[float]):
    root: float = Field(..., description='Weight in grams', gt=0.0, title='Weight')


class NestedSynaptome(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')


class NotSet(RootModel[Literal['<NOT_SET>']]):
    root: Literal['<NOT_SET>']


OrganizationCreate = ConsortiumCreate


class OrganizationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    pref_label: str = Field(..., title='Pref Label')
    alternative_name: str | None = Field(default=None, title='Alternative Name')
    type: str = Field(..., title='Type')


class OsRuntimeInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    system: str = Field(
        ...,
        description='Output of `platform.system()`',
        examples=['Linux'],
        title='System',
    )
    release: str = Field(
        ...,
        description='Output of `platform.release()`',
        examples=['5.14.0-427.28.1.el9_4.x86_64'],
        title='Release',
    )
    version: str = Field(
        ...,
        description='Output of `platform.version()`',
        examples=['#1 SMP PREEMPT_DYNAMIC Fri Aug 2 03:44:10 EDT 2024'],
        title='Version',
    )
    machine: str = Field(
        ...,
        description='Output of `platform.machine()`',
        examples=['x86_64'],
        title='Machine',
    )
    processor: str = Field(
        ...,
        description='Output of `platform.processor()`',
        examples=['x86_64'],
        title='Processor',
    )


class PaginationResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    page: int = Field(..., title='Page')
    page_size: int = Field(..., title='Page Size')
    total_items: int = Field(..., title='Total Items')


class PersonCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    given_name: str | None = Field(default=None, title='Given Name')
    family_name: str | None = Field(default=None, title='Family Name')
    pref_label: str = Field(..., title='Pref Label')
    legacy_id: str | None = Field(default=None, title='Legacy Id')


class PersonRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    given_name: str | None = Field(default=None, title='Given Name')
    family_name: str | None = Field(default=None, title='Family Name')
    pref_label: str = Field(..., title='Pref Label')
    type: str = Field(..., title='Type')
    sub_id: UUID | None = Field(..., title='Sub Id')


class PlaceholderCellMorphologyProtocolCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['placeholder'] = Field(..., title='Generation Type')


class PlaceholderCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['placeholder'] = Field(..., title='Generation Type')


class PointLocationBase(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    x: float = Field(..., title='X')
    y: float = Field(..., title='Y')
    z: float = Field(..., title='Z')


class PublicationAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    DOI: str | None = Field(default='<NOT_SET>', title='Doi')
    title: str | None = Field(default='<NOT_SET>', title='Title')
    authors: list[Author] | str | None = Field(default='<NOT_SET>', title='Authors')
    publication_year: int | str | None = Field(
        default='<NOT_SET>', title='Publication Year'
    )
    abstract: str | None = Field(default='<NOT_SET>', title='Abstract')


class PublicationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    DOI: str = Field(..., title='Doi')
    title: str | None = Field(default=None, title='Title')
    authors: list[Author] | None = Field(default=None, title='Authors')
    publication_year: int | None = Field(default=None, title='Publication Year')
    abstract: str | None = Field(default=None, title='Abstract')


class PublicationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    DOI: str = Field(..., title='Doi')
    title: str | None = Field(default=None, title='Title')
    authors: list[Author] | None = Field(default=None, title='Authors')
    publication_year: int | None = Field(default=None, title='Publication Year')
    abstract: str | None = Field(default=None, title='Abstract')


class PublicationType(
    RootModel[Literal['entity_source', 'component_source', 'application']]
):
    root: Literal['entity_source', 'component_source', 'application'] = Field(
        ...,
        description='The type of of the relation between publication and a scientific artifact.\n\nentity_source: The artefact is published with this publication.\ncomponent_source: The publication is used to generate the artifact.\napplication: The publication uses the artifact.',
        title='PublicationType',
    )


class PythonDependency(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    version: str = Field(..., examples=['>=3.10,<3.12'], title='Version')


class PythonRuntimeInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    version: str = Field(
        ...,
        description='Output of `platform.python_version()`',
        examples=['3.9.21'],
        title='Version',
    )
    implementation: str = Field(
        ...,
        description='Output of `platform.python_implementation()`',
        examples=['CPython'],
        title='Implementation',
    )
    executable: str = Field(
        ...,
        description='Output of `sys.executable`',
        examples=['/usr/bin/python'],
        title='Executable',
    )


class RoleAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    role_id: str | None = Field(default='<NOT_SET>', title='Role Id')


class RoleCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')
    role_id: str = Field(..., title='Role Id')


class RoleRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    role_id: str = Field(..., title='Role Id')


class RuntimeInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    schema_version: int = Field(default=1, title='Schema Version')
    python: PythonRuntimeInfo
    docker: DockerRuntimeInfo | None = None
    os: OsRuntimeInfo | None = None


class ScientificArtifactExternalUrlLinkCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    external_url_id: UUID = Field(..., title='External Url Id')
    scientific_artifact_id: UUID = Field(..., title='Scientific Artifact Id')


class ScientificArtifactExternalUrlLinkRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    external_url: NestedExternalUrlRead
    scientific_artifact: NestedScientificArtifactRead


class ScientificArtifactPublicationLinkCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    publication_type: PublicationType
    publication_id: UUID = Field(..., title='Publication Id')
    scientific_artifact_id: UUID = Field(..., title='Scientific Artifact Id')


class ScientificArtifactPublicationLinkRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    publication_type: PublicationType
    publication: NestedPublicationRead
    scientific_artifact: NestedScientificArtifactRead


class Sex(RootModel[Literal['male', 'female', 'unknown']]):
    root: Literal['male', 'female', 'unknown'] = Field(..., title='Sex')


class SimulationCampaignCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')
    entity_id: UUID = Field(..., title='Entity Id')


class SimulationCampaignUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    scan_parameters: dict[str, Any] | str | None = Field(
        default='<NOT_SET>', title='Scan Parameters'
    )
    entity_id: UUID | str | None = Field(default='<NOT_SET>', title='Entity Id')


class SimulationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    simulation_campaign_id: UUID = Field(..., title='Simulation Campaign Id')
    entity_id: UUID = Field(..., title='Entity Id')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


class SimulationExecutionStatus(
    RootModel[Literal['created', 'pending', 'running', 'done', 'error']]
):
    root: Literal['created', 'pending', 'running', 'done', 'error'] = Field(
        ..., title='SimulationExecutionStatus'
    )


class SimulationExecutionUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    start_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='Start Time'
    )
    end_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='End Time'
    )
    generated_ids: list[UUID] | NotSet | None = Field(
        default='<NOT_SET>', title='Generated Ids'
    )
    status: SimulationExecutionStatus | None = None


SimulationGenerationCreate = CalibrationCreate


class SimulationGenerationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    id: UUID = Field(..., title='Id')
    type: ActivityType | None = None
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used: list[NestedEntityRead] = Field(..., title='Used')
    generated: list[NestedEntityRead] = Field(..., title='Generated')


class SimulationGenerationUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    start_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='Start Time'
    )
    end_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='End Time'
    )
    generated_ids: list[UUID] | NotSet | None = Field(
        default='<NOT_SET>', title='Generated Ids'
    )


class SimulationResultCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    simulation_id: UUID = Field(..., title='Simulation Id')


class SimulationResultUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    simulation_id: UUID | str | None = Field(default='<NOT_SET>', title='Simulation Id')


class SimulationUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    simulation_campaign_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Simulation Campaign Id'
    )
    entity_id: UUID | str | None = Field(default='<NOT_SET>', title='Entity Id')
    scan_parameters: dict[str, Any] | str | None = Field(
        default='<NOT_SET>', title='Scan Parameters'
    )


class SingleNeuronSimulationStatus(RootModel[Literal['started', 'failure', 'success']]):
    root: Literal['started', 'failure', 'success'] = Field(
        ..., title='SingleNeuronSimulationStatus'
    )


class SingleNeuronSimulationUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    seed: int | str | None = Field(default='<NOT_SET>', title='Seed')
    status: SingleNeuronSimulationStatus | str | None = Field(
        default='<NOT_SET>', title='Status'
    )
    injection_location: list[str] | str | None = Field(
        default='<NOT_SET>', title='Injection Location'
    )
    recording_location: list[str] | str | None = Field(
        default='<NOT_SET>', title='Recording Location'
    )
    me_model_id: UUID | str | None = Field(default='<NOT_SET>', title='Me Model Id')


class SingleNeuronSynaptomeCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    me_model_id: UUID = Field(..., title='Me Model Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')


class SingleNeuronSynaptomeSimulationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    status: SingleNeuronSimulationStatus
    injection_location: list[str] = Field(..., title='Injection Location')
    recording_location: list[str] = Field(..., title='Recording Location')
    synaptome_id: UUID = Field(..., title='Synaptome Id')


class SingleNeuronSynaptomeSimulationUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    seed: int | str | None = Field(default='<NOT_SET>', title='Seed')
    status: SingleNeuronSimulationStatus | str | None = Field(
        default='<NOT_SET>', title='Status'
    )
    injection_location: list[str] | str | None = Field(
        default='<NOT_SET>', title='Injection Location'
    )
    recording_location: list[str] | str | None = Field(
        default='<NOT_SET>', title='Recording Location'
    )
    synaptome_id: UUID | str | None = Field(default='<NOT_SET>', title='Synaptome Id')


class SingleNeuronSynaptomeUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    seed: int | str | None = Field(default='<NOT_SET>', title='Seed')
    me_model_id: UUID | str | None = Field(default='<NOT_SET>', title='Me Model Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )


class SlicingDirectionType(
    RootModel[Literal['coronal', 'sagittal', 'horizontal', 'custom']]
):
    root: Literal['coronal', 'sagittal', 'horizontal', 'custom'] = Field(
        ..., title='SlicingDirectionType'
    )


class SpeciesAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    taxonomy_id: str | None = Field(default='<NOT_SET>', title='Taxonomy Id')


class SpeciesCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')


class SpeciesRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')


class StainingType(
    RootModel[
        Literal[
            'golgi',
            'nissl',
            'luxol_fast_blue',
            'fluorescent_nissl',
            'fluorescent_dyes',
            'fluorescent_protein_expression',
            'immunohistochemistry',
            'other',
        ]
    ]
):
    root: Literal[
        'golgi',
        'nissl',
        'luxol_fast_blue',
        'fluorescent_nissl',
        'fluorescent_dyes',
        'fluorescent_protein_expression',
        'immunohistochemistry',
        'other',
    ] = Field(..., title='StainingType')


class StorageType(RootModel[Literal['aws_s3_internal', 'aws_s3_open']]):
    root: Literal['aws_s3_internal', 'aws_s3_open'] = Field(
        ..., description='Storage type.', title='StorageType'
    )


class StrainAdminUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    taxonomy_id: str | None = Field(default='<NOT_SET>', title='Taxonomy Id')
    species_id: UUID | str | None = Field(default='<NOT_SET>', title='Species Id')


class StrainCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')
    species_id: UUID = Field(..., title='Species Id')


class StrainRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    taxonomy_id: str = Field(..., title='Taxonomy Id')
    species_id: UUID = Field(..., title='Species Id')


class StructuralDomain(
    RootModel[
        Literal[
            'apical_dendrite', 'basal_dendrite', 'axon', 'soma', 'neuron_morphology'
        ]
    ]
):
    root: Literal[
        'apical_dendrite', 'basal_dendrite', 'axon', 'soma', 'neuron_morphology'
    ] = Field(..., title='StructuralDomain')


class SubjectCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    sex: Sex = Field(..., description='Sex of the subject')
    weight: Weight | None = Field(
        default=None, description='Weight in grams', title='Weight'
    )
    age_value: float | None = Field(
        default=None, description='Age value interval.', title='Age value'
    )
    age_min: float | None = Field(
        default=None, description='Minimum age range', title='Minimum age range'
    )
    age_max: float | None = Field(
        default=None, description='Maximum age range', title='Maximum age range'
    )
    age_period: AgePeriod | None = None
    authorized_public: bool = Field(default=False, title='Authorized Public')
    species_id: UUID = Field(..., title='Species Id')
    strain_id: UUID | None = Field(default=None, title='Strain Id')


class SubjectRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    sex: Sex = Field(..., description='Sex of the subject')
    weight: Weight | None = Field(
        default=None, description='Weight in grams', title='Weight'
    )
    age_value: float | None = Field(
        default=None, description='Age value interval.', title='Age value'
    )
    age_min: float | None = Field(
        default=None, description='Minimum age range', title='Minimum age range'
    )
    age_max: float | None = Field(
        default=None, description='Maximum age range', title='Maximum age range'
    )
    age_period: AgePeriod | None = None
    species: NestedSpeciesRead
    strain: NestedStrainRead | None = None


class SubjectUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    sex: Sex | str | None = Field(default='<NOT_SET>', title='Sex')
    weight: float | str | None = Field(default='<NOT_SET>', title='Weight')
    age_value: timedelta | str | None = Field(default='<NOT_SET>', title='Age Value')
    age_min: timedelta | str | None = Field(default='<NOT_SET>', title='Age Min')
    age_max: timedelta | str | None = Field(default='<NOT_SET>', title='Age Max')
    age_period: AgePeriod | str | None = Field(default='<NOT_SET>', title='Age Period')
    species_id: UUID | str | None = Field(default='<NOT_SET>', title='Species Id')
    strain_id: UUID | str | None = Field(default='<NOT_SET>', title='Strain Id')


class UseIon(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    ion_name: str = Field(..., title='Ion Name')
    read: list[str] = Field(default=[], title='Read')
    write: list[str] = Field(default=[], title='Write')
    valence: int | None = Field(default=None, title='Valence')
    main_ion: bool | None = Field(default=None, title='Main Ion')


ValidationCreate = CalibrationCreate


ValidationRead = SimulationGenerationRead


class ValidationResultCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    passed: bool = Field(..., title='Passed')
    validated_entity_id: UUID = Field(..., title='Validated Entity Id')


class ValidationResultUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    passed: bool | str | None = Field(default='<NOT_SET>', title='Passed')
    validated_entity_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Validated Entity Id'
    )


class ValidationStatus(
    RootModel[Literal['created', 'initialized', 'running', 'done', 'error']]
):
    root: Literal['created', 'initialized', 'running', 'done', 'error'] = Field(
        ..., title='ValidationStatus'
    )


ValidationUserUpdate = SimulationGenerationUserUpdate


class HealthHealthGetResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


VersionVersionGetResponse = HealthHealthGetResponse


class GetEntityAssetsEntityRouteEntityIdAssetsGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')


class DeleteEntityAssetEntityRouteEntityIdAssetsAssetIdDeleteParametersQuery(BaseModel):
    hard: bool = Field(default=False, title='Hard')


class DownloadEntityAssetEntityRouteEntityIdAssetsAssetIdDownloadGetParametersQuery(
    BaseModel
):
    asset_path: str | None = Field(default=None, title='Asset Path')


class ReadManyAnalysisNotebookEnvironmentGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManyAnalysisNotebookExecutionGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    status: str | None = Field(default=None, title='Status')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    used__id: UUID | None = Field(default=None, title='Used  Id')
    used__id__in: list[UUID] | None = Field(default=None, title='Used  Id  In')
    used__type: str | None = Field(default=None, title='Used  Type')
    generated__id: UUID | None = Field(default=None, title='Generated  Id')
    generated__id__in: list[UUID] | None = Field(
        default=None, title='Generated  Id  In'
    )
    generated__type: str | None = Field(default=None, title='Generated  Type')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyAnalysisNotebookResultGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')


ReadManyAnalysisNotebookTemplateGetParametersQuery = (
    ReadManyAnalysisNotebookResultGetParametersQuery
)


class ReadManyBrainAtlasGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    species_id__in: list[UUID] | None = Field(default=None, title='Species Id  In')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['name'], title='Order By')
    species__name: str | None = Field(default=None, title='Species  Name')
    species__name__in: list[str] | None = Field(default=None, title='Species  Name  In')
    species__name__ilike: str | None = Field(default=None, title='Species  Name  Ilike')
    species__id: UUID | None = Field(default=None, title='Species  Id')
    species__id__in: list[UUID] | None = Field(default=None, title='Species  Id  In')
    strain__name: str | None = Field(default=None, title='Strain  Name')
    strain__name__in: list[str] | None = Field(default=None, title='Strain  Name  In')
    strain__name__ilike: str | None = Field(default=None, title='Strain  Name  Ilike')
    strain__id: UUID | None = Field(default=None, title='Strain  Id')
    strain__id__in: list[UUID] | None = Field(default=None, title='Strain  Id  In')


class ReadManyRegionBrainAtlasAtlasIdRegionsGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')


class ReadManyBrainRegionGetParametersQuery(BaseModel):
    semantic_search: str | None = Field(default=None, title='Semantic Search')
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    acronym: str | None = Field(default=None, title='Acronym')
    annotation_value: int | None = Field(default=None, title='Annotation Value')
    hierarchy_id: UUID | None = Field(default=None, title='Hierarchy Id')
    order_by: list[str] = Field(default=['name'], title='Order By')


class ReadManyBrainRegionHierarchyGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['name'], title='Order By')


class ReadManyCalibrationGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    used__id: UUID | None = Field(default=None, title='Used  Id')
    used__id__in: list[UUID] | None = Field(default=None, title='Used  Id  In')
    used__type: str | None = Field(default=None, title='Used  Type')
    generated__id: UUID | None = Field(default=None, title='Generated  Id')
    generated__id__in: list[UUID] | None = Field(
        default=None, title='Generated  Id  In'
    )
    generated__type: str | None = Field(default=None, title='Generated  Type')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyCellCompositionGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')


class ReadManyCellMorphologyGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    measurement_annotation__creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Measurement Annotation  Creation Date  Lte'
    )
    measurement_annotation__creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Measurement Annotation  Creation Date  Gte'
    )
    measurement_annotation__update_date__lte: AwareDatetime | None = Field(
        default=None, title='Measurement Annotation  Update Date  Lte'
    )
    measurement_annotation__update_date__gte: AwareDatetime | None = Field(
        default=None, title='Measurement Annotation  Update Date  Gte'
    )
    measurement_kind__pref_label: str | None = Field(
        default=None, title='Measurement Kind  Pref Label'
    )
    measurement_kind__definition: str | None = Field(
        default=None, title='Measurement Kind  Definition'
    )
    measurement_kind__structural_domain: StructuralDomain | None = Field(
        default=None, title='Measurement Kind  Structural Domain'
    )
    measurement_item__name: MeasurementStatistic | None = Field(
        default=None, title='Measurement Item  Name'
    )
    measurement_item__unit: MeasurementUnit | None = Field(
        default=None, title='Measurement Item  Unit'
    )
    measurement_item__value__gte: float | None = Field(
        default=None, title='Measurement Item  Value  Gte'
    )
    measurement_item__value__lte: float | None = Field(
        default=None, title='Measurement Item  Value  Lte'
    )
    mtype__pref_label: str | None = Field(default=None, title='Mtype  Pref Label')
    mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Mtype  Pref Label  In'
    )
    mtype__pref_label__ilike: str | None = Field(
        default=None, title='Mtype  Pref Label  Ilike'
    )
    mtype__id: UUID | None = Field(default=None, title='Mtype  Id')
    mtype__id__in: list[UUID] | None = Field(default=None, title='Mtype  Id  In')
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    cell_morphology_protocol__id: UUID | None = Field(
        default=None, title='Cell Morphology Protocol  Id'
    )
    cell_morphology_protocol__id__in: list[UUID] | None = Field(
        default=None, title='Cell Morphology Protocol  Id  In'
    )
    cell_morphology_protocol__generation_type: CellMorphologyGenerationType | None = (
        Field(default=None, title='Cell Morphology Protocol  Generation Type')
    )
    cell_morphology_protocol__generation_type__in: (
        list[CellMorphologyGenerationType] | None
    ) = Field(default=None, title='Cell Morphology Protocol  Generation Type  In')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class Expand(RootModel[list[str]]):
    root: list[str] = Field(..., title='Expand')


class ReadOneCellMorphologyIdGetParametersQuery(BaseModel):
    expand: Expand | None = Field(default=None, title='Expand')


class ReadManyCellMorphologyProtocolGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    generation_type: CellMorphologyGenerationType | None = Field(
        default=None, title='Generation Type'
    )
    generation_type__in: list[CellMorphologyGenerationType] | None = Field(
        default=None, title='Generation Type  In'
    )
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    with_facets: bool = Field(default=False, title='With Facets')


UpdateOneCellMorphologyProtocolIdPatchRequest = HealthHealthGetResponse


class ReadCircuitHierarchyCircuitHierarchyGetParametersQuery(BaseModel):
    derivation_type: DerivationType


class ReadManyCircuitGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    scale: CircuitScale | None = Field(default=None, title='Scale')
    scale__in: list[CircuitScale] | None = Field(default=None, title='Scale  In')
    build_category: CircuitBuildCategory | None = Field(
        default=None, title='Build Category'
    )
    build_category__in: list[CircuitBuildCategory] | None = Field(
        default=None, title='Build Category  In'
    )
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Lte'
    )
    experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Gte'
    )
    contact_email: str | None = Field(default=None, title='Contact Email')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    atlas_id: UUID | None = Field(default=None, title='Atlas Id')
    root_circuit_id: UUID | None = Field(default=None, title='Root Circuit Id')
    has_morphologies: bool | None = Field(default=None, title='Has Morphologies')
    has_point_neurons: bool | None = Field(default=None, title='Has Point Neurons')
    has_electrical_cell_models: bool | None = Field(
        default=None, title='Has Electrical Cell Models'
    )
    has_spines: bool | None = Field(default=None, title='Has Spines')
    number_neurons__lte: int | None = Field(default=None, title='Number Neurons  Lte')
    number_neurons__gte: int | None = Field(default=None, title='Number Neurons  Gte')
    number_synapses__lte: int | None = Field(default=None, title='Number Synapses  Lte')
    number_synapses__gte: int | None = Field(default=None, title='Number Synapses  Gte')
    number_connections__lte: int | None = Field(
        default=None, title='Number Connections  Lte'
    )
    number_connections__gte: int | None = Field(
        default=None, title='Number Connections  Gte'
    )
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyCircuitExtractionCampaignGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyCircuitExtractionConfigGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    circuit_id: UUID | None = Field(default=None, title='Circuit Id')
    circuit_id__in: list[UUID] | None = Field(default=None, title='Circuit Id  In')
    circuit_extraction_campaign_id: UUID | None = Field(
        default=None, title='Circuit Extraction Campaign Id'
    )
    circuit_extraction_campaign_id__in: list[UUID] | None = Field(
        default=None, title='Circuit Extraction Campaign Id  In'
    )
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    circuit__scale: CircuitScale | None = Field(default=None, title='Circuit  Scale')
    circuit__scale__in: list[CircuitScale] | None = Field(
        default=None, title='Circuit  Scale  In'
    )
    circuit__build_category: CircuitBuildCategory | None = Field(
        default=None, title='Circuit  Build Category'
    )
    circuit__build_category__in: list[CircuitBuildCategory] | None = Field(
        default=None, title='Circuit  Build Category  In'
    )
    circuit__name: str | None = Field(default=None, title='Circuit  Name')
    circuit__name__in: list[str] | None = Field(default=None, title='Circuit  Name  In')
    circuit__name__ilike: str | None = Field(default=None, title='Circuit  Name  Ilike')
    circuit__id: UUID | None = Field(default=None, title='Circuit  Id')
    circuit__id__in: list[UUID] | None = Field(default=None, title='Circuit  Id  In')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


ReadManyCircuitExtractionConfigGenerationGetParametersQuery = (
    ReadManyCalibrationGetParametersQuery
)


class ReadManyCircuitExtractionExecutionGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    status: CircuitExtractionExecutionStatus | None = Field(
        default=None, title='Status'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    used__id: UUID | None = Field(default=None, title='Used  Id')
    used__id__in: list[UUID] | None = Field(default=None, title='Used  Id  In')
    used__type: str | None = Field(default=None, title='Used  Type')
    generated__id: UUID | None = Field(default=None, title='Generated  Id')
    generated__id__in: list[UUID] | None = Field(
        default=None, title='Generated  Id  In'
    )
    generated__type: str | None = Field(default=None, title='Generated  Type')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyConsortiumGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    pref_label: str | None = Field(default=None, title='Pref Label')
    pref_label__in: list[str] | None = Field(default=None, title='Pref Label  In')
    pref_label__ilike: str | None = Field(default=None, title='Pref Label  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    alternative_name: str | None = Field(default=None, title='Alternative Name')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )


class ReadManyContributionGetParametersQuery(BaseModel):
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    agent__pref_label: str | None = Field(default=None, title='Agent  Pref Label')
    agent__pref_label__in: list[str] | None = Field(
        default=None, title='Agent  Pref Label  In'
    )
    agent__pref_label__ilike: str | None = Field(
        default=None, title='Agent  Pref Label  Ilike'
    )
    agent__id: UUID | None = Field(default=None, title='Agent  Id')
    agent__id__in: list[UUID] | None = Field(default=None, title='Agent  Id  In')
    entity__id: UUID | None = Field(default=None, title='Entity  Id')
    entity__id__in: list[UUID] | None = Field(default=None, title='Entity  Id  In')
    entity__type: str | None = Field(default=None, title='Entity  Type')
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')


class ReadManyEntityRouteEntityIdDerivedFromGetParametersQuery(BaseModel):
    derivation_type: DerivationType
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    type: EntityType | None = Field(default=None, title='Type')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')


class ReadManyElectricalCellRecordingGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Lte'
    )
    experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Gte'
    )
    contact_email: str | None = Field(default=None, title='Contact Email')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    recording_type: ElectricalRecordingType | None = Field(
        default=None, title='Recording Type'
    )
    recording_type__in: list[ElectricalRecordingType] | None = Field(
        default=None, title='Recording Type  In'
    )
    recording_origin: ElectricalRecordingOrigin | None = Field(
        default=None, title='Recording Origin'
    )
    recording_origin__in: list[ElectricalRecordingOrigin] | None = Field(
        default=None, title='Recording Origin  In'
    )
    etype__pref_label: str | None = Field(default=None, title='Etype  Pref Label')
    etype__pref_label__in: list[str] | None = Field(
        default=None, title='Etype  Pref Label  In'
    )
    etype__pref_label__ilike: str | None = Field(
        default=None, title='Etype  Pref Label  Ilike'
    )
    etype__id: UUID | None = Field(default=None, title='Etype  Id')
    etype__id__in: list[UUID] | None = Field(default=None, title='Etype  Id  In')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyElectricalRecordingStimulusGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    shape: ElectricalRecordingStimulusShape | None = Field(default=None, title='Shape')
    injection_type: ElectricalRecordingStimulusType | None = Field(
        default=None, title='Injection Type'
    )
    recording_id: UUID | None = Field(default=None, title='Recording Id')
    recording_id__in: list[UUID] | None = Field(default=None, title='Recording Id  In')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyEmCellMeshGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    search: str | None = Field(default=None, title='Search')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Lte'
    )
    experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Gte'
    )
    contact_email: str | None = Field(default=None, title='Contact Email')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    release_version: int | None = Field(default=None, title='Release Version')
    dense_reconstruction_cell_id: int | None = Field(
        default=None, title='Dense Reconstruction Cell Id'
    )
    level_of_detail: int | None = Field(default=None, title='Level Of Detail')
    mesh_type: EMCellMeshType | None = Field(default=None, title='Mesh Type')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    em_dense_reconstruction_dataset__name: str | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Name'
    )
    em_dense_reconstruction_dataset__name__in: list[str] | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Name  In'
    )
    em_dense_reconstruction_dataset__name__ilike: str | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Name  Ilike'
    )
    em_dense_reconstruction_dataset__creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Creation Date  Lte'
    )
    em_dense_reconstruction_dataset__creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Creation Date  Gte'
    )
    em_dense_reconstruction_dataset__update_date__lte: AwareDatetime | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Update Date  Lte'
    )
    em_dense_reconstruction_dataset__update_date__gte: AwareDatetime | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Update Date  Gte'
    )
    em_dense_reconstruction_dataset__authorized_public: bool | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Authorized Public'
    )
    em_dense_reconstruction_dataset__authorized_project_id: UUID | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Authorized Project Id'
    )
    em_dense_reconstruction_dataset__id: UUID | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Id'
    )
    em_dense_reconstruction_dataset__id__in: list[UUID] | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Id  In'
    )
    em_dense_reconstruction_dataset__experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Experiment Date  Lte'
    )
    em_dense_reconstruction_dataset__experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Experiment Date  Gte'
    )
    em_dense_reconstruction_dataset__contact_email: str | None = Field(
        default=None, title='Em Dense Reconstruction Dataset  Contact Email'
    )
    em_dense_reconstruction_dataset__order_by: list[str] = Field(
        default=['-creation_date'], title='Em Dense Reconstruction Dataset  Order By'
    )
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManyEmDenseReconstructionDatasetGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    search: str | None = Field(default=None, title='Search')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Lte'
    )
    experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Gte'
    )
    contact_email: str | None = Field(default=None, title='Contact Email')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManyEmodelGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    species_id__in: list[UUID] | None = Field(default=None, title='Species Id  In')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    score__lte: float | None = Field(default=None, title='Score  Lte')
    score__gte: float | None = Field(default=None, title='Score  Gte')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    species__name: str | None = Field(default=None, title='Species  Name')
    species__name__in: list[str] | None = Field(default=None, title='Species  Name  In')
    species__name__ilike: str | None = Field(default=None, title='Species  Name  Ilike')
    species__id: UUID | None = Field(default=None, title='Species  Id')
    species__id__in: list[UUID] | None = Field(default=None, title='Species  Id  In')
    strain__name: str | None = Field(default=None, title='Strain  Name')
    strain__name__in: list[str] | None = Field(default=None, title='Strain  Name  In')
    strain__name__ilike: str | None = Field(default=None, title='Strain  Name  Ilike')
    strain__id: UUID | None = Field(default=None, title='Strain  Id')
    strain__id__in: list[UUID] | None = Field(default=None, title='Strain  Id  In')
    etype__pref_label: str | None = Field(default=None, title='Etype  Pref Label')
    etype__pref_label__in: list[str] | None = Field(
        default=None, title='Etype  Pref Label  In'
    )
    etype__pref_label__ilike: str | None = Field(
        default=None, title='Etype  Pref Label  Ilike'
    )
    etype__id: UUID | None = Field(default=None, title='Etype  Id')
    etype__id__in: list[UUID] | None = Field(default=None, title='Etype  Id  In')
    mtype__pref_label: str | None = Field(default=None, title='Mtype  Pref Label')
    mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Mtype  Pref Label  In'
    )
    mtype__pref_label__ilike: str | None = Field(
        default=None, title='Mtype  Pref Label  Ilike'
    )
    mtype__id: UUID | None = Field(default=None, title='Mtype  Id')
    mtype__id__in: list[UUID] | None = Field(default=None, title='Mtype  Id  In')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    exemplar_morphology__name: str | None = Field(
        default=None, title='Exemplar Morphology  Name'
    )
    exemplar_morphology__name__in: list[str] | None = Field(
        default=None, title='Exemplar Morphology  Name  In'
    )
    exemplar_morphology__name__ilike: str | None = Field(
        default=None, title='Exemplar Morphology  Name  Ilike'
    )
    exemplar_morphology__id: UUID | None = Field(
        default=None, title='Exemplar Morphology  Id'
    )
    exemplar_morphology__id__in: list[UUID] | None = Field(
        default=None, title='Exemplar Morphology  Id  In'
    )
    morphology__brain_region__name: str | None = Field(
        default=None, title='Morphology  Brain Region  Name'
    )
    morphology__brain_region__name__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Name  In'
    )
    morphology__brain_region__name__ilike: str | None = Field(
        default=None, title='Morphology  Brain Region  Name  Ilike'
    )
    morphology__brain_region__id: UUID | None = Field(
        default=None, title='Morphology  Brain Region  Id'
    )
    morphology__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Brain Region  Id  In'
    )
    morphology__brain_region__acronym: str | None = Field(
        default=None, title='Morphology  Brain Region  Acronym'
    )
    morphology__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Acronym  In'
    )
    morphology__subject__name: str | None = Field(
        default=None, title='Morphology  Subject  Name'
    )
    morphology__subject__name__in: list[str] | None = Field(
        default=None, title='Morphology  Subject  Name  In'
    )
    morphology__subject__name__ilike: str | None = Field(
        default=None, title='Morphology  Subject  Name  Ilike'
    )
    morphology__subject__id: UUID | None = Field(
        default=None, title='Morphology  Subject  Id'
    )
    morphology__subject__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Subject  Id  In'
    )
    morphology__subject__age_value: timedelta | None = Field(
        default=None, title='Morphology  Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    morphology__mtype__pref_label: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label'
    )
    morphology__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  In'
    )
    morphology__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  Ilike'
    )
    morphology__mtype__id: UUID | None = Field(
        default=None, title='Morphology  Mtype  Id'
    )
    morphology__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Mtype  Id  In'
    )
    ion_channel_model__name: str | None = Field(
        default=None, title='Ion Channel Model  Name'
    )
    ion_channel_model__name__in: list[str] | None = Field(
        default=None, title='Ion Channel Model  Name  In'
    )
    ion_channel_model__name__ilike: str | None = Field(
        default=None, title='Ion Channel Model  Name  Ilike'
    )
    ion_channel_model__id: UUID | None = Field(
        default=None, title='Ion Channel Model  Id'
    )
    ion_channel_model__id__in: list[UUID] | None = Field(
        default=None, title='Ion Channel Model  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class CountEntitiesByTypeEntityCountsGetParametersQuery(BaseModel):
    types: list[EntityTypeWithBrainRegion] = Field(
        ..., description='Entity types with count', min_length=1, title='Types'
    )
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyEtypeGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    pref_label: str | None = Field(default=None, title='Pref Label')
    pref_label__in: list[str] | None = Field(default=None, title='Pref Label  In')
    pref_label__ilike: str | None = Field(default=None, title='Pref Label  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['pref_label'], title='Order By')


class ReadManyEtypeClassificationGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    entity_id: UUID | None = Field(default=None, title='Entity Id')
    etype_class_id: UUID | None = Field(default=None, title='Etype Class Id')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManyExperimentalBoutonDensityGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    mtype__pref_label: str | None = Field(default=None, title='Mtype  Pref Label')
    mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Mtype  Pref Label  In'
    )
    mtype__pref_label__ilike: str | None = Field(
        default=None, title='Mtype  Pref Label  Ilike'
    )
    mtype__id: UUID | None = Field(default=None, title='Mtype  Id')
    mtype__id__in: list[UUID] | None = Field(default=None, title='Mtype  Id  In')
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyExperimentalNeuronDensityGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    etype__pref_label: str | None = Field(default=None, title='Etype  Pref Label')
    etype__pref_label__in: list[str] | None = Field(
        default=None, title='Etype  Pref Label  In'
    )
    etype__pref_label__ilike: str | None = Field(
        default=None, title='Etype  Pref Label  Ilike'
    )
    etype__id: UUID | None = Field(default=None, title='Etype  Id')
    etype__id__in: list[UUID] | None = Field(default=None, title='Etype  Id  In')
    mtype__pref_label: str | None = Field(default=None, title='Mtype  Pref Label')
    mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Mtype  Pref Label  In'
    )
    mtype__pref_label__ilike: str | None = Field(
        default=None, title='Mtype  Pref Label  Ilike'
    )
    mtype__id: UUID | None = Field(default=None, title='Mtype  Id')
    mtype__id__in: list[UUID] | None = Field(default=None, title='Mtype  Id  In')
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyExperimentalSynapsesPerConnectionGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    pre_mtype__pref_label: str | None = Field(
        default=None, title='Pre Mtype  Pref Label'
    )
    pre_mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Pre Mtype  Pref Label  In'
    )
    pre_mtype__pref_label__ilike: str | None = Field(
        default=None, title='Pre Mtype  Pref Label  Ilike'
    )
    pre_mtype__id: UUID | None = Field(default=None, title='Pre Mtype  Id')
    pre_mtype__id__in: list[UUID] | None = Field(
        default=None, title='Pre Mtype  Id  In'
    )
    post_mtype__pref_label: str | None = Field(
        default=None, title='Post Mtype  Pref Label'
    )
    post_mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Post Mtype  Pref Label  In'
    )
    post_mtype__pref_label__ilike: str | None = Field(
        default=None, title='Post Mtype  Pref Label  Ilike'
    )
    post_mtype__id: UUID | None = Field(default=None, title='Post Mtype  Id')
    post_mtype__id__in: list[UUID] | None = Field(
        default=None, title='Post Mtype  Id  In'
    )
    pre_region__name: str | None = Field(default=None, title='Pre Region  Name')
    pre_region__name__in: list[str] | None = Field(
        default=None, title='Pre Region  Name  In'
    )
    pre_region__name__ilike: str | None = Field(
        default=None, title='Pre Region  Name  Ilike'
    )
    pre_region__id: UUID | None = Field(default=None, title='Pre Region  Id')
    pre_region__id__in: list[UUID] | None = Field(
        default=None, title='Pre Region  Id  In'
    )
    pre_region__acronym: str | None = Field(default=None, title='Pre Region  Acronym')
    pre_region__acronym__in: list[str] | None = Field(
        default=None, title='Pre Region  Acronym  In'
    )
    post_region__name: str | None = Field(default=None, title='Post Region  Name')
    post_region__name__in: list[str] | None = Field(
        default=None, title='Post Region  Name  In'
    )
    post_region__name__ilike: str | None = Field(
        default=None, title='Post Region  Name  Ilike'
    )
    post_region__id: UUID | None = Field(default=None, title='Post Region  Id')
    post_region__id__in: list[UUID] | None = Field(
        default=None, title='Post Region  Id  In'
    )
    post_region__acronym: str | None = Field(default=None, title='Post Region  Acronym')
    post_region__acronym__in: list[str] | None = Field(
        default=None, title='Post Region  Acronym  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyExternalUrlGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    source: ExternalSource | None = Field(default=None, title='Source')
    url: str | None = Field(default=None, title='Url')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyIonChannelGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    label: str | None = Field(default=None, title='Label')
    gene: str | None = Field(default=None, title='Gene')
    order_by: list[str] = Field(default=['label'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManyIonChannelModelGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    search: str | None = Field(default=None, title='Search')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Lte'
    )
    experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Gte'
    )
    contact_email: str | None = Field(default=None, title='Contact Email')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    nmodl_suffix: str | None = Field(default=None, title='Nmodl Suffix')
    is_ljp_corrected: bool | None = Field(default=None, title='Is Ljp Corrected')
    is_temperature_dependent: bool | None = Field(
        default=None, title='Is Temperature Dependent'
    )
    temperature_celsius__lte: int | None = Field(
        default=None, title='Temperature Celsius  Lte'
    )
    temperature_celsius__gte: int | None = Field(
        default=None, title='Temperature Celsius  Gte'
    )
    is_stochastic: bool | None = Field(default=None, title='Is Stochastic')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManyIonChannelModelingCampaignGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    ion_channel_modeling_config__id: UUID | None = Field(
        default=None, title='Ion Channel Modeling Config  Id'
    )
    ion_channel_modeling_config__id__in: list[UUID] | None = Field(
        default=None, title='Ion Channel Modeling Config  Id  In'
    )
    ion_channel_modeling_config__name: str | None = Field(
        default=None, title='Ion Channel Modeling Config  Name'
    )
    ion_channel_modeling_config__name__in: list[str] | None = Field(
        default=None, title='Ion Channel Modeling Config  Name  In'
    )
    ion_channel_modeling_config__name__ilike: str | None = Field(
        default=None, title='Ion Channel Modeling Config  Name  Ilike'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyIonChannelModelingConfigGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    ion_channel_modeling_campaign_id: UUID | None = Field(
        default=None, title='Ion Channel Modeling Campaign Id'
    )
    ion_channel_modeling_campaign_id__in: list[UUID] | None = Field(
        default=None, title='Ion Channel Modeling Campaign Id  In'
    )
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


ReadManyIonChannelModelingConfigGenerationGetParametersQuery = (
    ReadManyCalibrationGetParametersQuery
)


class ReadManyIonChannelModelingExecutionGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    status: IonChannelModelingExecutionStatus | None = Field(
        default=None, title='Status'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    used__id: UUID | None = Field(default=None, title='Used  Id')
    used__id__in: list[UUID] | None = Field(default=None, title='Used  Id  In')
    used__type: str | None = Field(default=None, title='Used  Type')
    generated__id: UUID | None = Field(default=None, title='Generated  Id')
    generated__id__in: list[UUID] | None = Field(
        default=None, title='Generated  Id  In'
    )
    generated__type: str | None = Field(default=None, title='Generated  Type')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyIonChannelRecordingGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Lte'
    )
    experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Experiment Date  Gte'
    )
    contact_email: str | None = Field(default=None, title='Contact Email')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    recording_type: ElectricalRecordingType | None = Field(
        default=None, title='Recording Type'
    )
    recording_type__in: list[ElectricalRecordingType] | None = Field(
        default=None, title='Recording Type  In'
    )
    recording_origin: ElectricalRecordingOrigin | None = Field(
        default=None, title='Recording Origin'
    )
    recording_origin__in: list[ElectricalRecordingOrigin] | None = Field(
        default=None, title='Recording Origin  In'
    )
    temperature: float | None = Field(default=None, title='Temperature')
    temperature__lte: float | None = Field(default=None, title='Temperature  Lte')
    temperature__gte: float | None = Field(default=None, title='Temperature  Gte')
    cell_line: str | None = Field(default=None, title='Cell Line')
    cell_line__ilike: str | None = Field(default=None, title='Cell Line  Ilike')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    subject__name: str | None = Field(default=None, title='Subject  Name')
    subject__name__in: list[str] | None = Field(default=None, title='Subject  Name  In')
    subject__name__ilike: str | None = Field(default=None, title='Subject  Name  Ilike')
    subject__id: UUID | None = Field(default=None, title='Subject  Id')
    subject__id__in: list[UUID] | None = Field(default=None, title='Subject  Id  In')
    subject__age_value: timedelta | None = Field(
        default=None, title='Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    ion_channel__name: str | None = Field(default=None, title='Ion Channel  Name')
    ion_channel__name__in: list[str] | None = Field(
        default=None, title='Ion Channel  Name  In'
    )
    ion_channel__name__ilike: str | None = Field(
        default=None, title='Ion Channel  Name  Ilike'
    )
    ion_channel__id: UUID | None = Field(default=None, title='Ion Channel  Id')
    ion_channel__id__in: list[UUID] | None = Field(
        default=None, title='Ion Channel  Id  In'
    )
    ion_channel__label: str | None = Field(default=None, title='Ion Channel  Label')
    ion_channel__gene: str | None = Field(default=None, title='Ion Channel  Gene')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyLicenseGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    label: str | None = Field(default=None, title='Label')
    label__ilike: str | None = Field(default=None, title='Label  Ilike')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')


class ReadManyMeasurementAnnotationGetParametersQuery(BaseModel):
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    entity_id: UUID | None = Field(default=None, title='Entity Id')
    entity_type: MeasurableEntity | None = Field(default=None, title='Entity Type')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    measurement_kind__pref_label: str | None = Field(
        default=None, title='Measurement Kind  Pref Label'
    )
    measurement_kind__definition: str | None = Field(
        default=None, title='Measurement Kind  Definition'
    )
    measurement_kind__structural_domain: StructuralDomain | None = Field(
        default=None, title='Measurement Kind  Structural Domain'
    )
    measurement_item__name: MeasurementStatistic | None = Field(
        default=None, title='Measurement Item  Name'
    )
    measurement_item__unit: MeasurementUnit | None = Field(
        default=None, title='Measurement Item  Unit'
    )
    measurement_item__value__gte: float | None = Field(
        default=None, title='Measurement Item  Value  Gte'
    )
    measurement_item__value__lte: float | None = Field(
        default=None, title='Measurement Item  Value  Lte'
    )
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyMemodelGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    species_id__in: list[UUID] | None = Field(default=None, title='Species Id  In')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    etype__pref_label: str | None = Field(default=None, title='Etype  Pref Label')
    etype__pref_label__in: list[str] | None = Field(
        default=None, title='Etype  Pref Label  In'
    )
    etype__pref_label__ilike: str | None = Field(
        default=None, title='Etype  Pref Label  Ilike'
    )
    etype__id: UUID | None = Field(default=None, title='Etype  Id')
    etype__id__in: list[UUID] | None = Field(default=None, title='Etype  Id  In')
    mtype__pref_label: str | None = Field(default=None, title='Mtype  Pref Label')
    mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Mtype  Pref Label  In'
    )
    mtype__pref_label__ilike: str | None = Field(
        default=None, title='Mtype  Pref Label  Ilike'
    )
    mtype__id: UUID | None = Field(default=None, title='Mtype  Id')
    mtype__id__in: list[UUID] | None = Field(default=None, title='Mtype  Id  In')
    species__name: str | None = Field(default=None, title='Species  Name')
    species__name__in: list[str] | None = Field(default=None, title='Species  Name  In')
    species__name__ilike: str | None = Field(default=None, title='Species  Name  Ilike')
    species__id: UUID | None = Field(default=None, title='Species  Id')
    species__id__in: list[UUID] | None = Field(default=None, title='Species  Id  In')
    strain__name: str | None = Field(default=None, title='Strain  Name')
    strain__name__in: list[str] | None = Field(default=None, title='Strain  Name  In')
    strain__name__ilike: str | None = Field(default=None, title='Strain  Name  Ilike')
    strain__id: UUID | None = Field(default=None, title='Strain  Id')
    strain__id__in: list[UUID] | None = Field(default=None, title='Strain  Id  In')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    morphology__name: str | None = Field(default=None, title='Morphology  Name')
    morphology__name__in: list[str] | None = Field(
        default=None, title='Morphology  Name  In'
    )
    morphology__name__ilike: str | None = Field(
        default=None, title='Morphology  Name  Ilike'
    )
    morphology__id: UUID | None = Field(default=None, title='Morphology  Id')
    morphology__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Id  In'
    )
    morphology__brain_region__name: str | None = Field(
        default=None, title='Morphology  Brain Region  Name'
    )
    morphology__brain_region__name__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Name  In'
    )
    morphology__brain_region__name__ilike: str | None = Field(
        default=None, title='Morphology  Brain Region  Name  Ilike'
    )
    morphology__brain_region__id: UUID | None = Field(
        default=None, title='Morphology  Brain Region  Id'
    )
    morphology__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Brain Region  Id  In'
    )
    morphology__brain_region__acronym: str | None = Field(
        default=None, title='Morphology  Brain Region  Acronym'
    )
    morphology__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Acronym  In'
    )
    morphology__subject__name: str | None = Field(
        default=None, title='Morphology  Subject  Name'
    )
    morphology__subject__name__in: list[str] | None = Field(
        default=None, title='Morphology  Subject  Name  In'
    )
    morphology__subject__name__ilike: str | None = Field(
        default=None, title='Morphology  Subject  Name  Ilike'
    )
    morphology__subject__id: UUID | None = Field(
        default=None, title='Morphology  Subject  Id'
    )
    morphology__subject__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Subject  Id  In'
    )
    morphology__subject__age_value: timedelta | None = Field(
        default=None, title='Morphology  Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    morphology__mtype__pref_label: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label'
    )
    morphology__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  In'
    )
    morphology__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  Ilike'
    )
    morphology__mtype__id: UUID | None = Field(
        default=None, title='Morphology  Mtype  Id'
    )
    morphology__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Mtype  Id  In'
    )
    emodel__name: str | None = Field(default=None, title='Emodel  Name')
    emodel__name__in: list[str] | None = Field(default=None, title='Emodel  Name  In')
    emodel__name__ilike: str | None = Field(default=None, title='Emodel  Name  Ilike')
    emodel__id: UUID | None = Field(default=None, title='Emodel  Id')
    emodel__id__in: list[UUID] | None = Field(default=None, title='Emodel  Id  In')
    emodel__score__lte: float | None = Field(default=None, title='Emodel  Score  Lte')
    emodel__score__gte: float | None = Field(default=None, title='Emodel  Score  Gte')
    emodel__brain_region__name: str | None = Field(
        default=None, title='Emodel  Brain Region  Name'
    )
    emodel__brain_region__name__in: list[str] | None = Field(
        default=None, title='Emodel  Brain Region  Name  In'
    )
    emodel__brain_region__name__ilike: str | None = Field(
        default=None, title='Emodel  Brain Region  Name  Ilike'
    )
    emodel__brain_region__id: UUID | None = Field(
        default=None, title='Emodel  Brain Region  Id'
    )
    emodel__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Brain Region  Id  In'
    )
    emodel__brain_region__acronym: str | None = Field(
        default=None, title='Emodel  Brain Region  Acronym'
    )
    emodel__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Emodel  Brain Region  Acronym  In'
    )
    emodel__mtype__pref_label: str | None = Field(
        default=None, title='Emodel  Mtype  Pref Label'
    )
    emodel__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Emodel  Mtype  Pref Label  In'
    )
    emodel__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Emodel  Mtype  Pref Label  Ilike'
    )
    emodel__mtype__id: UUID | None = Field(default=None, title='Emodel  Mtype  Id')
    emodel__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Mtype  Id  In'
    )
    emodel__etype__pref_label: str | None = Field(
        default=None, title='Emodel  Etype  Pref Label'
    )
    emodel__etype__pref_label__in: list[str] | None = Field(
        default=None, title='Emodel  Etype  Pref Label  In'
    )
    emodel__etype__pref_label__ilike: str | None = Field(
        default=None, title='Emodel  Etype  Pref Label  Ilike'
    )
    emodel__etype__id: UUID | None = Field(default=None, title='Emodel  Etype  Id')
    emodel__etype__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Etype  Id  In'
    )
    emodel__exemplar_morphology__name: str | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name'
    )
    emodel__exemplar_morphology__name__in: list[str] | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name  In'
    )
    emodel__exemplar_morphology__name__ilike: str | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name  Ilike'
    )
    emodel__exemplar_morphology__id: UUID | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Id'
    )
    emodel__exemplar_morphology__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyMemodelCalibrationResultGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    passed: bool | None = Field(default=None, title='Passed')
    calibrated_entity_id: UUID | None = Field(
        default=None, title='Calibrated Entity Id'
    )
    order_by: list[str] = Field(default=['calibrated_entity_id'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


ReadManyMtypeGetParametersQuery = ReadManyEtypeGetParametersQuery


class ReadManyMtypeClassificationGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    entity_id: UUID | None = Field(default=None, title='Entity Id')
    mtype_class_id: UUID | None = Field(default=None, title='Mtype Class Id')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')


ReadManyOrganizationGetParametersQuery = ReadManyConsortiumGetParametersQuery


class ReadManyPersonGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    pref_label: str | None = Field(default=None, title='Pref Label')
    pref_label__in: list[str] | None = Field(default=None, title='Pref Label  In')
    pref_label__ilike: str | None = Field(default=None, title='Pref Label  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    given_name: str | None = Field(default=None, title='Given Name')
    given_name__ilike: str | None = Field(default=None, title='Given Name  Ilike')
    family_name: str | None = Field(default=None, title='Family Name')
    family_name__ilike: str | None = Field(default=None, title='Family Name  Ilike')
    sub_id: UUID | None = Field(default=None, title='Sub Id')
    sub_id__in: list[UUID] | None = Field(default=None, title='Sub Id  In')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )


class ReadManyPublicationGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    DOI: str | None = Field(default=None, title='Doi')
    publication_year: int | None = Field(default=None, title='Publication Year')
    publication_year__in: list[int] | None = Field(
        default=None, title='Publication Year  In'
    )
    publication_year__lte: int | None = Field(
        default=None, title='Publication Year  Lte'
    )
    publication_year__gte: int | None = Field(
        default=None, title='Publication Year  Gte'
    )
    title: str | None = Field(default=None, title='Title')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyRoleGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    role_id: str | None = Field(default=None, title='Role Id')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')


class ReadManyScientificArtifactExternalUrlLinkGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    external_url__name: str | None = Field(default=None, title='External Url  Name')
    external_url__name__in: list[str] | None = Field(
        default=None, title='External Url  Name  In'
    )
    external_url__name__ilike: str | None = Field(
        default=None, title='External Url  Name  Ilike'
    )
    external_url__id: UUID | None = Field(default=None, title='External Url  Id')
    external_url__id__in: list[UUID] | None = Field(
        default=None, title='External Url  Id  In'
    )
    external_url__source: ExternalSource | None = Field(
        default=None, title='External Url  Source'
    )
    external_url__url: str | None = Field(default=None, title='External Url  Url')
    scientific_artifact__id: UUID | None = Field(
        default=None, title='Scientific Artifact  Id'
    )
    scientific_artifact__id__in: list[UUID] | None = Field(
        default=None, title='Scientific Artifact  Id  In'
    )
    scientific_artifact__experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Scientific Artifact  Experiment Date  Lte'
    )
    scientific_artifact__experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Scientific Artifact  Experiment Date  Gte'
    )
    scientific_artifact__contact_email: str | None = Field(
        default=None, title='Scientific Artifact  Contact Email'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManyScientificArtifactPublicationLinkGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    publication_type: PublicationType | None = Field(
        default=None, title='Publication Type'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    publication__id: UUID | None = Field(default=None, title='Publication  Id')
    publication__id__in: list[UUID] | None = Field(
        default=None, title='Publication  Id  In'
    )
    publication__DOI: str | None = Field(default=None, title='Publication  Doi')
    publication__publication_year: int | None = Field(
        default=None, title='Publication  Publication Year'
    )
    publication__publication_year__in: list[int] | None = Field(
        default=None, title='Publication  Publication Year  In'
    )
    publication__publication_year__lte: int | None = Field(
        default=None, title='Publication  Publication Year  Lte'
    )
    publication__publication_year__gte: int | None = Field(
        default=None, title='Publication  Publication Year  Gte'
    )
    publication__title: str | None = Field(default=None, title='Publication  Title')
    scientific_artifact__id: UUID | None = Field(
        default=None, title='Scientific Artifact  Id'
    )
    scientific_artifact__id__in: list[UUID] | None = Field(
        default=None, title='Scientific Artifact  Id  In'
    )
    scientific_artifact__experiment_date__lte: AwareDatetime | None = Field(
        default=None, title='Scientific Artifact  Experiment Date  Lte'
    )
    scientific_artifact__experiment_date__gte: AwareDatetime | None = Field(
        default=None, title='Scientific Artifact  Experiment Date  Gte'
    )
    scientific_artifact__contact_email: str | None = Field(
        default=None, title='Scientific Artifact  Contact Email'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManySimulationGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    entity_id: UUID | None = Field(default=None, title='Entity Id')
    entity_id__in: list[UUID] | None = Field(default=None, title='Entity Id  In')
    simulation_campaign_id: UUID | None = Field(
        default=None, title='Simulation Campaign Id'
    )
    simulation_campaign_id__in: list[UUID] | None = Field(
        default=None, title='Simulation Campaign Id  In'
    )
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    circuit__scale: CircuitScale | None = Field(default=None, title='Circuit  Scale')
    circuit__scale__in: list[CircuitScale] | None = Field(
        default=None, title='Circuit  Scale  In'
    )
    circuit__build_category: CircuitBuildCategory | None = Field(
        default=None, title='Circuit  Build Category'
    )
    circuit__build_category__in: list[CircuitBuildCategory] | None = Field(
        default=None, title='Circuit  Build Category  In'
    )
    circuit__name: str | None = Field(default=None, title='Circuit  Name')
    circuit__name__in: list[str] | None = Field(default=None, title='Circuit  Name  In')
    circuit__name__ilike: str | None = Field(default=None, title='Circuit  Name  Ilike')
    circuit__id: UUID | None = Field(default=None, title='Circuit  Id')
    circuit__id__in: list[UUID] | None = Field(default=None, title='Circuit  Id  In')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManySimulationCampaignGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    entity_id: UUID | None = Field(default=None, title='Entity Id')
    entity_id__in: list[UUID] | None = Field(default=None, title='Entity Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    circuit__scale: CircuitScale | None = Field(default=None, title='Circuit  Scale')
    circuit__scale__in: list[CircuitScale] | None = Field(
        default=None, title='Circuit  Scale  In'
    )
    circuit__build_category: CircuitBuildCategory | None = Field(
        default=None, title='Circuit  Build Category'
    )
    circuit__build_category__in: list[CircuitBuildCategory] | None = Field(
        default=None, title='Circuit  Build Category  In'
    )
    circuit__name: str | None = Field(default=None, title='Circuit  Name')
    circuit__name__in: list[str] | None = Field(default=None, title='Circuit  Name  In')
    circuit__name__ilike: str | None = Field(default=None, title='Circuit  Name  Ilike')
    circuit__id: UUID | None = Field(default=None, title='Circuit  Id')
    circuit__id__in: list[UUID] | None = Field(default=None, title='Circuit  Id  In')
    simulation__id: UUID | None = Field(default=None, title='Simulation  Id')
    simulation__id__in: list[UUID] | None = Field(
        default=None, title='Simulation  Id  In'
    )
    simulation__name: str | None = Field(default=None, title='Simulation  Name')
    simulation__name__in: list[str] | None = Field(
        default=None, title='Simulation  Name  In'
    )
    simulation__name__ilike: str | None = Field(
        default=None, title='Simulation  Name  Ilike'
    )
    simulation__entity_id: UUID | None = Field(
        default=None, title='Simulation  Entity Id'
    )
    simulation__entity_id__in: list[UUID] | None = Field(
        default=None, title='Simulation  Entity Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class ReadManySimulationExecutionGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    status: SimulationExecutionStatus | None = Field(default=None, title='Status')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    used__id: UUID | None = Field(default=None, title='Used  Id')
    used__id__in: list[UUID] | None = Field(default=None, title='Used  Id  In')
    used__type: str | None = Field(default=None, title='Used  Type')
    generated__id: UUID | None = Field(default=None, title='Generated  Id')
    generated__id__in: list[UUID] | None = Field(
        default=None, title='Generated  Id  In'
    )
    generated__type: str | None = Field(default=None, title='Generated  Type')
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


ReadManySimulationGenerationGetParametersQuery = ReadManyCalibrationGetParametersQuery


ReadManySimulationResultGetParametersQuery = (
    ReadManyCircuitExtractionCampaignGetParametersQuery
)


class ReadManySingleNeuronSimulationGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    status: SingleNeuronSimulationStatus | None = Field(default=None, title='Status')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    me_model__name: str | None = Field(default=None, title='Me Model  Name')
    me_model__name__in: list[str] | None = Field(
        default=None, title='Me Model  Name  In'
    )
    me_model__name__ilike: str | None = Field(
        default=None, title='Me Model  Name  Ilike'
    )
    me_model__id: UUID | None = Field(default=None, title='Me Model  Id')
    me_model__id__in: list[UUID] | None = Field(default=None, title='Me Model  Id  In')
    me_model__validation_status: ValidationStatus | None = Field(
        default=None, title='Me Model  Validation Status'
    )
    me_model__brain_region__name: str | None = Field(
        default=None, title='Me Model  Brain Region  Name'
    )
    me_model__brain_region__name__in: list[str] | None = Field(
        default=None, title='Me Model  Brain Region  Name  In'
    )
    me_model__brain_region__name__ilike: str | None = Field(
        default=None, title='Me Model  Brain Region  Name  Ilike'
    )
    me_model__brain_region__id: UUID | None = Field(
        default=None, title='Me Model  Brain Region  Id'
    )
    me_model__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Brain Region  Id  In'
    )
    me_model__brain_region__acronym: str | None = Field(
        default=None, title='Me Model  Brain Region  Acronym'
    )
    me_model__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Me Model  Brain Region  Acronym  In'
    )
    me_model__species__name: str | None = Field(
        default=None, title='Me Model  Species  Name'
    )
    me_model__species__name__in: list[str] | None = Field(
        default=None, title='Me Model  Species  Name  In'
    )
    me_model__species__name__ilike: str | None = Field(
        default=None, title='Me Model  Species  Name  Ilike'
    )
    me_model__species__id: UUID | None = Field(
        default=None, title='Me Model  Species  Id'
    )
    me_model__species__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Species  Id  In'
    )
    me_model__strain__name: str | None = Field(
        default=None, title='Me Model  Strain  Name'
    )
    me_model__strain__name__in: list[str] | None = Field(
        default=None, title='Me Model  Strain  Name  In'
    )
    me_model__strain__name__ilike: str | None = Field(
        default=None, title='Me Model  Strain  Name  Ilike'
    )
    me_model__strain__id: UUID | None = Field(
        default=None, title='Me Model  Strain  Id'
    )
    me_model__strain__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Strain  Id  In'
    )
    me_model__morphology__name: str | None = Field(
        default=None, title='Me Model  Morphology  Name'
    )
    me_model__morphology__name__in: list[str] | None = Field(
        default=None, title='Me Model  Morphology  Name  In'
    )
    me_model__morphology__name__ilike: str | None = Field(
        default=None, title='Me Model  Morphology  Name  Ilike'
    )
    me_model__morphology__id: UUID | None = Field(
        default=None, title='Me Model  Morphology  Id'
    )
    me_model__morphology__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Morphology  Id  In'
    )
    morphology__brain_region__name: str | None = Field(
        default=None, title='Morphology  Brain Region  Name'
    )
    morphology__brain_region__name__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Name  In'
    )
    morphology__brain_region__name__ilike: str | None = Field(
        default=None, title='Morphology  Brain Region  Name  Ilike'
    )
    morphology__brain_region__id: UUID | None = Field(
        default=None, title='Morphology  Brain Region  Id'
    )
    morphology__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Brain Region  Id  In'
    )
    morphology__brain_region__acronym: str | None = Field(
        default=None, title='Morphology  Brain Region  Acronym'
    )
    morphology__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Acronym  In'
    )
    morphology__subject__name: str | None = Field(
        default=None, title='Morphology  Subject  Name'
    )
    morphology__subject__name__in: list[str] | None = Field(
        default=None, title='Morphology  Subject  Name  In'
    )
    morphology__subject__name__ilike: str | None = Field(
        default=None, title='Morphology  Subject  Name  Ilike'
    )
    morphology__subject__id: UUID | None = Field(
        default=None, title='Morphology  Subject  Id'
    )
    morphology__subject__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Subject  Id  In'
    )
    morphology__subject__age_value: timedelta | None = Field(
        default=None, title='Morphology  Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    morphology__mtype__pref_label: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label'
    )
    morphology__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  In'
    )
    morphology__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  Ilike'
    )
    morphology__mtype__id: UUID | None = Field(
        default=None, title='Morphology  Mtype  Id'
    )
    morphology__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Mtype  Id  In'
    )
    me_model__emodel__name: str | None = Field(
        default=None, title='Me Model  Emodel  Name'
    )
    me_model__emodel__name__in: list[str] | None = Field(
        default=None, title='Me Model  Emodel  Name  In'
    )
    me_model__emodel__name__ilike: str | None = Field(
        default=None, title='Me Model  Emodel  Name  Ilike'
    )
    me_model__emodel__id: UUID | None = Field(
        default=None, title='Me Model  Emodel  Id'
    )
    me_model__emodel__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Emodel  Id  In'
    )
    me_model__emodel__score__lte: float | None = Field(
        default=None, title='Me Model  Emodel  Score  Lte'
    )
    me_model__emodel__score__gte: float | None = Field(
        default=None, title='Me Model  Emodel  Score  Gte'
    )
    emodel__brain_region__name: str | None = Field(
        default=None, title='Emodel  Brain Region  Name'
    )
    emodel__brain_region__name__in: list[str] | None = Field(
        default=None, title='Emodel  Brain Region  Name  In'
    )
    emodel__brain_region__name__ilike: str | None = Field(
        default=None, title='Emodel  Brain Region  Name  Ilike'
    )
    emodel__brain_region__id: UUID | None = Field(
        default=None, title='Emodel  Brain Region  Id'
    )
    emodel__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Brain Region  Id  In'
    )
    emodel__brain_region__acronym: str | None = Field(
        default=None, title='Emodel  Brain Region  Acronym'
    )
    emodel__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Emodel  Brain Region  Acronym  In'
    )
    emodel__mtype__pref_label: str | None = Field(
        default=None, title='Emodel  Mtype  Pref Label'
    )
    emodel__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Emodel  Mtype  Pref Label  In'
    )
    emodel__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Emodel  Mtype  Pref Label  Ilike'
    )
    emodel__mtype__id: UUID | None = Field(default=None, title='Emodel  Mtype  Id')
    emodel__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Mtype  Id  In'
    )
    emodel__etype__pref_label: str | None = Field(
        default=None, title='Emodel  Etype  Pref Label'
    )
    emodel__etype__pref_label__in: list[str] | None = Field(
        default=None, title='Emodel  Etype  Pref Label  In'
    )
    emodel__etype__pref_label__ilike: str | None = Field(
        default=None, title='Emodel  Etype  Pref Label  Ilike'
    )
    emodel__etype__id: UUID | None = Field(default=None, title='Emodel  Etype  Id')
    emodel__etype__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Etype  Id  In'
    )
    emodel__exemplar_morphology__name: str | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name'
    )
    emodel__exemplar_morphology__name__in: list[str] | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name  In'
    )
    emodel__exemplar_morphology__name__ilike: str | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name  Ilike'
    )
    emodel__exemplar_morphology__id: UUID | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Id'
    )
    emodel__exemplar_morphology__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Id  In'
    )
    me_model__mtype__pref_label: str | None = Field(
        default=None, title='Me Model  Mtype  Pref Label'
    )
    me_model__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Me Model  Mtype  Pref Label  In'
    )
    me_model__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Me Model  Mtype  Pref Label  Ilike'
    )
    me_model__mtype__id: UUID | None = Field(default=None, title='Me Model  Mtype  Id')
    me_model__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Mtype  Id  In'
    )
    me_model__etype__pref_label: str | None = Field(
        default=None, title='Me Model  Etype  Pref Label'
    )
    me_model__etype__pref_label__in: list[str] | None = Field(
        default=None, title='Me Model  Etype  Pref Label  In'
    )
    me_model__etype__pref_label__ilike: str | None = Field(
        default=None, title='Me Model  Etype  Pref Label  Ilike'
    )
    me_model__etype__id: UUID | None = Field(default=None, title='Me Model  Etype  Id')
    me_model__etype__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Etype  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManySingleNeuronSynaptomeGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    me_model__name: str | None = Field(default=None, title='Me Model  Name')
    me_model__name__in: list[str] | None = Field(
        default=None, title='Me Model  Name  In'
    )
    me_model__name__ilike: str | None = Field(
        default=None, title='Me Model  Name  Ilike'
    )
    me_model__id: UUID | None = Field(default=None, title='Me Model  Id')
    me_model__id__in: list[UUID] | None = Field(default=None, title='Me Model  Id  In')
    me_model__validation_status: ValidationStatus | None = Field(
        default=None, title='Me Model  Validation Status'
    )
    me_model__brain_region__name: str | None = Field(
        default=None, title='Me Model  Brain Region  Name'
    )
    me_model__brain_region__name__in: list[str] | None = Field(
        default=None, title='Me Model  Brain Region  Name  In'
    )
    me_model__brain_region__name__ilike: str | None = Field(
        default=None, title='Me Model  Brain Region  Name  Ilike'
    )
    me_model__brain_region__id: UUID | None = Field(
        default=None, title='Me Model  Brain Region  Id'
    )
    me_model__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Brain Region  Id  In'
    )
    me_model__brain_region__acronym: str | None = Field(
        default=None, title='Me Model  Brain Region  Acronym'
    )
    me_model__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Me Model  Brain Region  Acronym  In'
    )
    me_model__species__name: str | None = Field(
        default=None, title='Me Model  Species  Name'
    )
    me_model__species__name__in: list[str] | None = Field(
        default=None, title='Me Model  Species  Name  In'
    )
    me_model__species__name__ilike: str | None = Field(
        default=None, title='Me Model  Species  Name  Ilike'
    )
    me_model__species__id: UUID | None = Field(
        default=None, title='Me Model  Species  Id'
    )
    me_model__species__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Species  Id  In'
    )
    me_model__strain__name: str | None = Field(
        default=None, title='Me Model  Strain  Name'
    )
    me_model__strain__name__in: list[str] | None = Field(
        default=None, title='Me Model  Strain  Name  In'
    )
    me_model__strain__name__ilike: str | None = Field(
        default=None, title='Me Model  Strain  Name  Ilike'
    )
    me_model__strain__id: UUID | None = Field(
        default=None, title='Me Model  Strain  Id'
    )
    me_model__strain__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Strain  Id  In'
    )
    me_model__morphology__name: str | None = Field(
        default=None, title='Me Model  Morphology  Name'
    )
    me_model__morphology__name__in: list[str] | None = Field(
        default=None, title='Me Model  Morphology  Name  In'
    )
    me_model__morphology__name__ilike: str | None = Field(
        default=None, title='Me Model  Morphology  Name  Ilike'
    )
    me_model__morphology__id: UUID | None = Field(
        default=None, title='Me Model  Morphology  Id'
    )
    me_model__morphology__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Morphology  Id  In'
    )
    morphology__brain_region__name: str | None = Field(
        default=None, title='Morphology  Brain Region  Name'
    )
    morphology__brain_region__name__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Name  In'
    )
    morphology__brain_region__name__ilike: str | None = Field(
        default=None, title='Morphology  Brain Region  Name  Ilike'
    )
    morphology__brain_region__id: UUID | None = Field(
        default=None, title='Morphology  Brain Region  Id'
    )
    morphology__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Brain Region  Id  In'
    )
    morphology__brain_region__acronym: str | None = Field(
        default=None, title='Morphology  Brain Region  Acronym'
    )
    morphology__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Acronym  In'
    )
    morphology__subject__name: str | None = Field(
        default=None, title='Morphology  Subject  Name'
    )
    morphology__subject__name__in: list[str] | None = Field(
        default=None, title='Morphology  Subject  Name  In'
    )
    morphology__subject__name__ilike: str | None = Field(
        default=None, title='Morphology  Subject  Name  Ilike'
    )
    morphology__subject__id: UUID | None = Field(
        default=None, title='Morphology  Subject  Id'
    )
    morphology__subject__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Subject  Id  In'
    )
    morphology__subject__age_value: timedelta | None = Field(
        default=None, title='Morphology  Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    morphology__mtype__pref_label: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label'
    )
    morphology__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  In'
    )
    morphology__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  Ilike'
    )
    morphology__mtype__id: UUID | None = Field(
        default=None, title='Morphology  Mtype  Id'
    )
    morphology__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Mtype  Id  In'
    )
    me_model__emodel__name: str | None = Field(
        default=None, title='Me Model  Emodel  Name'
    )
    me_model__emodel__name__in: list[str] | None = Field(
        default=None, title='Me Model  Emodel  Name  In'
    )
    me_model__emodel__name__ilike: str | None = Field(
        default=None, title='Me Model  Emodel  Name  Ilike'
    )
    me_model__emodel__id: UUID | None = Field(
        default=None, title='Me Model  Emodel  Id'
    )
    me_model__emodel__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Emodel  Id  In'
    )
    me_model__emodel__score__lte: float | None = Field(
        default=None, title='Me Model  Emodel  Score  Lte'
    )
    me_model__emodel__score__gte: float | None = Field(
        default=None, title='Me Model  Emodel  Score  Gte'
    )
    emodel__brain_region__name: str | None = Field(
        default=None, title='Emodel  Brain Region  Name'
    )
    emodel__brain_region__name__in: list[str] | None = Field(
        default=None, title='Emodel  Brain Region  Name  In'
    )
    emodel__brain_region__name__ilike: str | None = Field(
        default=None, title='Emodel  Brain Region  Name  Ilike'
    )
    emodel__brain_region__id: UUID | None = Field(
        default=None, title='Emodel  Brain Region  Id'
    )
    emodel__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Brain Region  Id  In'
    )
    emodel__brain_region__acronym: str | None = Field(
        default=None, title='Emodel  Brain Region  Acronym'
    )
    emodel__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Emodel  Brain Region  Acronym  In'
    )
    emodel__mtype__pref_label: str | None = Field(
        default=None, title='Emodel  Mtype  Pref Label'
    )
    emodel__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Emodel  Mtype  Pref Label  In'
    )
    emodel__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Emodel  Mtype  Pref Label  Ilike'
    )
    emodel__mtype__id: UUID | None = Field(default=None, title='Emodel  Mtype  Id')
    emodel__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Mtype  Id  In'
    )
    emodel__etype__pref_label: str | None = Field(
        default=None, title='Emodel  Etype  Pref Label'
    )
    emodel__etype__pref_label__in: list[str] | None = Field(
        default=None, title='Emodel  Etype  Pref Label  In'
    )
    emodel__etype__pref_label__ilike: str | None = Field(
        default=None, title='Emodel  Etype  Pref Label  Ilike'
    )
    emodel__etype__id: UUID | None = Field(default=None, title='Emodel  Etype  Id')
    emodel__etype__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Etype  Id  In'
    )
    emodel__exemplar_morphology__name: str | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name'
    )
    emodel__exemplar_morphology__name__in: list[str] | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name  In'
    )
    emodel__exemplar_morphology__name__ilike: str | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name  Ilike'
    )
    emodel__exemplar_morphology__id: UUID | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Id'
    )
    emodel__exemplar_morphology__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Id  In'
    )
    me_model__mtype__pref_label: str | None = Field(
        default=None, title='Me Model  Mtype  Pref Label'
    )
    me_model__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Me Model  Mtype  Pref Label  In'
    )
    me_model__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Me Model  Mtype  Pref Label  Ilike'
    )
    me_model__mtype__id: UUID | None = Field(default=None, title='Me Model  Mtype  Id')
    me_model__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Mtype  Id  In'
    )
    me_model__etype__pref_label: str | None = Field(
        default=None, title='Me Model  Etype  Pref Label'
    )
    me_model__etype__pref_label__in: list[str] | None = Field(
        default=None, title='Me Model  Etype  Pref Label  In'
    )
    me_model__etype__pref_label__ilike: str | None = Field(
        default=None, title='Me Model  Etype  Pref Label  Ilike'
    )
    me_model__etype__id: UUID | None = Field(default=None, title='Me Model  Etype  Id')
    me_model__etype__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Etype  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManySingleNeuronSynaptomeSimulationGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    status: SingleNeuronSimulationStatus | None = Field(default=None, title='Status')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    brain_region__name: str | None = Field(default=None, title='Brain Region  Name')
    brain_region__name__in: list[str] | None = Field(
        default=None, title='Brain Region  Name  In'
    )
    brain_region__name__ilike: str | None = Field(
        default=None, title='Brain Region  Name  Ilike'
    )
    brain_region__id: UUID | None = Field(default=None, title='Brain Region  Id')
    brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Brain Region  Id  In'
    )
    brain_region__acronym: str | None = Field(
        default=None, title='Brain Region  Acronym'
    )
    brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Brain Region  Acronym  In'
    )
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    synaptome__name: str | None = Field(default=None, title='Synaptome  Name')
    synaptome__name__in: list[str] | None = Field(
        default=None, title='Synaptome  Name  In'
    )
    synaptome__name__ilike: str | None = Field(
        default=None, title='Synaptome  Name  Ilike'
    )
    synaptome__id: UUID | None = Field(default=None, title='Synaptome  Id')
    synaptome__id__in: list[UUID] | None = Field(
        default=None, title='Synaptome  Id  In'
    )
    synaptome__brain_region__name: str | None = Field(
        default=None, title='Synaptome  Brain Region  Name'
    )
    synaptome__brain_region__name__in: list[str] | None = Field(
        default=None, title='Synaptome  Brain Region  Name  In'
    )
    synaptome__brain_region__name__ilike: str | None = Field(
        default=None, title='Synaptome  Brain Region  Name  Ilike'
    )
    synaptome__brain_region__id: UUID | None = Field(
        default=None, title='Synaptome  Brain Region  Id'
    )
    synaptome__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Synaptome  Brain Region  Id  In'
    )
    synaptome__brain_region__acronym: str | None = Field(
        default=None, title='Synaptome  Brain Region  Acronym'
    )
    synaptome__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Synaptome  Brain Region  Acronym  In'
    )
    synaptome__me_model__name: str | None = Field(
        default=None, title='Synaptome  Me Model  Name'
    )
    synaptome__me_model__name__in: list[str] | None = Field(
        default=None, title='Synaptome  Me Model  Name  In'
    )
    synaptome__me_model__name__ilike: str | None = Field(
        default=None, title='Synaptome  Me Model  Name  Ilike'
    )
    synaptome__me_model__id: UUID | None = Field(
        default=None, title='Synaptome  Me Model  Id'
    )
    synaptome__me_model__id__in: list[UUID] | None = Field(
        default=None, title='Synaptome  Me Model  Id  In'
    )
    synaptome__me_model__validation_status: ValidationStatus | None = Field(
        default=None, title='Synaptome  Me Model  Validation Status'
    )
    me_model__brain_region__name: str | None = Field(
        default=None, title='Me Model  Brain Region  Name'
    )
    me_model__brain_region__name__in: list[str] | None = Field(
        default=None, title='Me Model  Brain Region  Name  In'
    )
    me_model__brain_region__name__ilike: str | None = Field(
        default=None, title='Me Model  Brain Region  Name  Ilike'
    )
    me_model__brain_region__id: UUID | None = Field(
        default=None, title='Me Model  Brain Region  Id'
    )
    me_model__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Brain Region  Id  In'
    )
    me_model__brain_region__acronym: str | None = Field(
        default=None, title='Me Model  Brain Region  Acronym'
    )
    me_model__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Me Model  Brain Region  Acronym  In'
    )
    me_model__species__name: str | None = Field(
        default=None, title='Me Model  Species  Name'
    )
    me_model__species__name__in: list[str] | None = Field(
        default=None, title='Me Model  Species  Name  In'
    )
    me_model__species__name__ilike: str | None = Field(
        default=None, title='Me Model  Species  Name  Ilike'
    )
    me_model__species__id: UUID | None = Field(
        default=None, title='Me Model  Species  Id'
    )
    me_model__species__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Species  Id  In'
    )
    me_model__strain__name: str | None = Field(
        default=None, title='Me Model  Strain  Name'
    )
    me_model__strain__name__in: list[str] | None = Field(
        default=None, title='Me Model  Strain  Name  In'
    )
    me_model__strain__name__ilike: str | None = Field(
        default=None, title='Me Model  Strain  Name  Ilike'
    )
    me_model__strain__id: UUID | None = Field(
        default=None, title='Me Model  Strain  Id'
    )
    me_model__strain__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Strain  Id  In'
    )
    me_model__morphology__name: str | None = Field(
        default=None, title='Me Model  Morphology  Name'
    )
    me_model__morphology__name__in: list[str] | None = Field(
        default=None, title='Me Model  Morphology  Name  In'
    )
    me_model__morphology__name__ilike: str | None = Field(
        default=None, title='Me Model  Morphology  Name  Ilike'
    )
    me_model__morphology__id: UUID | None = Field(
        default=None, title='Me Model  Morphology  Id'
    )
    me_model__morphology__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Morphology  Id  In'
    )
    morphology__brain_region__name: str | None = Field(
        default=None, title='Morphology  Brain Region  Name'
    )
    morphology__brain_region__name__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Name  In'
    )
    morphology__brain_region__name__ilike: str | None = Field(
        default=None, title='Morphology  Brain Region  Name  Ilike'
    )
    morphology__brain_region__id: UUID | None = Field(
        default=None, title='Morphology  Brain Region  Id'
    )
    morphology__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Brain Region  Id  In'
    )
    morphology__brain_region__acronym: str | None = Field(
        default=None, title='Morphology  Brain Region  Acronym'
    )
    morphology__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Morphology  Brain Region  Acronym  In'
    )
    morphology__subject__name: str | None = Field(
        default=None, title='Morphology  Subject  Name'
    )
    morphology__subject__name__in: list[str] | None = Field(
        default=None, title='Morphology  Subject  Name  In'
    )
    morphology__subject__name__ilike: str | None = Field(
        default=None, title='Morphology  Subject  Name  Ilike'
    )
    morphology__subject__id: UUID | None = Field(
        default=None, title='Morphology  Subject  Id'
    )
    morphology__subject__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Subject  Id  In'
    )
    morphology__subject__age_value: timedelta | None = Field(
        default=None, title='Morphology  Subject  Age Value'
    )
    subject__species__name: str | None = Field(
        default=None, title='Subject  Species  Name'
    )
    subject__species__name__in: list[str] | None = Field(
        default=None, title='Subject  Species  Name  In'
    )
    subject__species__name__ilike: str | None = Field(
        default=None, title='Subject  Species  Name  Ilike'
    )
    subject__species__id: UUID | None = Field(
        default=None, title='Subject  Species  Id'
    )
    subject__species__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Species  Id  In'
    )
    subject__strain__name: str | None = Field(
        default=None, title='Subject  Strain  Name'
    )
    subject__strain__name__in: list[str] | None = Field(
        default=None, title='Subject  Strain  Name  In'
    )
    subject__strain__name__ilike: str | None = Field(
        default=None, title='Subject  Strain  Name  Ilike'
    )
    subject__strain__id: UUID | None = Field(default=None, title='Subject  Strain  Id')
    subject__strain__id__in: list[UUID] | None = Field(
        default=None, title='Subject  Strain  Id  In'
    )
    morphology__mtype__pref_label: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label'
    )
    morphology__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  In'
    )
    morphology__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Morphology  Mtype  Pref Label  Ilike'
    )
    morphology__mtype__id: UUID | None = Field(
        default=None, title='Morphology  Mtype  Id'
    )
    morphology__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Morphology  Mtype  Id  In'
    )
    me_model__emodel__name: str | None = Field(
        default=None, title='Me Model  Emodel  Name'
    )
    me_model__emodel__name__in: list[str] | None = Field(
        default=None, title='Me Model  Emodel  Name  In'
    )
    me_model__emodel__name__ilike: str | None = Field(
        default=None, title='Me Model  Emodel  Name  Ilike'
    )
    me_model__emodel__id: UUID | None = Field(
        default=None, title='Me Model  Emodel  Id'
    )
    me_model__emodel__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Emodel  Id  In'
    )
    me_model__emodel__score__lte: float | None = Field(
        default=None, title='Me Model  Emodel  Score  Lte'
    )
    me_model__emodel__score__gte: float | None = Field(
        default=None, title='Me Model  Emodel  Score  Gte'
    )
    emodel__brain_region__name: str | None = Field(
        default=None, title='Emodel  Brain Region  Name'
    )
    emodel__brain_region__name__in: list[str] | None = Field(
        default=None, title='Emodel  Brain Region  Name  In'
    )
    emodel__brain_region__name__ilike: str | None = Field(
        default=None, title='Emodel  Brain Region  Name  Ilike'
    )
    emodel__brain_region__id: UUID | None = Field(
        default=None, title='Emodel  Brain Region  Id'
    )
    emodel__brain_region__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Brain Region  Id  In'
    )
    emodel__brain_region__acronym: str | None = Field(
        default=None, title='Emodel  Brain Region  Acronym'
    )
    emodel__brain_region__acronym__in: list[str] | None = Field(
        default=None, title='Emodel  Brain Region  Acronym  In'
    )
    emodel__mtype__pref_label: str | None = Field(
        default=None, title='Emodel  Mtype  Pref Label'
    )
    emodel__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Emodel  Mtype  Pref Label  In'
    )
    emodel__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Emodel  Mtype  Pref Label  Ilike'
    )
    emodel__mtype__id: UUID | None = Field(default=None, title='Emodel  Mtype  Id')
    emodel__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Mtype  Id  In'
    )
    emodel__etype__pref_label: str | None = Field(
        default=None, title='Emodel  Etype  Pref Label'
    )
    emodel__etype__pref_label__in: list[str] | None = Field(
        default=None, title='Emodel  Etype  Pref Label  In'
    )
    emodel__etype__pref_label__ilike: str | None = Field(
        default=None, title='Emodel  Etype  Pref Label  Ilike'
    )
    emodel__etype__id: UUID | None = Field(default=None, title='Emodel  Etype  Id')
    emodel__etype__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Etype  Id  In'
    )
    emodel__exemplar_morphology__name: str | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name'
    )
    emodel__exemplar_morphology__name__in: list[str] | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name  In'
    )
    emodel__exemplar_morphology__name__ilike: str | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Name  Ilike'
    )
    emodel__exemplar_morphology__id: UUID | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Id'
    )
    emodel__exemplar_morphology__id__in: list[UUID] | None = Field(
        default=None, title='Emodel  Exemplar Morphology  Id  In'
    )
    me_model__mtype__pref_label: str | None = Field(
        default=None, title='Me Model  Mtype  Pref Label'
    )
    me_model__mtype__pref_label__in: list[str] | None = Field(
        default=None, title='Me Model  Mtype  Pref Label  In'
    )
    me_model__mtype__pref_label__ilike: str | None = Field(
        default=None, title='Me Model  Mtype  Pref Label  Ilike'
    )
    me_model__mtype__id: UUID | None = Field(default=None, title='Me Model  Mtype  Id')
    me_model__mtype__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Mtype  Id  In'
    )
    me_model__etype__pref_label: str | None = Field(
        default=None, title='Me Model  Etype  Pref Label'
    )
    me_model__etype__pref_label__in: list[str] | None = Field(
        default=None, title='Me Model  Etype  Pref Label  In'
    )
    me_model__etype__pref_label__ilike: str | None = Field(
        default=None, title='Me Model  Etype  Pref Label  Ilike'
    )
    me_model__etype__id: UUID | None = Field(default=None, title='Me Model  Etype  Id')
    me_model__etype__id__in: list[UUID] | None = Field(
        default=None, title='Me Model  Etype  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )
    with_facets: bool = Field(default=False, title='With Facets')


class ReadManySpeciesGetParametersQuery(BaseModel):
    semantic_search: str | None = Field(default=None, title='Semantic Search')
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    order_by: list[str] = Field(default=['name'], title='Order By')
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )


ReadManyStrainGetParametersQuery = ReadManySpeciesGetParametersQuery


class ReadManySubjectGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    species_id__in: list[UUID] | None = Field(default=None, title='Species Id  In')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    age_value: timedelta | None = Field(default=None, title='Age Value')
    order_by: list[str] = Field(default=['-creation_date'], title='Order By')
    species__name: str | None = Field(default=None, title='Species  Name')
    species__name__in: list[str] | None = Field(default=None, title='Species  Name  In')
    species__name__ilike: str | None = Field(default=None, title='Species  Name  Ilike')
    species__id: UUID | None = Field(default=None, title='Species  Id')
    species__id__in: list[UUID] | None = Field(default=None, title='Species  Id  In')
    strain__name: str | None = Field(default=None, title='Strain  Name')
    strain__name__in: list[str] | None = Field(default=None, title='Strain  Name  In')
    strain__name__ilike: str | None = Field(default=None, title='Strain  Name  Ilike')
    strain__id: UUID | None = Field(default=None, title='Strain  Id')
    strain__id__in: list[UUID] | None = Field(default=None, title='Strain  Id  In')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')


ReadManyValidationGetParametersQuery = ReadManyCalibrationGetParametersQuery


class ReadManyValidationResultGetParametersQuery(BaseModel):
    page: int = Field(default=1, ge=1, title='Page')
    page_size: int = Field(default=100, ge=1, title='Page Size')
    name: str | None = Field(default=None, title='Name')
    name__in: list[str] | None = Field(default=None, title='Name  In')
    name__ilike: str | None = Field(default=None, title='Name  Ilike')
    creation_date__lte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Lte'
    )
    creation_date__gte: AwareDatetime | None = Field(
        default=None, title='Creation Date  Gte'
    )
    update_date__lte: AwareDatetime | None = Field(
        default=None, title='Update Date  Lte'
    )
    update_date__gte: AwareDatetime | None = Field(
        default=None, title='Update Date  Gte'
    )
    authorized_public: bool | None = Field(default=None, title='Authorized Public')
    authorized_project_id: UUID | None = Field(
        default=None, title='Authorized Project Id'
    )
    id: UUID | None = Field(default=None, title='Id')
    id__in: list[UUID] | None = Field(default=None, title='Id  In')
    passed: bool | None = Field(default=None, title='Passed')
    validated_entity_id: UUID | None = Field(default=None, title='Validated Entity Id')
    order_by: list[str] = Field(default=['name'], title='Order By')
    contribution__pref_label: str | None = Field(
        default=None, title='Contribution  Pref Label'
    )
    contribution__pref_label__in: list[str] | None = Field(
        default=None, title='Contribution  Pref Label  In'
    )
    contribution__pref_label__ilike: str | None = Field(
        default=None, title='Contribution  Pref Label  Ilike'
    )
    contribution__id: UUID | None = Field(default=None, title='Contribution  Id')
    contribution__id__in: list[UUID] | None = Field(
        default=None, title='Contribution  Id  In'
    )
    created_by__pref_label: str | None = Field(
        default=None, title='Created By  Pref Label'
    )
    created_by__pref_label__in: list[str] | None = Field(
        default=None, title='Created By  Pref Label  In'
    )
    created_by__pref_label__ilike: str | None = Field(
        default=None, title='Created By  Pref Label  Ilike'
    )
    created_by__id: UUID | None = Field(default=None, title='Created By  Id')
    created_by__id__in: list[UUID] | None = Field(
        default=None, title='Created By  Id  In'
    )
    updated_by__pref_label: str | None = Field(
        default=None, title='Updated By  Pref Label'
    )
    updated_by__pref_label__in: list[str] | None = Field(
        default=None, title='Updated By  Pref Label  In'
    )
    updated_by__pref_label__ilike: str | None = Field(
        default=None, title='Updated By  Pref Label  Ilike'
    )
    updated_by__id: UUID | None = Field(default=None, title='Updated By  Id')
    updated_by__id__in: list[UUID] | None = Field(
        default=None, title='Updated By  Id  In'
    )
    search: str | None = Field(default=None, title='Search')
    with_facets: bool = Field(default=False, title='With Facets')
    within_brain_region_hierarchy_id: UUID | None = Field(
        default=None, title='Within Brain Region Hierarchy Id'
    )
    within_brain_region_brain_region_id: UUID | None = Field(
        default=None, title='Within Brain Region Brain Region Id'
    )
    within_brain_region_ascendants: bool = Field(
        default=False, title='Within Brain Region Ascendants'
    )


class AgentRead(
    RootModel[NestedPersonRead | NestedOrganizationRead | NestedConsortiumRead]
):
    root: NestedPersonRead | NestedOrganizationRead | NestedConsortiumRead


class AnalysisNotebookEnvironmentCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    runtime_info: RuntimeInfo | None = None


class AnalysisNotebookEnvironmentUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    runtime_info: RuntimeInfo | str | None = Field(
        default='<NOT_SET>', title='Runtime Info'
    )


class AnalysisNotebookExecutionUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    start_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='Start Time'
    )
    end_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='End Time'
    )
    generated_ids: list[UUID] | NotSet | None = Field(
        default='<NOT_SET>', title='Generated Ids'
    )
    analysis_notebook_template_id: UUID | None = Field(
        default=None, title='Analysis Notebook Template Id'
    )
    analysis_notebook_environment_id: UUID | None = Field(
        default=None, title='Analysis Notebook Environment Id'
    )


class AnalysisNotebookTemplateInputType(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str = Field(..., title='Name')
    entity_type: EntityType
    is_list: bool = Field(default=False, title='Is List')
    count_min: int = Field(default=1, ge=0, title='Count Min')
    count_max: CountMax | None = Field(default=1, title='Count Max')


class AnalysisNotebookTemplateSpecificationsInput(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    schema_version: int = Field(default=1, title='Schema Version')
    python: PythonDependency | None = None
    docker: DockerDependency | None = None
    inputs: list[AnalysisNotebookTemplateInputType] = Field(default=[], title='Inputs')


AnalysisNotebookTemplateSpecificationsOutput = (
    AnalysisNotebookTemplateSpecificationsInput
)


class AnalysisNotebookTemplateUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    specifications: AnalysisNotebookTemplateSpecificationsInput | str | None = Field(
        default='<NOT_SET>', title='Specifications'
    )
    scale: AnalysisScale | str | None = Field(default='<NOT_SET>', title='Scale')


class AssetRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    size: int = Field(..., title='Size')
    sha256_digest: str | None = Field(..., title='Sha256 Digest')
    path: str = Field(..., title='Path')
    full_path: str = Field(..., title='Full Path')
    is_directory: bool = Field(..., title='Is Directory')
    content_type: ContentType
    meta: dict[str, Any] = Field(default={}, title='Meta')
    label: AssetLabel
    storage_type: StorageType
    id: UUID = Field(..., title='Id')
    status: AssetStatus


class AssetRegister(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    path: str = Field(..., title='Path')
    full_path: str = Field(..., title='Full Path')
    is_directory: bool = Field(..., title='Is Directory')
    content_type: ContentType
    meta: dict[str, Any] = Field(default={}, title='Meta')
    label: AssetLabel
    storage_type: StorageType


class BasicEntityRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')


class BrainAtlasRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    hierarchy_id: UUID = Field(..., title='Hierarchy Id')
    species: NestedSpeciesRead


class BrainAtlasRegionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    volume: float | None = Field(..., title='Volume')
    is_leaf_region: bool = Field(..., title='Is Leaf Region')
    brain_atlas_id: UUID = Field(..., title='Brain Atlas Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')


class BrainRegionHierarchyRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')


CalibrationRead = SimulationGenerationRead


CalibrationUserUpdate = SimulationGenerationUserUpdate


class CellMorphologyCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    subject_id: UUID = Field(..., title='Subject Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    location: PointLocationBase | None = None
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')
    cell_morphology_protocol_id: UUID | None = Field(
        default=None, title='Cell Morphology Protocol Id'
    )


class CellMorphologyUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    license_id: UUID | str | None = Field(default='<NOT_SET>', title='License Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    subject_id: UUID | str | None = Field(default='<NOT_SET>', title='Subject Id')
    experiment_date: AwareDatetime | str | None = Field(
        default='<NOT_SET>', title='Experiment Date'
    )
    contact_email: str | None = Field(default='<NOT_SET>', title='Contact Email')
    published_in: str | None = Field(default='<NOT_SET>', title='Published In')
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    location: PointLocationBase | str | None = Field(
        default='<NOT_SET>', title='Location'
    )
    legacy_id: list[str] | str | None = Field(default='<NOT_SET>', title='Legacy Id')
    cell_morphology_protocol_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Cell Morphology Protocol Id'
    )


class CircuitCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    subject_id: UUID = Field(..., title='Subject Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    has_morphologies: bool = Field(default=False, title='Has Morphologies')
    has_point_neurons: bool = Field(default=False, title='Has Point Neurons')
    has_electrical_cell_models: bool = Field(
        default=False, title='Has Electrical Cell Models'
    )
    has_spines: bool = Field(default=False, title='Has Spines')
    number_neurons: int = Field(..., title='Number Neurons')
    number_synapses: int = Field(..., title='Number Synapses')
    number_connections: int | None = Field(..., title='Number Connections')
    scale: CircuitScale
    build_category: CircuitBuildCategory
    root_circuit_id: UUID | None = Field(default=None, title='Root Circuit Id')
    atlas_id: UUID | None = Field(default=None, title='Atlas Id')


CircuitExtractionConfigGenerationRead = SimulationGenerationRead


CircuitExtractionConfigGenerationUserUpdate = SimulationGenerationUserUpdate


class CircuitExtractionExecutionCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used_ids: list[UUID] = Field(default=[], title='Used Ids')
    generated_ids: list[UUID] = Field(default=[], title='Generated Ids')
    status: CircuitExtractionExecutionStatus


class CircuitExtractionExecutionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    id: UUID = Field(..., title='Id')
    type: ActivityType | None = None
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used: list[NestedEntityRead] = Field(..., title='Used')
    generated: list[NestedEntityRead] = Field(..., title='Generated')
    status: CircuitExtractionExecutionStatus


class CircuitExtractionExecutionUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    start_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='Start Time'
    )
    end_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='End Time'
    )
    generated_ids: list[UUID] | NotSet | None = Field(
        default='<NOT_SET>', title='Generated Ids'
    )
    status: CircuitExtractionExecutionStatus | None = None


class ComputationallySynthesizedCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['computationally_synthesized'] = Field(
        ..., title='Generation Type'
    )
    method_type: str = Field(..., title='Method Type')


ConsortiumRead = OrganizationRead


class ContributionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    agent: AgentRead
    role: RoleRead
    entity: NestedEntityRead


class DerivationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    used_id: UUID = Field(..., title='Used Id')
    generated_id: UUID = Field(..., title='Generated Id')
    derivation_type: DerivationType


class DerivationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    used: BasicEntityRead
    generated: BasicEntityRead
    derivation_type: DerivationType


class DigitalReconstructionCellMorphologyProtocolCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['digital_reconstruction'] = Field(
        ..., title='Generation Type'
    )
    staining_type: StainingType | None = None
    slicing_thickness: float = Field(..., ge=0.0, title='Slicing Thickness')
    slicing_direction: SlicingDirectionType | None = None
    magnification: Magnification | None = Field(default=None, title='Magnification')
    tissue_shrinkage: TissueShrinkage | None = Field(
        default=None, title='Tissue Shrinkage'
    )
    corrected_for_shrinkage: bool | None = Field(
        default=None, title='Corrected For Shrinkage'
    )


class DigitalReconstructionCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['digital_reconstruction'] = Field(
        ..., title='Generation Type'
    )
    staining_type: StainingType | None = None
    slicing_thickness: float = Field(..., ge=0.0, title='Slicing Thickness')
    slicing_direction: SlicingDirectionType | None = None
    magnification: Magnification | None = Field(default=None, title='Magnification')
    tissue_shrinkage: TissueShrinkage | None = Field(
        default=None, title='Tissue Shrinkage'
    )
    corrected_for_shrinkage: bool | None = Field(
        default=None, title='Corrected For Shrinkage'
    )


class EMCellMeshCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    subject_id: UUID = Field(..., title='Subject Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    release_version: int = Field(..., title='Release Version')
    dense_reconstruction_cell_id: int = Field(..., title='Dense Reconstruction Cell Id')
    generation_method: EMCellMeshGenerationMethod
    level_of_detail: int = Field(..., title='Level Of Detail')
    generation_parameters: dict[str, Any] | None = Field(
        default=None, title='Generation Parameters'
    )
    mesh_type: EMCellMeshType
    em_dense_reconstruction_dataset_id: UUID = Field(
        ..., title='Em Dense Reconstruction Dataset Id'
    )


class EMDenseReconstructionDatasetCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    subject_id: UUID = Field(..., title='Subject Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    fixation: str | None = Field(default=None, title='Fixation')
    staining_type: str | None = Field(default=None, title='Staining Type')
    slicing_thickness: float | None = Field(default=None, title='Slicing Thickness')
    tissue_shrinkage: float | None = Field(default=None, title='Tissue Shrinkage')
    microscope_type: str | None = Field(default=None, title='Microscope Type')
    detector: str | None = Field(default=None, title='Detector')
    slicing_direction: SlicingDirectionType | None = None
    landmarks: str | None = Field(default=None, title='Landmarks')
    voltage: float | None = Field(default=None, title='Voltage')
    current: float | None = Field(default=None, title='Current')
    dose: float | None = Field(default=None, title='Dose')
    temperature: float | None = Field(default=None, title='Temperature')
    volume_resolution_x_nm: float = Field(..., title='Volume Resolution X Nm')
    volume_resolution_y_nm: float = Field(..., title='Volume Resolution Y Nm')
    volume_resolution_z_nm: float = Field(..., title='Volume Resolution Z Nm')
    release_url: AnyUrl = Field(..., title='Release Url')
    cave_client_url: AnyUrl = Field(..., title='Cave Client Url')
    cave_datastack: str = Field(..., title='Cave Datastack')
    precomputed_mesh_url: AnyUrl = Field(..., title='Precomputed Mesh Url')
    cell_identifying_property: str = Field(..., title='Cell Identifying Property')


class ETypeClassificationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    entity_id: UUID = Field(..., title='Entity Id')
    etype_class_id: UUID = Field(..., title='Etype Class Id')


class ElectricalCellRecordingCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    subject_id: UUID = Field(..., title='Subject Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ljp: float = Field(
        default=0.0,
        description='Correction applied to the voltage trace, in mV',
        title='Liquid Junction Potential',
    )
    recording_location: list[str] = Field(
        ...,
        description='Location on the cell where recording was performed, in hoc-compatible format.',
        title='Recording Location',
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title='Recording Type',
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title='Recording Origin',
    )
    temperature: float | None = Field(
        default=None,
        description='Temperature at which the recording was performed, in degrees Celsius.',
        title='Temperature',
    )
    comment: str | None = Field(
        default=None, description='Comment with further details.', title='Comment'
    )
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')


class ElectricalCellRecordingUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    license_id: UUID | str | None = Field(default='<NOT_SET>', title='License Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    subject_id: UUID | str | None = Field(default='<NOT_SET>', title='Subject Id')
    experiment_date: AwareDatetime | str | None = Field(
        default='<NOT_SET>', title='Experiment Date'
    )
    contact_email: str | None = Field(default='<NOT_SET>', title='Contact Email')
    published_in: str | None = Field(default='<NOT_SET>', title='Published In')
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    ljp: float | str | None = Field(default='<NOT_SET>', title='Ljp')
    recording_location: list[str] | str | None = Field(
        default='<NOT_SET>', title='Recording Location'
    )
    recording_type: ElectricalRecordingType | str | None = Field(
        default='<NOT_SET>', title='Recording Type'
    )
    recording_origin: ElectricalRecordingOrigin | str | None = Field(
        default='<NOT_SET>', title='Recording Origin'
    )
    temperature: float | str | None = Field(default='<NOT_SET>', title='Temperature')
    comment: str | None = Field(default='<NOT_SET>', title='Comment')
    legacy_id: list[str] | str | None = Field(default='<NOT_SET>', title='Legacy Id')


class ElectricalRecordingStimulusCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    dt: float | None = Field(default=None, title='Dt')
    injection_type: ElectricalRecordingStimulusType
    shape: ElectricalRecordingStimulusShape
    start_time: float | None = Field(default=None, title='Start Time')
    end_time: float | None = Field(default=None, title='End Time')
    recording_id: UUID = Field(..., title='Recording Id')


class ElectricalRecordingStimulusRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    dt: float | None = Field(default=None, title='Dt')
    injection_type: ElectricalRecordingStimulusType
    shape: ElectricalRecordingStimulusShape
    start_time: float | None = Field(default=None, title='Start Time')
    end_time: float | None = Field(default=None, title='End Time')
    recording_id: UUID = Field(..., title='Recording Id')


class EntityRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    id: UUID = Field(..., title='Id')
    type: str = Field(..., title='Type')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(..., title='Authorized Public')


class ExemplarMorphology(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    location: PointLocationBase | None = None
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')


class ExternalUrlRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    source: ExternalSource
    url: AnyUrl = Field(..., title='Url')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    source_name: str = Field(..., title='Source Name')


IonChannelModelingConfigGenerationRead = SimulationGenerationRead


IonChannelModelingConfigGenerationUserUpdate = SimulationGenerationUserUpdate


class IonChannelModelingExecutionCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used_ids: list[UUID] = Field(default=[], title='Used Ids')
    generated_ids: list[UUID] = Field(default=[], title='Generated Ids')
    status: IonChannelModelingExecutionStatus


class IonChannelModelingExecutionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    id: UUID = Field(..., title='Id')
    type: ActivityType | None = None
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used: list[NestedEntityRead] = Field(..., title='Used')
    generated: list[NestedEntityRead] = Field(..., title='Generated')
    status: IonChannelModelingExecutionStatus


class IonChannelModelingExecutionUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    start_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='Start Time'
    )
    end_time: AwareDatetime | NotSet | None = Field(
        default='<NOT_SET>', title='End Time'
    )
    generated_ids: list[UUID] | NotSet | None = Field(
        default='<NOT_SET>', title='Generated Ids'
    )
    status: IonChannelModelingExecutionStatus | None = None


class IonChannelRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    label: str = Field(..., title='Label')
    gene: str = Field(..., title='Gene')
    synonyms: list[str] = Field(..., title='Synonyms')


class ListResponseAnnotationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[AnnotationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseAssetRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[AssetRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseBasicEntityRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BasicEntityRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseBrainAtlasRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BrainAtlasRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseBrainAtlasRegionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BrainAtlasRegionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseBrainRegionHierarchyRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BrainRegionHierarchyRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseBrainRegionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[BrainRegionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseCalibrationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CalibrationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseCircuitExtractionConfigGenerationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CircuitExtractionConfigGenerationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseCircuitExtractionExecutionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CircuitExtractionExecutionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseConsortiumRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ConsortiumRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseContributionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ContributionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseETypeClassificationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ETypeClassificationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseElectricalRecordingStimulusRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ElectricalRecordingStimulusRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseExternalUrlRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ExternalUrlRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseIonChannelModelingConfigGenerationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[IonChannelModelingConfigGenerationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseIonChannelModelingExecutionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[IonChannelModelingExecutionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseIonChannelRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[IonChannelRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseLicenseRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[LicenseRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseOrganizationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[OrganizationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponsePersonRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[PersonRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponsePublicationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[PublicationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseRoleRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[RoleRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseScientificArtifactExternalUrlLinkRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ScientificArtifactExternalUrlLinkRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseScientificArtifactPublicationLinkRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ScientificArtifactPublicationLinkRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSimulationGenerationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SimulationGenerationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSpeciesRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SpeciesRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseStrainRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[StrainRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSubjectRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SubjectRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseValidationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ValidationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class MEModelCalibrationResultRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    holding_current: float = Field(..., title='Holding Current')
    threshold_current: float = Field(..., title='Threshold Current')
    rin: float | None = Field(default=None, title='Rin')
    calibrated_entity_id: UUID = Field(..., title='Calibrated Entity Id')


class MEModelCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    validation_status: ValidationStatus = Field(
        default_factory=lambda: ValidationStatus.model_validate('created')
    )
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    morphology_id: UUID = Field(..., title='Morphology Id')
    emodel_id: UUID = Field(..., title='Emodel Id')
    species_id: UUID = Field(..., title='Species Id')
    strain_id: UUID | None = Field(default=None, title='Strain Id')


class MEModelUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    validation_status: ValidationStatus | str | None = Field(
        default='<NOT_SET>', title='Validation Status'
    )
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    morphology_id: UUID | str | None = Field(default='<NOT_SET>', title='Morphology Id')
    emodel_id: UUID | str | None = Field(default='<NOT_SET>', title='Emodel Id')
    species_id: UUID | str | None = Field(default='<NOT_SET>', title='Species Id')
    strain_id: UUID | str | None = Field(default='<NOT_SET>', title='Strain Id')


class MTypeClassificationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    entity_id: UUID = Field(..., title='Entity Id')
    mtype_class_id: UUID = Field(..., title='Mtype Class Id')


class MeasurementItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: MeasurementStatistic | None = None
    unit: MeasurementUnit | None = None
    value: float | None = Field(..., title='Value')


class MeasurementKindCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    structural_domain: StructuralDomain
    measurement_items: list[MeasurementItem] = Field(..., title='Measurement Items')
    pref_label: str = Field(..., title='Pref Label')


MeasurementKindRead = MeasurementKindCreate


class MeasurementRecordCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: MeasurementStatistic
    unit: MeasurementUnit
    value: float = Field(..., title='Value')


class MeasurementRecordRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: MeasurementStatistic
    unit: MeasurementUnit
    value: float = Field(..., title='Value')
    id: int = Field(..., title='Id')


class ModifiedReconstructionCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['modified_reconstruction'] = Field(
        ..., title='Generation Type'
    )
    method_type: ModifiedMorphologyMethodType


class NestedAnalysisNotebookEnvironmentRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    runtime_info: RuntimeInfo | None = None


class NestedAnalysisNotebookTemplateRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    specifications: AnalysisNotebookTemplateSpecificationsOutput | None = None
    scale: AnalysisScale


class NestedContributionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    agent: AgentRead
    role: RoleRead


class NestedDigitalReconstructionCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    protocol_design: CellMorphologyProtocolDesign
    id: UUID = Field(..., title='Id')
    type: Literal['cell_morphology_protocol'] = Field(
        default='cell_morphology_protocol', title='Type'
    )
    generation_type: Literal['digital_reconstruction'] = Field(
        ..., title='Generation Type'
    )
    staining_type: StainingType | None = None
    slicing_thickness: float = Field(..., ge=0.0, title='Slicing Thickness')
    slicing_direction: SlicingDirectionType | None = None
    magnification: Magnification | None = Field(default=None, title='Magnification')
    tissue_shrinkage: TissueShrinkage | None = Field(
        default=None, title='Tissue Shrinkage'
    )
    corrected_for_shrinkage: bool | None = Field(
        default=None, title='Corrected For Shrinkage'
    )


class NestedMEModel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    validation_status: ValidationStatus = Field(
        default_factory=lambda: ValidationStatus.model_validate('created')
    )
    mtypes: list[AnnotationRead] | None = Field(..., title='Mtypes')
    etypes: list[AnnotationRead] | None = Field(..., title='Etypes')


class NestedSubjectRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    sex: Sex = Field(..., description='Sex of the subject')
    weight: Weight | None = Field(
        default=None, description='Weight in grams', title='Weight'
    )
    age_value: float | None = Field(
        default=None, description='Age value interval.', title='Age value'
    )
    age_min: float | None = Field(
        default=None, description='Minimum age range', title='Minimum age range'
    )
    age_max: float | None = Field(
        default=None, description='Maximum age range', title='Maximum age range'
    )
    age_period: AgePeriod | None = None
    species: NestedSpeciesRead
    strain: NestedStrainRead | None = None


class NeuronBlock(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    global_: list[dict[str, str | None]] = Field(
        default=[], alias='global', title='Global'
    )
    range: list[dict[str, str | None]] = Field(default=[], title='Range')
    useion: list[UseIon] = Field(default=[], title='Useion')
    nonspecific: list[dict[str, str | None]] = Field(default=[], title='Nonspecific')


class SimulationCampaignRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')
    entity_id: UUID = Field(..., title='Entity Id')
    simulations: list[NestedSimulationRead] = Field(..., title='Simulations')


class SimulationExecutionCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used_ids: list[UUID] = Field(default=[], title='Used Ids')
    generated_ids: list[UUID] = Field(default=[], title='Generated Ids')
    status: SimulationExecutionStatus


class SimulationExecutionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    id: UUID = Field(..., title='Id')
    type: ActivityType | None = None
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used: list[NestedEntityRead] = Field(..., title='Used')
    generated: list[NestedEntityRead] = Field(..., title='Generated')
    status: SimulationExecutionStatus


class SimulationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    simulation_campaign_id: UUID = Field(..., title='Simulation Campaign Id')
    entity_id: UUID = Field(..., title='Entity Id')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


class SimulationResultRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    simulation_id: UUID = Field(..., title='Simulation Id')


class SingleNeuronSimulationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    status: SingleNeuronSimulationStatus
    injection_location: list[str] = Field(..., title='Injection Location')
    recording_location: list[str] = Field(..., title='Recording Location')
    me_model_id: UUID = Field(..., title='Me Model Id')


class SingleNeuronSimulationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    type: EntityType | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    brain_region: BrainRegionRead
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    status: SingleNeuronSimulationStatus
    injection_location: list[str] = Field(..., title='Injection Location')
    recording_location: list[str] = Field(..., title='Recording Location')
    me_model: NestedMEModel


class SingleNeuronSynaptomeRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    type: EntityType | None = None
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    me_model: NestedMEModel
    brain_region: BrainRegionRead


class SingleNeuronSynaptomeSimulationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    type: EntityType | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    brain_region: BrainRegionRead
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    seed: int = Field(..., title='Seed')
    status: SingleNeuronSimulationStatus
    injection_location: list[str] = Field(..., title='Injection Location')
    recording_location: list[str] = Field(..., title='Recording Location')
    synaptome: NestedSynaptome


class ValidationResultRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    passed: bool = Field(..., title='Passed')
    validated_entity_id: UUID = Field(..., title='Validated Entity Id')


class AnalysisNotebookEnvironmentRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    runtime_info: RuntimeInfo | None = None


class AnalysisNotebookExecutionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    id: UUID = Field(..., title='Id')
    type: ActivityType | None = None
    start_time: AwareDatetime | None = Field(default=None, title='Start Time')
    end_time: AwareDatetime | None = Field(default=None, title='End Time')
    used: list[NestedEntityRead] = Field(..., title='Used')
    generated: list[NestedEntityRead] = Field(..., title='Generated')
    analysis_notebook_template: NestedAnalysisNotebookTemplateRead | None = None
    analysis_notebook_environment: NestedAnalysisNotebookEnvironmentRead


class AnalysisNotebookResultRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')


class AnalysisNotebookTemplateCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    specifications: AnalysisNotebookTemplateSpecificationsInput | None = None
    scale: AnalysisScale


class AnalysisNotebookTemplateRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    specifications: AnalysisNotebookTemplateSpecificationsOutput | None = None
    scale: AnalysisScale


class AssetAndPresignedURLS(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    asset: AssetRead
    files: dict[str, AnyUrl] = Field(..., title='Files')


class CellCompositionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')


class CellMorphologyProtocolCreate(
    RootModel[
        DigitalReconstructionCellMorphologyProtocolCreate
        | ModifiedReconstructionCellMorphologyProtocolCreate
        | ComputationallySynthesizedCellMorphologyProtocolCreate
        | PlaceholderCellMorphologyProtocolCreate
    ]
):
    root: (
        DigitalReconstructionCellMorphologyProtocolCreate
        | ModifiedReconstructionCellMorphologyProtocolCreate
        | ComputationallySynthesizedCellMorphologyProtocolCreate
        | PlaceholderCellMorphologyProtocolCreate
    ) = Field(..., discriminator='generation_type')


class CellMorphologyProtocolRead(
    RootModel[
        DigitalReconstructionCellMorphologyProtocolRead
        | ModifiedReconstructionCellMorphologyProtocolRead
        | ComputationallySynthesizedCellMorphologyProtocolRead
        | PlaceholderCellMorphologyProtocolRead
    ]
):
    root: (
        DigitalReconstructionCellMorphologyProtocolRead
        | ModifiedReconstructionCellMorphologyProtocolRead
        | ComputationallySynthesizedCellMorphologyProtocolRead
        | PlaceholderCellMorphologyProtocolRead
    ) = Field(..., discriminator='generation_type')


class CircuitExtractionCampaignRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


class CircuitExtractionConfigRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    circuit_id: UUID = Field(..., title='Circuit Id')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


class CircuitRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    license: LicenseRead | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    has_morphologies: bool = Field(default=False, title='Has Morphologies')
    has_point_neurons: bool = Field(default=False, title='Has Point Neurons')
    has_electrical_cell_models: bool = Field(
        default=False, title='Has Electrical Cell Models'
    )
    has_spines: bool = Field(default=False, title='Has Spines')
    number_neurons: int = Field(..., title='Number Neurons')
    number_synapses: int = Field(..., title='Number Synapses')
    number_connections: int | None = Field(..., title='Number Connections')
    scale: CircuitScale
    build_category: CircuitBuildCategory
    root_circuit_id: UUID | None = Field(default=None, title='Root Circuit Id')
    atlas_id: UUID | None = Field(default=None, title='Atlas Id')


class EMCellMeshRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    license: LicenseRead | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    release_version: int = Field(..., title='Release Version')
    dense_reconstruction_cell_id: int = Field(..., title='Dense Reconstruction Cell Id')
    generation_method: EMCellMeshGenerationMethod
    level_of_detail: int = Field(..., title='Level Of Detail')
    generation_parameters: dict[str, Any] | None = Field(
        default=None, title='Generation Parameters'
    )
    mesh_type: EMCellMeshType
    em_dense_reconstruction_dataset: BasicEntityRead


class EMDenseReconstructionDatasetRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    license: LicenseRead | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    protocol_document: ProtocolDocument | None = Field(
        default=None, title='Protocol Document'
    )
    fixation: str | None = Field(default=None, title='Fixation')
    staining_type: str | None = Field(default=None, title='Staining Type')
    slicing_thickness: float | None = Field(default=None, title='Slicing Thickness')
    tissue_shrinkage: float | None = Field(default=None, title='Tissue Shrinkage')
    microscope_type: str | None = Field(default=None, title='Microscope Type')
    detector: str | None = Field(default=None, title='Detector')
    slicing_direction: SlicingDirectionType | None = None
    landmarks: str | None = Field(default=None, title='Landmarks')
    voltage: float | None = Field(default=None, title='Voltage')
    current: float | None = Field(default=None, title='Current')
    dose: float | None = Field(default=None, title='Dose')
    temperature: float | None = Field(default=None, title='Temperature')
    volume_resolution_x_nm: float = Field(..., title='Volume Resolution X Nm')
    volume_resolution_y_nm: float = Field(..., title='Volume Resolution Y Nm')
    volume_resolution_z_nm: float = Field(..., title='Volume Resolution Z Nm')
    release_url: AnyUrl = Field(..., title='Release Url')
    cave_client_url: AnyUrl = Field(..., title='Cave Client Url')
    cave_datastack: str = Field(..., title='Cave Datastack')
    precomputed_mesh_url: AnyUrl = Field(..., title='Precomputed Mesh Url')
    cell_identifying_property: str = Field(..., title='Cell Identifying Property')


class EModelRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    type: EntityType | None = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    iteration: str = Field(..., title='Iteration')
    score: float = Field(..., title='Score')
    seed: int = Field(..., title='Seed')
    id: UUID = Field(..., title='Id')
    species: NestedSpeciesRead
    strain: NestedStrainRead | None = None
    brain_region: BrainRegionRead
    mtypes: list[AnnotationRead] | None = Field(..., title='Mtypes')
    etypes: list[AnnotationRead] | None = Field(..., title='Etypes')
    exemplar_morphology: ExemplarMorphology


class ElectricalCellRecordingRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    license: LicenseRead | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ljp: float = Field(
        default=0.0,
        description='Correction applied to the voltage trace, in mV',
        title='Liquid Junction Potential',
    )
    recording_location: list[str] = Field(
        ...,
        description='Location on the cell where recording was performed, in hoc-compatible format.',
        title='Recording Location',
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title='Recording Type',
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title='Recording Origin',
    )
    temperature: float | None = Field(
        default=None,
        description='Temperature at which the recording was performed, in degrees Celsius.',
        title='Temperature',
    )
    comment: str | None = Field(
        default=None, description='Comment with further details.', title='Comment'
    )
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')
    stimuli: list[NestedElectricalRecordingStimulusRead] | None = Field(
        default=None,
        description='List of stimuli applied to the cell with their respective time steps',
        title='Electrical Recording Stimuli',
    )
    etypes: list[AnnotationRead] | None = Field(..., title='Etypes')


class ExperimentalBoutonDensityCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    subject_id: UUID = Field(..., title='Subject Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    legacy_id: str | None = Field(..., title='Legacy Id')
    measurements: list[MeasurementRecordCreate] = Field(..., title='Measurements')


class ExperimentalBoutonDensityRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    subject: NestedSubjectRead
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    type: EntityType | None = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license: LicenseRead | None = None
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    measurements: list[MeasurementRecordRead] = Field(..., title='Measurements')
    assets: list[AssetRead] = Field(..., title='Assets')
    brain_region: BrainRegionRead
    mtypes: list[AnnotationRead] | None = Field(..., title='Mtypes')


class ExperimentalBoutonDensityUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    license_id: UUID | str | None = Field(default='<NOT_SET>', title='License Id')
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    subject_id: UUID | str | None = Field(default='<NOT_SET>', title='Subject Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    legacy_id: str | None = Field(default='<NOT_SET>', title='Legacy Id')
    measurements: list[MeasurementRecordCreate] | str | None = Field(
        default='<NOT_SET>', title='Measurements'
    )


ExperimentalNeuronDensityCreate = ExperimentalBoutonDensityCreate


class ExperimentalNeuronDensityRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    subject: NestedSubjectRead
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    type: EntityType | None = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license: LicenseRead | None = None
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    measurements: list[MeasurementRecordRead] = Field(..., title='Measurements')
    assets: list[AssetRead] = Field(..., title='Assets')
    brain_region: BrainRegionRead
    mtypes: list[AnnotationRead] | None = Field(..., title='Mtypes')
    etypes: list[AnnotationRead] | None = Field(..., title='Etypes')


ExperimentalNeuronDensityUserUpdate = ExperimentalBoutonDensityUserUpdate


class ExperimentalSynapsesPerConnectionCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    subject_id: UUID = Field(..., title='Subject Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    legacy_id: str | None = Field(..., title='Legacy Id')
    measurements: list[MeasurementRecordCreate] = Field(..., title='Measurements')
    pre_mtype_id: UUID = Field(..., title='Pre Mtype Id')
    post_mtype_id: UUID = Field(..., title='Post Mtype Id')
    pre_region_id: UUID = Field(..., title='Pre Region Id')
    post_region_id: UUID = Field(..., title='Post Region Id')


class ExperimentalSynapsesPerConnectionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    subject: NestedSubjectRead
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    type: EntityType | None = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license: LicenseRead | None = None
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    measurements: list[MeasurementRecordRead] = Field(..., title='Measurements')
    assets: list[AssetRead] = Field(..., title='Assets')
    brain_region: BrainRegionRead
    pre_mtype: AnnotationRead
    post_mtype: AnnotationRead
    pre_region: BrainRegionRead
    post_region: BrainRegionRead


class ExperimentalSynapsesPerConnectionUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    license_id: UUID | str | None = Field(default='<NOT_SET>', title='License Id')
    name: str | None = Field(default='<NOT_SET>', title='Name')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    subject_id: UUID | str | None = Field(default='<NOT_SET>', title='Subject Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    legacy_id: str | None = Field(default='<NOT_SET>', title='Legacy Id')
    measurements: list[MeasurementRecordCreate] | str | None = Field(
        default='<NOT_SET>', title='Measurements'
    )
    pre_mtype_id: UUID | str | None = Field(default='<NOT_SET>', title='Pre Mtype Id')
    post_mtype_id: UUID | str | None = Field(default='<NOT_SET>', title='Post Mtype Id')
    pre_region_id: UUID | str | None = Field(default='<NOT_SET>', title='Pre Region Id')
    post_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Post Region Id'
    )


class IonChannelModelCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    authorized_public: bool = Field(default=False, title='Authorized Public')
    license_id: UUID | None = Field(default=None, title='License Id')
    brain_region_id: UUID = Field(..., title='Brain Region Id')
    subject_id: UUID = Field(..., title='Subject Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    nmodl_suffix: str = Field(..., title='Nmodl Suffix')
    is_ljp_corrected: bool = Field(default=False, title='Is Ljp Corrected')
    is_temperature_dependent: bool = Field(
        default=False, title='Is Temperature Dependent'
    )
    temperature_celsius: int = Field(..., title='Temperature Celsius')
    is_stochastic: bool = Field(default=False, title='Is Stochastic')
    neuron_block: NeuronBlock


class IonChannelModelExpanded(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    license: LicenseRead | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    nmodl_suffix: str = Field(..., title='Nmodl Suffix')
    is_ljp_corrected: bool = Field(default=False, title='Is Ljp Corrected')
    is_temperature_dependent: bool = Field(
        default=False, title='Is Temperature Dependent'
    )
    temperature_celsius: int = Field(..., title='Temperature Celsius')
    is_stochastic: bool = Field(default=False, title='Is Stochastic')
    neuron_block: NeuronBlock


class IonChannelModelRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    nmodl_suffix: str = Field(..., title='Nmodl Suffix')
    is_ljp_corrected: bool = Field(default=False, title='Is Ljp Corrected')
    is_temperature_dependent: bool = Field(
        default=False, title='Is Temperature Dependent'
    )
    temperature_celsius: int = Field(..., title='Temperature Celsius')
    is_stochastic: bool = Field(default=False, title='Is Stochastic')
    neuron_block: NeuronBlock


class IonChannelModelUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    license_id: UUID | str | None = Field(default='<NOT_SET>', title='License Id')
    brain_region_id: UUID | str | None = Field(
        default='<NOT_SET>', title='Brain Region Id'
    )
    subject_id: UUID | str | None = Field(default='<NOT_SET>', title='Subject Id')
    experiment_date: AwareDatetime | str | None = Field(
        default='<NOT_SET>', title='Experiment Date'
    )
    contact_email: str | None = Field(default='<NOT_SET>', title='Contact Email')
    published_in: str | None = Field(default='<NOT_SET>', title='Published In')
    description: str | None = Field(default='<NOT_SET>', title='Description')
    name: str | None = Field(default='<NOT_SET>', title='Name')
    nmodl_suffix: str | None = Field(default='<NOT_SET>', title='Nmodl Suffix')
    is_ljp_corrected: bool | str | None = Field(
        default='<NOT_SET>', title='Is Ljp Corrected'
    )
    is_temperature_dependent: bool | str | None = Field(
        default='<NOT_SET>', title='Is Temperature Dependent'
    )
    temperature_celsius: int | str | None = Field(
        default='<NOT_SET>', title='Temperature Celsius'
    )
    is_stochastic: bool | str | None = Field(default='<NOT_SET>', title='Is Stochastic')
    neuron_block: NeuronBlock | str | None = Field(
        default='<NOT_SET>', title='Neuron Block'
    )


class IonChannelModelWAssets(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    nmodl_suffix: str = Field(..., title='Nmodl Suffix')
    is_ljp_corrected: bool = Field(default=False, title='Is Ljp Corrected')
    is_temperature_dependent: bool = Field(
        default=False, title='Is Temperature Dependent'
    )
    temperature_celsius: int = Field(..., title='Temperature Celsius')
    is_stochastic: bool = Field(default=False, title='Is Stochastic')
    neuron_block: NeuronBlock


class IonChannelModelingCampaignRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')
    input_recordings: list[NestedIonChannelRecordingRead] = Field(
        ..., title='Input Recordings'
    )
    ion_channel_modeling_configs: list[NestedIonChannelModelingConfigRead] = Field(
        ..., title='Ion Channel Modeling Configs'
    )


class IonChannelModelingConfigRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    id: UUID = Field(..., title='Id')
    type: EntityType | None = None
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ion_channel_modeling_campaign_id: UUID = Field(
        ..., title='Ion Channel Modeling Campaign Id'
    )
    scan_parameters: dict[str, Any] = Field(..., title='Scan Parameters')


class IonChannelRecordingRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    license: LicenseRead | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    ljp: float = Field(
        default=0.0,
        description='Correction applied to the voltage trace, in mV',
        title='Liquid Junction Potential',
    )
    recording_location: list[str] = Field(
        ...,
        description='Location on the cell where recording was performed, in hoc-compatible format.',
        title='Recording Location',
    )
    recording_type: ElectricalRecordingType = Field(
        ...,
        description="Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]",
        title='Recording Type',
    )
    recording_origin: ElectricalRecordingOrigin = Field(
        ...,
        description="Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]",
        title='Recording Origin',
    )
    temperature: float | None = Field(
        default=None,
        description='Temperature at which the recording was performed, in degrees Celsius.',
        title='Temperature',
    )
    comment: str | None = Field(
        default=None, description='Comment with further details.', title='Comment'
    )
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')
    cell_line: str = Field(
        ...,
        description='The cell line from which the ion channel was recorded',
        title='Cell Line',
    )
    ion_channel: NestedIonChannelRead = Field(
        ..., description='The ion channel that was recorded from', title='Ion Channel'
    )
    stimuli: list[NestedElectricalRecordingStimulusRead] | None = Field(
        default=None,
        description='List of stimuli applied to the cell with their respective time steps',
        title='Electrical Recording Stimuli',
    )


class ListResponseAnalysisNotebookEnvironmentRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[AnalysisNotebookEnvironmentRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseAnalysisNotebookExecutionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[AnalysisNotebookExecutionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseAnalysisNotebookResultRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[AnalysisNotebookResultRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseAnalysisNotebookTemplateRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[AnalysisNotebookTemplateRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseCellCompositionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CellCompositionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseCellMorphologyProtocolRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CellMorphologyProtocolRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseCircuitExtractionCampaignRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CircuitExtractionCampaignRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseCircuitExtractionConfigRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CircuitExtractionConfigRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseCircuitRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CircuitRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseEMCellMeshRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[EMCellMeshRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseEMDenseReconstructionDatasetRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[EMDenseReconstructionDatasetRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseElectricalCellRecordingRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ElectricalCellRecordingRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseExperimentalBoutonDensityRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ExperimentalBoutonDensityRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseExperimentalNeuronDensityRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ExperimentalNeuronDensityRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseExperimentalSynapsesPerConnectionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ExperimentalSynapsesPerConnectionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseIonChannelModelExpanded(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[IonChannelModelExpanded] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseIonChannelModelingCampaignRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[IonChannelModelingCampaignRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseIonChannelModelingConfigRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[IonChannelModelingConfigRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseIonChannelRecordingRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[IonChannelRecordingRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseMEModelCalibrationResultRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MEModelCalibrationResultRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseMTypeClassificationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MTypeClassificationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSimulationCampaignRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SimulationCampaignRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSimulationExecutionRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SimulationExecutionRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSimulationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SimulationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSimulationResultRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SimulationResultRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSingleNeuronSimulationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SingleNeuronSimulationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSingleNeuronSynaptomeRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SingleNeuronSynaptomeRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseSingleNeuronSynaptomeSimulationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[SingleNeuronSynaptomeSimulationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseValidationResultRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[ValidationResultRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class MeasurementAnnotationCreate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    entity_id: UUID = Field(..., title='Entity Id')
    entity_type: MeasurableEntity
    measurement_kinds: list[MeasurementKindCreate] = Field(
        ..., title='Measurement Kinds'
    )


class MeasurementAnnotationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    id: UUID = Field(..., title='Id')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    entity_id: UUID = Field(..., title='Entity Id')
    entity_type: MeasurableEntity
    measurement_kinds: list[MeasurementKindRead] = Field(..., title='Measurement Kinds')


class MeasurementAnnotationUserUpdate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    entity_id: UUID | str | None = Field(default='<NOT_SET>', title='Entity Id')
    entity_type: MeasurableEntity | str | None = Field(
        default='<NOT_SET>', title='Entity Type'
    )
    measurement_kinds: list[MeasurementKindCreate] | str | None = Field(
        default='<NOT_SET>', title='Measurement Kinds'
    )


class NestedCellMorphologyProtocolRead(
    RootModel[
        NestedDigitalReconstructionCellMorphologyProtocolRead
        | NestedModifiedReconstructionCellMorphologyProtocolRead
        | NestedComputationallySynthesizedCellMorphologyProtocolRead
        | NestedPlaceholderCellMorphologyProtocolRead
    ]
):
    root: (
        NestedDigitalReconstructionCellMorphologyProtocolRead
        | NestedModifiedReconstructionCellMorphologyProtocolRead
        | NestedComputationallySynthesizedCellMorphologyProtocolRead
        | NestedPlaceholderCellMorphologyProtocolRead
    ) = Field(..., discriminator='generation_type')


class CellMorphologyAnnotationExpandedRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    license: LicenseRead | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    location: PointLocationBase | None = None
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')
    mtypes: list[AnnotationRead] | None = Field(..., title='Mtypes')
    cell_morphology_protocol: NestedCellMorphologyProtocolRead | None = None
    measurement_annotation: MeasurementAnnotationRead | None = None


class CellMorphologyRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    assets: list[AssetRead] = Field(..., title='Assets')
    license: LicenseRead | None = None
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    brain_region: BrainRegionRead
    subject: NestedSubjectRead
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    type: EntityType | None = None
    id: UUID = Field(..., title='Id')
    experiment_date: AwareDatetime | None = Field(default=None, title='Experiment Date')
    contact_email: str | None = Field(default=None, title='Contact Email')
    published_in: str | None = Field(default=None, title='Published In')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    location: PointLocationBase | None = None
    legacy_id: list[str] | None = Field(default=None, title='Legacy Id')
    mtypes: list[AnnotationRead] | None = Field(..., title='Mtypes')
    cell_morphology_protocol: NestedCellMorphologyProtocolRead | None = None


class EModelReadExpanded(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    assets: list[AssetRead] = Field(..., title='Assets')
    type: EntityType | None = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    description: str = Field(..., title='Description')
    name: str = Field(..., title='Name')
    iteration: str = Field(..., title='Iteration')
    score: float = Field(..., title='Score')
    seed: int = Field(..., title='Seed')
    id: UUID = Field(..., title='Id')
    species: NestedSpeciesRead
    strain: NestedStrainRead | None = None
    brain_region: BrainRegionRead
    mtypes: list[AnnotationRead] | None = Field(..., title='Mtypes')
    etypes: list[AnnotationRead] | None = Field(..., title='Etypes')
    exemplar_morphology: ExemplarMorphology
    ion_channel_models: list[IonChannelModelWAssets] = Field(
        ..., title='Ion Channel Models'
    )


class ListResponseCellMorphologyRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[CellMorphologyRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseEModelReadExpanded(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[EModelReadExpanded] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class ListResponseMeasurementAnnotationRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MeasurementAnnotationRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


class MEModelRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    contributions: list[NestedContributionRead] | None = Field(
        ..., title='Contributions'
    )
    created_by: NestedPersonRead
    updated_by: NestedPersonRead
    type: EntityType | None = None
    authorized_project_id: UUID4 = Field(..., title='Authorized Project Id')
    authorized_public: bool = Field(default=False, title='Authorized Public')
    creation_date: AwareDatetime = Field(..., title='Creation Date')
    update_date: AwareDatetime = Field(..., title='Update Date')
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    validation_status: ValidationStatus = Field(
        default_factory=lambda: ValidationStatus.model_validate('created')
    )
    id: UUID = Field(..., title='Id')
    species: NestedSpeciesRead
    strain: NestedStrainRead | None = None
    brain_region: BrainRegionRead
    mtypes: list[AnnotationRead] | None = Field(..., title='Mtypes')
    etypes: list[AnnotationRead] | None = Field(..., title='Etypes')
    morphology: CellMorphologyRead
    emodel: EModelRead
    calibration_result: MEModelCalibrationResultRead | None = None


class ReadOneCellMorphologyIdGetResponse(
    RootModel[CellMorphologyRead | CellMorphologyAnnotationExpandedRead]
):
    root: CellMorphologyRead | CellMorphologyAnnotationExpandedRead = Field(
        ..., title='Response Read One Cell Morphology  Id   Get'
    )


class ListResponseMEModelRead(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    data: list[MEModelRead] = Field(..., title='Data')
    pagination: PaginationResponse
    facets: Facets | None = None


HierarchyNode.model_rebuild()
