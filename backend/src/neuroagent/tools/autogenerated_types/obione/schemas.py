# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2025-05-19T12:31:02+00:00

from __future__ import annotations

from typing import Any, Optional, Union

from fastapi import FastAPI, Header
from pydantic import BaseModel, conint

from .models import (
    BasicConnectivityPlots,
    CircuitExtractions,
    ConnectivityMatrixExtractions,
    FieldDatamodelCodeGeneratorRootSpecialGetResponse,
    FolderCompressions,
    HealthGetResponse,
    HTTPValidationError,
    MorphologyContainerizationsForm,
    MorphologyLocationsForm,
    MorphologyMetricsForm,
    MorphologyMetricsOutput,
    ProjectId,
    SimulationsForm,
    SingleBlockEntityTestForm,
    SingleBlockGenerateTestForm,
    VersionGetResponse,
    VirtualLabId,
)


class RootGetParams(BaseModel):
    """Root."""


class NeuronMorphologyMetricsEndpointDeclaredNeuronMorphologyMetricsReconstructionMorphologyIdGetParams(
    BaseModel
):
    """Neuron morphology metrics."""

    reconstruction_morphology_id: str
    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')


class EndpointGeneratedBasicConnectivityPlotsRunGridPostParams(BaseModel):
    """Basic Connectivity Plots."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: BasicConnectivityPlots = ...


class EndpointGeneratedCircuitExtractionsRunGridPostParams(BaseModel):
    """Circuit Extraction."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: CircuitExtractions = ...


class EndpointGeneratedConnectivityMatrixExtractionsRunGridPostParams(BaseModel):
    """Connectivity Matrix Extraction."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: ConnectivityMatrixExtractions = ...


class EndpointGeneratedFolderCompressionsRunGridPostParams(BaseModel):
    """Folder Compression."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: FolderCompressions = ...


class EndpointGeneratedMorphologyContainerizationsRunGridPostParams(BaseModel):
    """Morphology Containerization."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: MorphologyContainerizationsForm = ...


class EndpointGeneratedMorphologyLocationsRunGridPostParams(BaseModel):
    """Point locations on neurite skeletons."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: MorphologyLocationsForm = ...


class EndpointGeneratedMorphologyMetricsRunGridPostParams(BaseModel):
    """Morphology Metrics."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: MorphologyMetricsForm = ...


class EndpointGeneratedSimulationsGenerateGridPostParams(BaseModel):
    """Simulation Campaign."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: SimulationsForm = ...


class EndpointGeneratedSingleBlockEntityTestRunGridPostParams(BaseModel):
    """Single Block Entity Test."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: SingleBlockEntityTestForm = ...


class EndpointGeneratedSingleBlockGenerateTestRunGridPostParams(BaseModel):
    """Single Block Generate Test."""

    virtual_lab_id: Optional[VirtualLabId] = Header(None, alias='virtual-lab-id')
    project_id: Optional[ProjectId] = Header(None, alias='project-id')
    body: SingleBlockGenerateTestForm = ...


class HealthHealthGetParams(BaseModel):
    """Health."""


class VersionVersionGetParams(BaseModel):
    """Version."""
