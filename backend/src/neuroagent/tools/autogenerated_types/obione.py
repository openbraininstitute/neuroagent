# generated by datamodel-codegen:
#   filename:  https://staging.openbraininstitute.org/api/obi-one/openapi.json
#   timestamp: 2025-06-23T14:04:51+00:00

from __future__ import annotations

from pathlib import Path
from typing import Any, Literal

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Circuit(BaseModel):
    type: Literal['Circuit'] = Field(..., title='Type')
    name: str = Field(..., title='Name')
    path: str = Field(..., title='Path')
    matrix_path: str | None = Field(default=None, title='Matrix Path')


class ClusteredGroupedMorphologyLocations(BaseModel):
    type: Literal['ClusteredGroupedMorphologyLocations'] = Field(..., title='Type')
    random_seed: int | list[int] | None = Field(
        default=0,
        description='Seed for the random generation of locations',
        title='Random Seed',
    )
    number_of_locations: int | list[int] | None = Field(
        default=1,
        description='Number of locations to generate on morphology',
        title='Number Of Locations',
    )
    section_types: list[int] | list[list[int]] | None = Field(
        default=None,
        description='Types of sections to generate locations on. 2: axon, 3: basal, 4: apical',
        title='Section Types',
    )
    n_groups: int | list[int] | None = Field(
        default=1,
        description='Number of groups of locations to             generate',
        title='N Groups',
    )
    n_clusters: int | list[int] = Field(
        ..., description='Number of location clusters to generate', title='N Clusters'
    )
    cluster_max_distance: float | list[float] = Field(
        ...,
        description='Maximum distance in um of generated locations from the center of their             cluster',
        title='Cluster Max Distance',
    )


class ClusteredMorphologyLocations(BaseModel):
    type: Literal['ClusteredMorphologyLocations'] = Field(..., title='Type')
    random_seed: int | list[int] | None = Field(
        default=0,
        description='Seed for the random generation of locations',
        title='Random Seed',
    )
    number_of_locations: int | list[int] | None = Field(
        default=1,
        description='Number of locations to generate on morphology',
        title='Number Of Locations',
    )
    section_types: list[int] | list[list[int]] | None = Field(
        default=None,
        description='Types of sections to generate locations on. 2: axon, 3: basal, 4: apical',
        title='Section Types',
    )
    n_clusters: int | list[int] = Field(
        ..., description='Number of location clusters to generate', title='N Clusters'
    )
    cluster_max_distance: float | list[float] = Field(
        ...,
        description='Maximum distance in um of generated locations from the center of their             cluster',
        title='Cluster Max Distance',
    )


class ClusteredPathDistanceMorphologyLocations(BaseModel):
    type: Literal['ClusteredPathDistanceMorphologyLocations'] = Field(..., title='Type')
    random_seed: int | list[int] | None = Field(
        default=0,
        description='Seed for the random generation of locations',
        title='Random Seed',
    )
    number_of_locations: int | list[int] | None = Field(
        default=1,
        description='Number of locations to generate on morphology',
        title='Number Of Locations',
    )
    section_types: list[int] | list[list[int]] | None = Field(
        default=None,
        description='Types of sections to generate locations on. 2: axon, 3: basal, 4: apical',
        title='Section Types',
    )
    n_clusters: int | list[int] = Field(
        ..., description='Number of location clusters to generate', title='N Clusters'
    )
    cluster_max_distance: float | list[float] = Field(
        ...,
        description='Maximum distance in um of generated locations from the center of their             cluster',
        title='Cluster Max Distance',
    )
    path_dist_mean: float | list[float] = Field(
        ...,
        description='Mean of a Gaussian, defined on soma path distance in um. Used to determine             locations.',
        title='Path Dist Mean',
    )
    path_dist_sd: float | list[float] = Field(
        ...,
        description='SD of a Gaussian, defined on soma path distance in um. Used to determine             locations.',
        title='Path Dist Sd',
    )
    n_groups_per_cluster: int | list[int] | None = Field(
        default=1,
        description='Number of conceptual groups per location cluster to generate',
        title='N Groups Per Cluster',
    )


class NodeSet(RootModel[str]):
    root: str = Field(..., min_length=1)


class NodeSets(RootModel[list[NodeSet]]):
    root: list[NodeSet] = Field(..., min_length=1, title='Node Sets')


class NodeSets1ItemItem(NodeSet):
    pass


class NodeSets1Item(RootModel[list[NodeSets1ItemItem]]):
    root: list[NodeSets1ItemItem] = Field(..., min_length=1)


class NodeSets1(RootModel[list[NodeSets1Item]]):
    root: list[NodeSets1Item] = Field(..., min_length=1, title='Node Sets')


class CombinedNeuronSet(BaseModel):
    type: Literal['CombinedNeuronSet'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    node_population: str | list[str] | None = Field(
        default=None, title='Node Population'
    )
    node_sets: NodeSets | NodeSets1 = Field(..., title='Node Sets')


class ElectrophysiologyMetricsOutput(BaseModel):
    feature_dict: dict[str, dict[str, Any]] = Field(
        ...,
        description="Mapping of feature name to its metric values. Each entry contains at least an 'avg', and optionally 'unit', 'num_traces', etc.",
        title='Feature Dict',
    )


class Info(BaseModel):
    type: Literal['Info'] = Field(..., title='Type')
    campaign_name: str | None = Field(
        default='No name provided',
        description='The users name for the simulation',
        title='Campaign Name',
    )
    campaign_description: str | None = Field(
        default='No description provided',
        description='Description of the simulation',
        title='Campaign Description',
    )


class MorphologyLocationsBlock(BaseModel):
    type: Literal['MorphologyLocationsBlock'] = Field(..., title='Type')
    random_seed: int | list[int] | None = Field(
        default=0,
        description='Seed for the random generation of locations',
        title='Random Seed',
    )
    number_of_locations: int | list[int] | None = Field(
        default=1,
        description='Number of locations to generate on morphology',
        title='Number Of Locations',
    )
    section_types: list[int] | list[list[int]] | None = Field(
        default=None,
        description='Types of sections to generate locations on. 2: axon, 3: basal, 4: apical',
        title='Section Types',
    )


class MorphologyMetricsOutput(BaseModel):
    aspect_ratio: float = Field(
        ...,
        description='Calculates the min/max ratio of the principal direction extents                 along the plane.',
        title='aspect_ratio',
    )
    circularity: float = Field(
        ...,
        description='Calculates the circularity of the morphology points along the plane.',
        title='circularity',
    )
    length_fraction_above_soma: float = Field(
        ...,
        description='Returns the length fraction of the segments that have their midpoints                             higher than the soma.',
        title='length_fraction_above_soma',
    )
    max_radial_distance: float = Field(
        ...,
        description='Get the maximum radial distances of the termination sections.',
        title='max_radial_distance',
    )
    number_of_neurites: int = Field(
        ..., description='Number of neurites in a morph.', title='number_of_neurites'
    )
    soma_radius: float = Field(
        ...,
        description='The radius of the soma in micrometers.',
        title='soma_radius [μm]',
    )
    soma_surface_area: float = Field(
        ...,
        description='The surface area of the soma in square micrometers.',
        title='soma_surface_area [μm^2]',
    )


class NamedPath(BaseModel):
    type: Literal['NamedPath'] = Field(..., title='Type')
    name: str = Field(..., title='Name')
    path: str = Field(..., title='Path')


class NamedTuple(BaseModel):
    type: Literal['NamedTuple'] = Field(..., title='Type')
    name: str = Field(..., title='Name')
    elements: list = Field(..., title='Elements')


class NeuronPropertyFilter(BaseModel):
    type: Literal['NeuronPropertyFilter'] = Field(..., title='Type')
    filter_dict: dict[str, list] | None = Field(
        default={},
        description="Filter dictionary. Note as this is NOT a Block and the list here is                     not to support multi-dimensional parameters but to support a key-value pair                     with multiple values i.e. {'layer': ['2', '3']}}",
        title='Filter Dict',
    )


class NeuronSetReference(BaseModel):
    type: Literal['NeuronSetReference'] = Field(..., title='Type')
    block_dict_name: str | None = Field(default='', title='Block Dict Name')
    block_name: str = Field(..., title='Block Name')


class PathDistanceMorphologyLocations(BaseModel):
    type: Literal['PathDistanceMorphologyLocations'] = Field(..., title='Type')
    random_seed: int | list[int] | None = Field(
        default=0,
        description='Seed for the random generation of locations',
        title='Random Seed',
    )
    number_of_locations: int | list[int] | None = Field(
        default=1,
        description='Number of locations to generate on morphology',
        title='Number Of Locations',
    )
    section_types: list[int] | list[list[int]] | None = Field(
        default=None,
        description='Types of sections to generate locations on. 2: axon, 3: basal, 4: apical',
        title='Section Types',
    )
    path_dist_mean: float | list[float] = Field(
        ...,
        description='Mean of a Gaussian, defined on soma path distance in um. Used to determine             locations.',
        title='Path Dist Mean',
    )
    path_dist_tolerance: float | list[float] = Field(
        ...,
        description='Amount of deviation in um from mean path distance that is tolerated. Must be             > 1.0',
        title='Path Dist Tolerance',
    )


class NodeSet1(RootModel[str]):
    root: str = Field(..., min_length=1, title='Node Set')


class NodeSet2Item(NodeSet):
    pass


class NodeSet2(RootModel[list[NodeSet2Item]]):
    root: list[NodeSet2Item] = Field(..., min_length=1, title='Node Set')


class PredefinedNeuronSet(BaseModel):
    type: Literal['PredefinedNeuronSet'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    node_population: str | list[str] | None = Field(
        default=None, title='Node Population'
    )
    node_set: NodeSet1 | NodeSet2 = Field(..., title='Node Set')


class NodeSet3(NodeSet):
    pass


class NodeSets2Item(NodeSet):
    pass


class NodeSets2(RootModel[list[list[NodeSets2Item]]]):
    root: list[list[NodeSets2Item]] = Field(..., min_length=1, title='Node Sets')


class PropertyNeuronSet(BaseModel):
    type: Literal['PropertyNeuronSet'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    node_population: str | list[str] | None = Field(
        default=None, title='Node Population'
    )
    property_filter: NeuronPropertyFilter | list[NeuronPropertyFilter] | None = Field(
        default=[],
        description='NeuronPropertyFilter object or list of NeuronPropertyFilter objects',
        title='Property Filter',
    )
    node_sets: list[NodeSet3] | NodeSets2 | None = Field(default=[], title='Node Sets')


class RandomGroupedMorphologyLocations(BaseModel):
    type: Literal['RandomGroupedMorphologyLocations'] = Field(..., title='Type')
    random_seed: int | list[int] | None = Field(
        default=0,
        description='Seed for the random generation of locations',
        title='Random Seed',
    )
    number_of_locations: int | list[int] | None = Field(
        default=1,
        description='Number of locations to generate on morphology',
        title='Number Of Locations',
    )
    section_types: list[int] | list[list[int]] | None = Field(
        default=None,
        description='Types of sections to generate locations on. 2: axon, 3: basal, 4: apical',
        title='Section Types',
    )
    n_groups: int | list[int] | None = Field(
        default=1,
        description='Number of groups of locations to             generate',
        title='N Groups',
    )


class RandomMorphologyLocations(BaseModel):
    type: Literal['RandomMorphologyLocations'] = Field(..., title='Type')
    random_seed: int | list[int] | None = Field(
        default=0,
        description='Seed for the random generation of locations',
        title='Random Seed',
    )
    number_of_locations: int | list[int] | None = Field(
        default=1,
        description='Number of locations to generate on morphology',
        title='Number Of Locations',
    )
    section_types: list[int] | list[list[int]] | None = Field(
        default=None,
        description='Types of sections to generate locations on. 2: axon, 3: basal, 4: apical',
        title='Section Types',
    )


class ReconstructionMorphologyFromID(BaseModel):
    type: Literal['ReconstructionMorphologyFromID'] = Field(..., title='Type')
    id_str: str = Field(
        ..., description='ID of the entity in string format.', title='Id Str'
    )


class RegularTimestamps(BaseModel):
    type: Literal['RegularTimestamps'] = Field(..., title='Type')
    start_time: float | list[float] = Field(..., title='Start Time')
    number_of_repetitions: int | list[int] = Field(..., title='Number Of Repetitions')
    interval: float | list[float] = Field(..., title='Interval')


class NodeSets3Item(NodeSet):
    pass


class NodeSets3(RootModel[list[list[NodeSets3Item]]]):
    root: list[list[NodeSets3Item]] = Field(..., min_length=1, title='Node Sets')


class SimplexMembershipBasedNeuronSet(BaseModel):
    type: Literal['SimplexMembershipBasedNeuronSet'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    node_population: str | list[str] | None = Field(
        default=None, title='Node Population'
    )
    property_filter: NeuronPropertyFilter | list[NeuronPropertyFilter] | None = Field(
        default=[],
        description='NeuronPropertyFilter object or list of NeuronPropertyFilter objects',
        title='Property Filter',
    )
    node_sets: list[NodeSet3] | NodeSets3 | None = Field(default=[], title='Node Sets')
    central_neuron_id: int = Field(
        ...,
        description='Node id (index) that will be source or target of the simplices extracted',
        title='Central Neuron Id',
    )
    dim: int = Field(
        ..., description='Dimension of the simplices to be extracted', title='Dim'
    )
    central_neuron_simplex_position: Literal['source', 'target'] | None = Field(
        default='source',
        description="Position of the central neuron/node in the simplex, it can be either 'source' or 'target'",
        title='Central Neuron Simplex Position',
    )
    subsample: bool | None = Field(
        default=True,
        description='Whether to subsample the set of nodes in the simplex lists or not',
        title='Subsample',
    )
    n_count_max: int | None = Field(
        default=False,
        description='Maximum number of nodes to be subsampled',
        title='N Count Max',
    )
    subsample_method: Literal['node_participation', 'random'] | None = Field(
        default='node_participation',
        description='\n        **Method to subsample nodes**:\n        - `random`: randomly selects nodes from all nodes in the simplices\n        - `node_participation`: selects nodes with highest node participation \n            ',
        title='Subsample Method',
    )
    simplex_type: Literal['directed', 'reciprocal', 'undirected'] | None = Field(
        default='directed',
        description='Type of simplex to consider. See more at             https://openbraininstitute.github.io/connectome-analysis/network_topology/#src.connalysis.network.topology.simplex_counts',
        title='Simplex Type',
    )
    seed: int | None = Field(
        default=None,
        description='Seed used for random subsampling method',
        title='Seed',
    )


class NodeSets4Item(NodeSet):
    pass


class NodeSets4(RootModel[list[list[NodeSets4Item]]]):
    root: list[list[NodeSets4Item]] = Field(..., min_length=1, title='Node Sets')


class SimplexNeuronSet(BaseModel):
    type: Literal['SimplexNeuronSet'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    node_population: str | list[str] | None = Field(
        default=None, title='Node Population'
    )
    property_filter: NeuronPropertyFilter | list[NeuronPropertyFilter] | None = Field(
        default=[],
        description='NeuronPropertyFilter object or list of NeuronPropertyFilter objects',
        title='Property Filter',
    )
    node_sets: list[NodeSet3] | NodeSets4 | None = Field(default=[], title='Node Sets')
    central_neuron_id: int = Field(
        ...,
        description='Node id (index) that will be source or target of the simplices extracted',
        title='Central Neuron Id',
    )
    dim: int = Field(
        ..., description='Dimension of the simplices to be extracted', title='Dim'
    )
    central_neuron_simplex_position: Literal['source', 'target'] | None = Field(
        default='source',
        description="Position of the central neuron/node in the simplex, it can be either 'source' or 'target'",
        title='Central Neuron Simplex Position',
    )
    subsample: bool | None = Field(
        default=False,
        description='Whether to subsample the set of nodes in the simplex lists or not',
        title='Subsample',
    )
    n_count_max: int | None = Field(
        default=None,
        description='Maximum number of nodes to be subsampled',
        title='N Count Max',
    )
    simplex_type: Literal['directed', 'reciprocal', 'undirected'] | None = Field(
        default='directed',
        description='Type of simplex to consider. See more at             https://openbraininstitute.github.io/connectome-analysis/network_topology/#src.connalysis.network.topology.simplex_counts',
        title='Simplex Type',
    )
    seed: int | None = Field(
        default=None,
        description='Seed used for random subsampling method',
        title='Seed',
    )


class StartTime(RootModel[float]):
    root: float = Field(
        ..., description='Recording start time in ms.', ge=0.0, title='Start Time'
    )


class StartTimeItem(RootModel[float]):
    root: float = Field(..., ge=0.0)


class EndTime(RootModel[float]):
    root: float = Field(
        ..., description='Recording end time in ms.', ge=0.0, title='End Time'
    )


class EndTimeItem(StartTimeItem):
    pass


class Dt(RootModel[float]):
    root: float = Field(
        ...,
        description='Interval between recording time steps in ms.',
        ge=0.0,
        title='Dt',
    )


class DtItem(StartTimeItem):
    pass


class SomaVoltageRecording(BaseModel):
    type: Literal['SomaVoltageRecording'] = Field(..., title='Type')
    start_time: StartTime | list[StartTimeItem] = Field(
        ..., description='Recording start time in ms.', title='Start Time'
    )
    end_time: EndTime | list[EndTimeItem] = Field(
        ..., description='Recording end time in ms.', title='End Time'
    )
    dt: Dt | list[DtItem] | None = Field(
        default=0.1,
        description='Interval between recording time steps in ms.',
        title='Dt',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to record from.'
    )


class TimestampsReference(BaseModel):
    type: Literal['TimestampsReference'] = Field(..., title='Type')
    block_dict_name: str | None = Field(default='', title='Block Dict Name')
    block_name: str = Field(..., title='Block Name')


class ValidationError(BaseModel):
    loc: list[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class NodeSets5Item(NodeSet):
    pass


class NodeSets5(RootModel[list[list[NodeSets5Item]]]):
    root: list[list[NodeSets5Item]] = Field(..., min_length=1, title='Node Sets')


class N(RootModel[int]):
    root: int = Field(..., description='Number of neurons to find', ge=0, title='N')


class NItem(RootModel[int]):
    root: int = Field(..., ge=0)


class ColumnsXyz(RootModel[list]):
    root: list = Field(
        ...,
        description='Names of the three neuron (node) properties used for volumetric tests',
        max_length=3,
        min_length=3,
        title='Columns Xyz',
    )


class ColumnsXyzItem(RootModel[list]):
    root: list = Field(..., max_length=3, min_length=3)


class VolumetricCountNeuronSet(BaseModel):
    type: Literal['VolumetricCountNeuronSet'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    node_population: str | list[str] | None = Field(
        default=None, title='Node Population'
    )
    property_filter: NeuronPropertyFilter | list[NeuronPropertyFilter] | None = Field(
        default=[],
        description='NeuronPropertyFilter object or list of NeuronPropertyFilter objects',
        title='Property Filter',
    )
    node_sets: list[NodeSet3] | NodeSets5 | None = Field(default=[], title='Node Sets')
    ox: float | list[float] = Field(
        ...,
        description='Offset of the center of the volume, relative to the centroid of the node             population',
        title='Ox',
    )
    oy: float | list[float] = Field(
        ...,
        description='Offset of the center of the volume, relative to the centroid of the node             population',
        title='Oy',
    )
    oz: float | list[float] = Field(
        ...,
        description='Offset of the center of the volume, relative to the centroid of the node             population',
        title='Oz',
    )
    n: N | list[NItem] = Field(..., description='Number of neurons to find', title='N')
    columns_xyz: ColumnsXyz | list[ColumnsXyzItem] | None = Field(
        default=['x', 'y', 'z'],
        description='Names of the three neuron (node) properties used for volumetric tests',
        title='Columns Xyz',
    )


class NodeSets6Item(NodeSet):
    pass


class NodeSets6(RootModel[list[list[NodeSets6Item]]]):
    root: list[list[NodeSets6Item]] = Field(..., min_length=1, title='Node Sets')


class Radius(RootModel[float]):
    root: float = Field(
        ..., description='Radius in um of volumetric sample', ge=0.0, title='Radius'
    )


class Radiu(StartTimeItem):
    pass


class VolumetricRadiusNeuronSet(BaseModel):
    type: Literal['VolumetricRadiusNeuronSet'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    node_population: str | list[str] | None = Field(
        default=None, title='Node Population'
    )
    property_filter: NeuronPropertyFilter | list[NeuronPropertyFilter] | None = Field(
        default=[],
        description='NeuronPropertyFilter object or list of NeuronPropertyFilter objects',
        title='Property Filter',
    )
    node_sets: list[NodeSet3] | NodeSets6 | None = Field(default=[], title='Node Sets')
    ox: float | list[float] = Field(
        ...,
        description='Offset of the center of the volume, relative to the centroid of the node             population',
        title='Ox',
    )
    oy: float | list[float] = Field(
        ...,
        description='Offset of the center of the volume, relative to the centroid of the node             population',
        title='Oy',
    )
    oz: float | list[float] = Field(
        ...,
        description='Offset of the center of the volume, relative to the centroid of the node             population',
        title='Oz',
    )
    radius: Radius | list[Radiu] = Field(
        ..., description='Radius in um of volumetric sample', title='Radius'
    )
    columns_xyz: ColumnsXyz | list[ColumnsXyzItem] | None = Field(
        default=['x', 'y', 'z'],
        description='Names of the three neuron (node) properties used for volumetric tests',
        title='Columns Xyz',
    )


class NbS1POmInputs(BaseModel):
    type: Literal['nbS1POmInputs'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')


class NbS1VPMInputs(BaseModel):
    type: Literal['nbS1VPMInputs'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')


class ObiOneScientificBasicConnectivityPlotsBasicConnectivityPlotsBasicConnectivityPlotsInitialize(
    BaseModel
):
    type: Literal['BasicConnectivityPlots.Initialize'] = Field(..., title='Type')
    matrix_path: NamedPath | list[NamedPath] = Field(..., title='Matrix Path')
    plot_formats: list[str] | None = Field(
        default=['png', 'pdf', 'svg'], title='Plot Formats'
    )
    plot_types: list[str] | None = Field(
        default=[
            'nodes',
            'connectivity_global',
            'connectivity_pathway',
            'small_adj_and_stats',
            'network_in_2D',
            'property_table',
        ],
        title='Plot Types',
    )
    rendering_cmap: str | None = Field(default=None, title='Rendering Cmap')
    rendering_color_file: str | None = Field(default=None, title='Rendering Color File')
    dpi: int | None = Field(default=300, title='Dpi')


class ObiOneScientificCircuitExtractionCircuitExtractionCircuitExtractionsInitialize(
    BaseModel
):
    type: Literal['CircuitExtractions.Initialize'] = Field(..., title='Type')
    circuit: Circuit | list[Circuit] = Field(..., title='Circuit')
    run_validation: bool | None = Field(default=False, title='Run Validation')


class ObiOneScientificConnectivityMatrixExtractionConnectivityMatrixExtractionConnectivityMatrixExtractionsInitialize(
    BaseModel
):
    type: Literal['ConnectivityMatrixExtractions.Initialize'] = Field(..., title='Type')
    circuit_path: NamedPath | list[NamedPath] = Field(..., title='Circuit Path')
    edge_population: str | list[str | None] | None = Field(
        default=None, title='Edge Population'
    )
    node_attributes: list[str] | list[list[str] | None] | None = Field(
        default=None, title='Node Attributes'
    )


class ObiOneScientificFolderCompressionFolderCompressionFolderCompressionsInitialize(
    BaseModel
):
    type: Literal['FolderCompressions.Initialize'] = Field(..., title='Type')
    folder_path: NamedPath | list[NamedPath] = Field(..., title='Folder Path')
    file_format: str | list[str | None] | None = Field(
        default='gz', title='File Format'
    )
    file_name: str | list[str | None] | None = Field(
        default='compressed', title='File Name'
    )


class ObiOneScientificMorphologyContainerizationMorphologyContainerizationMorphologyContainerizationsFormInitialize(
    BaseModel
):
    type: Literal['MorphologyContainerizationsForm.Initialize'] = Field(
        ..., title='Type'
    )
    circuit_path: NamedPath | list[NamedPath] = Field(..., title='Circuit Path')
    hoc_template_old: str = Field(..., title='Hoc Template Old')
    hoc_template_new: str = Field(..., title='Hoc Template New')


class ObiOneScientificMorphologyContainerizationMorphologyDecontainerizationMorphologyDecontainerizationsFormInitialize(
    BaseModel
):
    type: Literal['MorphologyDecontainerizationsForm.Initialize'] = Field(
        ..., title='Type'
    )
    circuit_path: NamedPath | list[NamedPath] = Field(..., title='Circuit Path')
    output_format: (
        Literal['h5', 'asc', 'swc'] | list[Literal['h5', 'asc', 'swc']] | None
    ) = Field(default='h5', title='Output Format')


class ObiOneScientificMorphologyLocationsMorphologyLocationFormMorphologyLocationsFormInitialize(
    BaseModel
):
    type: Literal['MorphologyLocationsForm.Initialize'] = Field(..., title='Type')
    morphology: (
        ReconstructionMorphologyFromID
        | list[ReconstructionMorphologyFromID]
        | Path
        | list[Path]
    ) = Field(
        ...,
        description='The morphology skeleton to place locations on',
        title='Morphology',
    )


class ObiOneScientificMorphologyMetricsMorphologyMetricsMorphologyMetricsFormInitialize(
    BaseModel
):
    type: Literal['MorphologyMetricsForm.Initialize'] = Field(..., title='Type')
    morphology: (
        ReconstructionMorphologyFromID | list[ReconstructionMorphologyFromID]
    ) = Field(..., description='3. Morphology description', title='Morphology')


class ObiOneScientificSimulationSimulationsSimulationsFormInitialize(BaseModel):
    type: Literal['SimulationsForm.Initialize'] = Field(..., title='Type')
    circuit: (
        list[Circuit]
        | Circuit
        | ReconstructionMorphologyFromID
        | list[ReconstructionMorphologyFromID]
    ) = Field(..., title='Circuit')
    simulation_length: list[float] | float | None = Field(
        default=1000.0,
        description='Simulation length in milliseconds (ms)',
        title='Simulation Length',
    )
    node_set: NeuronSetReference | None = Field(
        default=None, description='Simulation initialization parameters'
    )
    random_seed: list[int] | int | None = Field(
        default=1, description='Random seed for the simulation', title='Random Seed'
    )
    extracellular_calcium_concentration: list[float] | float | None = Field(
        default=1.1,
        description='Extracellular calcium concentration in millimoles (mM)',
        title='Extracellular Calcium Concentration',
    )
    v_init: list[float] | float | None = Field(default=-80.0, title='V Init')


class ObiOneScientificTestFormsTestFormSingleBlockSingleBlockEntityTestFormInitialize(
    BaseModel
):
    type: Literal['SingleBlockEntityTestForm.Initialize'] = Field(..., title='Type')
    morphology: (
        ReconstructionMorphologyFromID | list[ReconstructionMorphologyFromID]
    ) = Field(..., title='Morphology')


class ObiOneScientificTestFormsTestFormSingleBlockSingleBlockGenerateTestFormInitialize(
    BaseModel
):
    type: Literal['SingleBlockGenerateTestForm.Initialize'] = Field(..., title='Type')
    morphology_path: NamedPath | list[NamedPath] = Field(..., title='Morphology Path')


class RCA1CA3Inputs(BaseModel):
    type: Literal['rCA1CA3Inputs'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')


class RootGetResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


HealthHealthGetResponse = RootGetResponse


VersionVersionGetResponse = RootGetResponse


class BasicConnectivityPlots(BaseModel):
    type: Literal['BasicConnectivityPlots'] = Field(..., title='Type')
    initialize: ObiOneScientificBasicConnectivityPlotsBasicConnectivityPlotsBasicConnectivityPlotsInitialize


class ConnectivityMatrixExtractions(BaseModel):
    type: Literal['ConnectivityMatrixExtractions'] = Field(..., title='Type')
    initialize: ObiOneScientificConnectivityMatrixExtractionConnectivityMatrixExtractionConnectivityMatrixExtractionsInitialize


class ConstantCurrentClampSomaticStimulus(BaseModel):
    type: Literal['ConstantCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    amplitude: float | list[float] | None = Field(
        default=0.1, description='The injected current. Given in nA.', title='Amplitude'
    )


class FolderCompressions(BaseModel):
    type: Literal['FolderCompressions'] = Field(..., title='Type')
    initialize: (
        ObiOneScientificFolderCompressionFolderCompressionFolderCompressionsInitialize
    )


class HTTPValidationError(BaseModel):
    detail: list[ValidationError] | None = Field(default=None, title='Detail')


class HyperpolarizingCurrentClampSomaticStimulus(BaseModel):
    type: Literal['HyperpolarizingCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )


class NeuronIds(RootModel[list[NamedTuple]]):
    root: list[NamedTuple] = Field(..., min_length=1, title='Neuron Ids')


class IDNeuronSet(BaseModel):
    type: Literal['IDNeuronSet'] = Field(..., title='Type')
    random_sample: int | float | list[int | float | None] | None = Field(
        default=None, title='Random Sample'
    )
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    neuron_ids: NamedTuple | NeuronIds = Field(..., title='Neuron Ids')


class LinearCurrentClampSomaticStimulus(BaseModel):
    type: Literal['LinearCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    amplitude_start: float | list[float] | None = Field(
        default=0.1,
        description='The amount of current initially injected when the stimulus activates. Given in nA.',
        title='Amplitude Start',
    )
    amplitude_end: float | list[float] | None = Field(
        default=0.2,
        description='If given, current is interpolated such that current reaches this value when the stimulus concludes. Otherwise, current stays at amp_start. Given in nA',
        title='Amplitude End',
    )


class MorphologyContainerizationsForm(BaseModel):
    type: Literal['MorphologyContainerizationsForm'] = Field(..., title='Type')
    initialize: ObiOneScientificMorphologyContainerizationMorphologyContainerizationMorphologyContainerizationsFormInitialize


class MorphologyDecontainerizationsForm(BaseModel):
    type: Literal['MorphologyDecontainerizationsForm'] = Field(..., title='Type')
    initialize: ObiOneScientificMorphologyContainerizationMorphologyDecontainerizationMorphologyDecontainerizationsFormInitialize


class MorphologyLocationsForm(BaseModel):
    type: Literal['MorphologyLocationsForm'] = Field(..., title='Type')
    initialize: ObiOneScientificMorphologyLocationsMorphologyLocationFormMorphologyLocationsFormInitialize
    morph_locations: (
        MorphologyLocationsBlock
        | RandomGroupedMorphologyLocations
        | RandomMorphologyLocations
        | ClusteredGroupedMorphologyLocations
        | ClusteredMorphologyLocations
        | ClusteredPathDistanceMorphologyLocations
        | PathDistanceMorphologyLocations
    ) = Field(
        ...,
        description='Parameterization of locations on the neurites of the morphology',
        title='Morphology locations',
    )


class MorphologyMetricsForm(BaseModel):
    type: Literal['MorphologyMetricsForm'] = Field(..., title='Type')
    initialize: ObiOneScientificMorphologyMetricsMorphologyMetricsMorphologyMetricsFormInitialize


class MultiPulseCurrentClampSomaticStimulus(BaseModel):
    type: Literal['MultiPulseCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    amplitude: float | list[float] | None = Field(
        default=0.1,
        description='The amount of current initially injected when each pulse activates. Given in nA.',
        title='Amplitude',
    )
    width: float | list[float] | None = Field(
        default=1.0,
        description='The length of time each pulse lasts. Given in ms.',
        title='Width',
    )
    frequency: float | list[float] | None = Field(
        default=1.0,
        description='The frequency of pulse trains. Given in Hz.',
        title='Frequency',
    )


class NoiseCurrentClampSomaticStimulus(BaseModel):
    type: Literal['NoiseCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    mean_amplitude: float | list[float] | None = Field(
        default=0.01,
        description='The mean value of current to inject. Given in nA.',
        title='Mean Amplitude',
    )
    variance: float | list[float] | None = Field(
        default=0.01,
        description='The variance around the mean of current to inject using a                     normal distribution.',
        title='Variance',
    )


class PercentageNoiseCurrentClampSomaticStimulus(BaseModel):
    type: Literal['PercentageNoiseCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    mean_percentage_of_threshold_current: float | list[float] | None = Field(
        default=0.01,
        description="The mean value of current to inject as a percentage of a cell's                     threshold current.",
        title='Mean Percentage Of Threshold Current',
    )
    variance: float | list[float] | None = Field(
        default=0.01,
        description='The variance around the mean of current to inject using a                     normal distribution.',
        title='Variance',
    )


class PoissonSpikeStimulus(BaseModel):
    type: Literal['PoissonSpikeStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference
    stim_duration: float | list[float] = Field(..., title='Stim Duration')
    source_neuron_set: NeuronSetReference | None = None
    targeted_neuron_set: NeuronSetReference | None = None
    random_seed: int | list[int] | None = Field(default=0, title='Random Seed')
    frequency: float | list[float] | None = Field(
        default=0.0,
        description='Mean frequency (Hz) of the Poisson input',
        title='Frequency',
    )


class RelativeConstantCurrentClampSomaticStimulus(BaseModel):
    type: Literal['RelativeConstantCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    percentage_of_threshold_current: float | list[float] | None = Field(
        default=10.0,
        description='The percentage of a cell’s threshold current to inject when the stimulus                     activates.',
        title='Percentage Of Threshold Current',
    )


class RelativeLinearCurrentClampSomaticStimulus(BaseModel):
    type: Literal['RelativeLinearCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    percentage_of_threshold_current_start: float | list[float] | None = Field(
        default=10.0,
        description="The percentage of a cell's threshold current to inject when the stimulus activates.",
        title='Percentage Of Threshold Current Start',
    )
    percentage_of_threshold_current_end: float | list[float] | None = Field(
        default=100.0,
        description="If given, the percentage of a cell's threshold current is interpolated such that the percentage reaches this value when the stimulus concludes.",
        title='Percentage Of Threshold Current End',
    )


class SingleBlockEntityTestForm(BaseModel):
    type: Literal['SingleBlockEntityTestForm'] = Field(..., title='Type')
    initialize: (
        ObiOneScientificTestFormsTestFormSingleBlockSingleBlockEntityTestFormInitialize
    )


class SingleBlockGenerateTestForm(BaseModel):
    type: Literal['SingleBlockGenerateTestForm'] = Field(..., title='Type')
    initialize: ObiOneScientificTestFormsTestFormSingleBlockSingleBlockGenerateTestFormInitialize


class SinusoidalCurrentClampSomaticStimulus(BaseModel):
    type: Literal['SinusoidalCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    peak_amplitude: float | list[float] | None = Field(
        default=0.1,
        description='The peak amplitude of the sinusoid. Given in nA.',
        title='Peak Amplitude',
    )
    frequency: float | list[float] | None = Field(
        default=1.0,
        description='The frequency of the waveform. Given in Hz.',
        title='Frequency',
    )
    dt: float | list[float] | None = Field(
        default=0.025,
        description='Timestep of generated signal in ms. Default is 0.025 ms.',
        title='Dt',
    )


class SubthresholdCurrentClampSomaticStimulus(BaseModel):
    type: Literal['SubthresholdCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference
    delay: float | list[float] | None = Field(
        default=0.0, description='Time in ms when input is activated.', title='Delay'
    )
    duration: float | list[float] | None = Field(
        default=1.0,
        description='Time duration in ms for how long input is activated.',
        title='Duration',
    )
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to which the stimulus is applied.'
    )
    percentage_below_threshold: float | list[float] | None = Field(
        default=0.1,
        description="A percentage adjusted from 100 of a cell's threshold current. \\\n                        E.g. 20 will apply 80% of the threshold current. Using a negative \\\n                            value will give more than 100. E.g. -20 will inject 120% of the \\\n                                threshold current.",
        title='Percentage Below Threshold',
    )


class SynchronousSingleSpikeStimulus(BaseModel):
    type: Literal['SynchronousSingleSpikeStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference
    spike_probability: float | list[float] = Field(..., title='Spike Probability')


class CircuitExtractions(BaseModel):
    type: Literal['CircuitExtractions'] = Field(..., title='Type')
    initialize: (
        ObiOneScientificCircuitExtractionCircuitExtractionCircuitExtractionsInitialize
    )
    neuron_set: (
        PredefinedNeuronSet
        | CombinedNeuronSet
        | IDNeuronSet
        | PropertyNeuronSet
        | VolumetricCountNeuronSet
        | VolumetricRadiusNeuronSet
        | SimplexNeuronSet
        | SimplexMembershipBasedNeuronSet
        | NbS1VPMInputs
        | NbS1POmInputs
        | RCA1CA3Inputs
    ) = Field(..., title='Neuron Set')


class SimulationsForm(BaseModel):
    type: Literal['SimulationsForm'] = Field(..., title='Type')
    timestamps: dict[str, RegularTimestamps] | None = Field(
        default=None, description='Timestamps for the simulation', title='Timestamps'
    )
    stimuli: (
        dict[
            str,
            SynchronousSingleSpikeStimulus
            | ConstantCurrentClampSomaticStimulus
            | LinearCurrentClampSomaticStimulus
            | RelativeConstantCurrentClampSomaticStimulus
            | MultiPulseCurrentClampSomaticStimulus
            | SinusoidalCurrentClampSomaticStimulus
            | SubthresholdCurrentClampSomaticStimulus
            | HyperpolarizingCurrentClampSomaticStimulus
            | NoiseCurrentClampSomaticStimulus
            | PercentageNoiseCurrentClampSomaticStimulus
            | RelativeLinearCurrentClampSomaticStimulus
            | PoissonSpikeStimulus,
        ]
        | None
    ) = Field(default=None, description='Stimuli for the simulation', title='Stimuli')
    recordings: dict[str, SomaVoltageRecording] | None = Field(
        default=None, description='Recordings for the simulation', title='Recordings'
    )
    neuron_sets: (
        dict[str, IDNeuronSet | NbS1VPMInputs | NbS1POmInputs | RCA1CA3Inputs] | None
    ) = Field(
        default=None, description='Neuron sets for the simulation', title='Neuron Sets'
    )
    initialize: ObiOneScientificSimulationSimulationsSimulationsFormInitialize = Field(
        ...,
        description='Parameters for initializing the simulation',
        title='Simulation Initialization',
    )
    info: Info = Field(
        ...,
        description='Information about the simulation campaign',
        title='Campaign Info',
    )
