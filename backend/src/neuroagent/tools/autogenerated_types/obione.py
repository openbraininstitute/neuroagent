# generated by datamodel-codegen:
#   filename:  https://staging.openbraininstitute.org/api/obi-one/openapi.json
#   timestamp: 2025-07-07T09:04:00+00:00

from __future__ import annotations

from typing import Any, Literal

from pydantic import BaseModel, ConfigDict, Field, RootModel


class SamplePercentage(RootModel[float]):
    root: float = Field(
        ...,
        description='Percentage of neurons to sample between 0 and 100%',
        ge=0.0,
        le=100.0,
        title='Sample (Percentage)',
    )


class SamplePercentage1Item(RootModel[float]):
    root: float = Field(..., ge=0.0, le=100.0)


class SamplePercentage1(RootModel[list[SamplePercentage1Item]]):
    root: list[SamplePercentage1Item] = Field(
        ...,
        description='Percentage of neurons to sample between 0 and 100%',
        min_length=1,
        title='Sample (Percentage)',
    )


class AllNeurons(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['AllNeurons'] = Field(..., title='Type')
    sample_percentage: SamplePercentage | SamplePercentage1 | None = Field(
        default=100.0,
        description='Percentage of neurons to sample between 0 and 100%',
        title='Sample (Percentage)',
    )
    sample_seed: int | list[int] | None = Field(
        default=1, description='Seed for random sampling.', title='Sample Seed'
    )


class Circuit(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['Circuit'] = Field(..., title='Type')
    name: str = Field(..., title='Name')
    path: str = Field(..., title='Path')
    matrix_path: str | None = Field(default=None, title='Matrix Path')


class CircuitFromID(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['CircuitFromID'] = Field(..., title='Type')
    id_str: str = Field(
        ..., description='ID of the entity in string format.', title='Id Str'
    )


class Duration(RootModel[float]):
    root: float = Field(
        ...,
        description='Time duration in milliseconds for how long input is activated.',
        ge=0.0,
        title='Duration',
    )


class DurationItem(RootModel[float]):
    root: float = Field(..., ge=0.0)


class ElectrophysiologyMetricsOutput(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    feature_dict: dict[str, dict[str, Any]] = Field(
        ...,
        description="Mapping of feature name to its metric values. Each entry contains at least an 'avg', and optionally 'unit', 'num_traces', etc.",
        title='Feature Dict',
    )


class SamplePercentage2(SamplePercentage):
    pass


class SamplePercentage3Item(SamplePercentage1Item):
    pass


class SamplePercentage3(RootModel[list[SamplePercentage3Item]]):
    root: list[SamplePercentage3Item] = Field(
        ...,
        description='Percentage of neurons to sample between 0 and 100%',
        min_length=1,
        title='Sample (Percentage)',
    )


class ExcitatoryNeurons(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['ExcitatoryNeurons'] = Field(..., title='Type')
    sample_percentage: SamplePercentage2 | SamplePercentage3 | None = Field(
        default=100.0,
        description='Percentage of neurons to sample between 0 and 100%',
        title='Sample (Percentage)',
    )
    sample_seed: int | list[int] | None = Field(
        default=1, description='Seed for random sampling.', title='Sample Seed'
    )


class SamplePercentage4(SamplePercentage):
    pass


class SamplePercentage5Item(SamplePercentage1Item):
    pass


class SamplePercentage5(RootModel[list[SamplePercentage5Item]]):
    root: list[SamplePercentage5Item] = Field(
        ...,
        description='Percentage of neurons to sample between 0 and 100%',
        min_length=1,
        title='Sample (Percentage)',
    )


class Info(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['Info'] = Field(..., title='Type')
    campaign_name: str = Field(
        ...,
        description='Name of the simulation campaign.',
        min_length=1,
        title='Campaign Name',
    )
    campaign_description: str = Field(
        ...,
        description='Description of the simulation campaign.',
        min_length=1,
        title='Campaign Description',
    )


class SamplePercentage6(SamplePercentage):
    pass


class SamplePercentage7Item(SamplePercentage1Item):
    pass


class SamplePercentage7(RootModel[list[SamplePercentage7Item]]):
    root: list[SamplePercentage7Item] = Field(
        ...,
        description='Percentage of neurons to sample between 0 and 100%',
        min_length=1,
        title='Sample (Percentage)',
    )


class InhibitoryNeurons(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['InhibitoryNeurons'] = Field(..., title='Type')
    sample_percentage: SamplePercentage6 | SamplePercentage7 | None = Field(
        default=100.0,
        description='Percentage of neurons to sample between 0 and 100%',
        title='Sample (Percentage)',
    )
    sample_seed: int | list[int] | None = Field(
        default=1, description='Seed for random sampling.', title='Sample Seed'
    )


class MorphologyMetricsOutput(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    aspect_ratio: float = Field(
        ...,
        description='Calculates the min/max ratio of the principal direction extents                 along the plane.',
        title='aspect_ratio',
    )
    circularity: float = Field(
        ...,
        description='Calculates the circularity of the morphology points along the plane.',
        title='circularity',
    )
    length_fraction_above_soma: float = Field(
        ...,
        description='Returns the length fraction of the segments that have their midpoints                             higher than the soma.',
        title='length_fraction_above_soma',
    )
    max_radial_distance: float = Field(
        ...,
        description='The maximum radial distance from the soma in micrometers.',
        title='max_radial_distance',
    )
    number_of_neurites: int = Field(
        ...,
        description='Number of neurites in a morphology.',
        title='number_of_neurites',
    )
    soma_radius: float = Field(
        ...,
        description='The radius of the soma in micrometers.',
        title='soma_radius [μm]',
    )
    soma_surface_area: float = Field(
        ...,
        description='The surface area of the soma in square micrometers.',
        title='soma_surface_area [μm^2]',
    )
    total_length: float = Field(
        ...,
        description='The total length of the morphology neurites in micrometers.',
        title='total_length [μm]',
    )
    total_height: float = Field(
        ...,
        description='The total width (X-range) of the morphology in micrometers.',
        title='total_width [μm]',
    )
    total_depth: float = Field(
        ...,
        description='The total depth (Z-range) of the morphology in micrometers.',
        title='total_depth [μm]',
    )
    total_area: float = Field(
        ...,
        description='The total surface area of all sections in square micrometers.',
        title='total_area [μm^2]',
    )
    total_volume: float = Field(
        ...,
        description='The total volume of all sections in cubic micrometers.',
        title='total_volume [μm^3]',
    )
    section_lengths: list[float] = Field(
        ...,
        description='The distribution of lengths per section in micrometers.',
        title='section_lengths [μm]',
    )
    segment_radii: list[float] = Field(
        ...,
        description='The distribution of radii of the morphology in micrometers.',
        title='segment_radii [μm]',
    )
    number_of_sections: float = Field(
        ...,
        description='The number of sections in the morphology.',
        title='number_of_sections',
    )
    local_bifurcation_angles: list[float] = Field(
        ...,
        description='Angles between two sections computed at the bifurcation (local).',
        title='local_bifurcation_angles [rad]',
    )
    remote_bifurcation_angles: list[float] = Field(
        ...,
        description='Angles between two sections computed at the end of the sections (remote).',
        title='remote_bifurcation_angles [rad]',
    )
    section_path_distances: list[float] = Field(
        ...,
        description='Path distances from the soma to section endpoints in micrometers.',
        title='section_path_distances [μm]',
    )
    section_radial_distances: list[float] = Field(
        ...,
        description='Radial distance from the soma to section endpoints in micrometers.',
        title='section_radial_distances [μm]',
    )
    section_branch_orders: list[float] = Field(
        ...,
        description='The distribution of branch orders of sections, computed from soma.',
        title='section_branch_orders',
    )
    section_strahler_orders: list[float] = Field(
        ...,
        description='The distribution of strahler branch orders of sections, computed from terminals.',
        title='section_strahler_orders',
    )


class Width(RootModel[float]):
    root: float = Field(
        ...,
        description='The length of time each pulse lasts. Given in milliseconds (ms).',
        ge=1e-06,
        title='Pulse Width',
    )


class WidthItem(RootModel[float]):
    root: float = Field(..., ge=1e-06)


class Frequency(RootModel[float]):
    root: float = Field(
        ...,
        description='The frequency of pulse trains. Given in Hertz (Hz).',
        ge=1e-06,
        title='Pulse Frequency',
    )


class FrequencyItem(WidthItem):
    pass


class NamedTuple(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['NamedTuple'] = Field(..., title='Type')
    name: str = Field(..., title='Name')
    elements: list = Field(..., title='Elements')


class NeuronSetReference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['NeuronSetReference'] = Field(..., title='Type')
    block_dict_name: str | None = Field(default='', title='Block Dict Name')
    block_name: str = Field(..., title='Block Name')


class Variance(RootModel[float]):
    root: float = Field(
        ...,
        description='The variance around the mean of current to inject using a                     normal distribution.',
        ge=0.0,
        title='Variance',
    )


class VarianceItem(DurationItem):
    pass


class Frequency1(RootModel[float]):
    root: float = Field(
        ...,
        description='Mean frequency (Hz) of the Poisson input.',
        ge=1e-06,
        title='Frequency',
    )


class ReconstructionMorphologyFromID(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['ReconstructionMorphologyFromID'] = Field(..., title='Type')
    id_str: str = Field(
        ..., description='ID of the entity in string format.', title='Id Str'
    )


class StartTime(RootModel[float]):
    root: float = Field(
        ...,
        description='Sart time of the timestamps in milliseconds (ms).',
        ge=0.0,
        title='Start Time',
    )


class StartTimeItem(DurationItem):
    pass


class Interval(RootModel[float]):
    root: float = Field(
        ...,
        description='Interval between timestamps in milliseconds (ms).',
        ge=0.0,
        title='Interval',
    )


class IntervalItem(DurationItem):
    pass


class NumberOfRepetitions(RootModel[int]):
    root: int = Field(
        ...,
        description='Number of timestamps to generate.',
        ge=0,
        title='Number Of Repetitions',
    )


class NumberOfRepetition(RootModel[int]):
    root: int = Field(..., ge=0)


class RegularTimestamps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['RegularTimestamps'] = Field(..., title='Type')
    start_time: StartTime | list[StartTimeItem] | None = Field(
        default=0.0,
        description='Sart time of the timestamps in milliseconds (ms).',
        title='Start Time',
    )
    interval: Interval | list[IntervalItem] | None = Field(
        default=10.0,
        description='Interval between timestamps in milliseconds (ms).',
        title='Interval',
    )
    number_of_repetitions: NumberOfRepetitions | list[NumberOfRepetition] | None = (
        Field(
            default=10,
            description='Number of timestamps to generate.',
            title='Number Of Repetitions',
        )
    )


class PercentageOfThresholdCurrent(RootModel[float]):
    root: float = Field(
        ...,
        description='The percentage of a cell’s threshold current to inject when the stimulus                     activates.',
        ge=0.0,
        title='Percentage of Threshold Current',
    )


class PercentageOfThresholdCurrentItem(DurationItem):
    pass


class PercentageOfThresholdCurrentStart(RootModel[float]):
    root: float = Field(
        ...,
        description="The percentage of a cell's threshold current to inject when the stimulus activates.",
        ge=0.0,
        title='Percentage of Threshold Current (Start)',
    )


class PercentageOfThresholdCurrentStartItem(DurationItem):
    pass


class PercentageOfThresholdCurrentEnd(RootModel[float]):
    root: float = Field(
        ...,
        description="If given, the percentage of a cell's threshold current is interpolated such that the percentage reaches this value when the stimulus concludes.",
        ge=0.0,
        title='Percentage of Threshold Current (End)',
    )


class PercentageOfThresholdCurrentEndItem(DurationItem):
    pass


class MeanPercentageOfThresholdCurrent(RootModel[float]):
    root: float = Field(
        ...,
        description="The mean value of current to inject as a percentage of a cell's                     threshold current.",
        ge=0.0,
        title='Percentage of Threshold Current (Mean)',
    )


class MeanPercentageOfThresholdCurrentItem(DurationItem):
    pass


class UseScaling(RootModel[float]):
    root: float = Field(
        ...,
        description='Scale the U_SE (ACh) parameter of the Tsodyks–Markram synaptic model.',
        ge=0.0,
        title='Scale U_SE (ACh)',
    )


class UseScalingItem(DurationItem):
    pass


class ScaleAcetylcholineUSESynapticManipulation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['ScaleAcetylcholineUSESynapticManipulation'] = Field(
        ..., title='Type'
    )
    use_scaling: UseScaling | list[UseScalingItem] | None = Field(
        default=0.7050728631217412,
        description='Scale the U_SE (ACh) parameter of the Tsodyks–Markram synaptic model.',
        title='Scale U_SE (ACh)',
    )


class SingleTimestamp(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['SingleTimestamp'] = Field(..., title='Type')
    start_time: StartTime | list[StartTimeItem] | None = Field(
        default=0.0,
        description='Sart time of the timestamps in milliseconds (ms).',
        title='Start Time',
    )


class Frequency2(RootModel[float]):
    root: float = Field(
        ...,
        description='The frequency of the waveform. Given in Hertz (Hz).',
        ge=1e-06,
        title='Frequency',
    )


class Dt(RootModel[float]):
    root: float = Field(
        ...,
        description='Timestep of generated signal in milliseconds (ms).',
        ge=0.025,
        title='Timestep',
    )


class DtItem(RootModel[float]):
    root: float = Field(..., ge=0.025)


class Dt1(RootModel[float]):
    root: float = Field(
        ...,
        description='Interval between recording time steps in milliseconds (ms).',
        ge=0.025,
        title='Timestep',
    )


class SomaVoltageRecording(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['SomaVoltageRecording'] = Field(..., title='Type')
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to record from.', title='Neuron Set'
    )
    dt: Dt1 | list[DtItem] | None = Field(
        default=0.1,
        description='Interval between recording time steps in milliseconds (ms).',
        title='Timestep',
    )


class MagnesiumValue(RootModel[float]):
    root: float = Field(
        ...,
        description='Extracellular calcium concentration in millimoles (mM).',
        ge=0.0,
        title='Extracellular Magnesium Concentration',
    )


class MagnesiumValueItem(DurationItem):
    pass


class SynapticMgManipulation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['SynapticMgManipulation'] = Field(..., title='Type')
    magnesium_value: MagnesiumValue | list[MagnesiumValueItem] | None = Field(
        default=2.4,
        description='Extracellular calcium concentration in millimoles (mM).',
        title='Extracellular Magnesium Concentration',
    )


class StartTime2(RootModel[float]):
    root: float = Field(
        ...,
        description='Recording start time in milliseconds (ms).',
        ge=0.0,
        title='Start Time',
    )


class EndTime(RootModel[float]):
    root: float = Field(
        ...,
        description='Recording end time in milliseconds (ms).',
        ge=0.0,
        title='End Time',
    )


class EndTimeItem(DurationItem):
    pass


class TimeWindowSomaVoltageRecording(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['TimeWindowSomaVoltageRecording'] = Field(..., title='Type')
    neuron_set: NeuronSetReference = Field(
        ..., description='Neuron set to record from.', title='Neuron Set'
    )
    dt: Dt1 | list[DtItem] | None = Field(
        default=0.1,
        description='Interval between recording time steps in milliseconds (ms).',
        title='Timestep',
    )
    start_time: StartTime2 | list[StartTimeItem] | None = Field(
        default=0.0,
        description='Recording start time in milliseconds (ms).',
        title='Start Time',
    )
    end_time: EndTime | list[EndTimeItem] | None = Field(
        default=100.0,
        description='Recording end time in milliseconds (ms).',
        title='End Time',
    )


class TimestampsReference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['TimestampsReference'] = Field(..., title='Type')
    block_dict_name: str | None = Field(default='', title='Block Dict Name')
    block_name: str = Field(..., title='Block Name')


class ValidationError(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    loc: list[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class SamplePercentage8(SamplePercentage):
    pass


class SamplePercentage9Item(SamplePercentage1Item):
    pass


class SamplePercentage9(RootModel[list[SamplePercentage9Item]]):
    root: list[SamplePercentage9Item] = Field(
        ...,
        description='Percentage of neurons to sample between 0 and 100%',
        min_length=1,
        title='Sample (Percentage)',
    )


class NbS1POmInputs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['nbS1POmInputs'] = Field(..., title='Type')
    sample_percentage: SamplePercentage8 | SamplePercentage9 | None = Field(
        default=100.0,
        description='Percentage of neurons to sample between 0 and 100%',
        title='Sample (Percentage)',
    )
    sample_seed: int | list[int] | None = Field(
        default=1, description='Seed for random sampling.', title='Sample Seed'
    )


class SamplePercentage10(SamplePercentage):
    pass


class SamplePercentage11Item(SamplePercentage1Item):
    pass


class SamplePercentage11(RootModel[list[SamplePercentage11Item]]):
    root: list[SamplePercentage11Item] = Field(
        ...,
        description='Percentage of neurons to sample between 0 and 100%',
        min_length=1,
        title='Sample (Percentage)',
    )


class NbS1VPMInputs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['nbS1VPMInputs'] = Field(..., title='Type')
    sample_percentage: SamplePercentage10 | SamplePercentage11 | None = Field(
        default=100.0,
        description='Percentage of neurons to sample between 0 and 100%',
        title='Sample (Percentage)',
    )
    sample_seed: int | list[int] | None = Field(
        default=1, description='Seed for random sampling.', title='Sample Seed'
    )


class ObiOneScientificMorphologyMetricsMorphologyMetricsMorphologyMetricsFormInitialize(
    BaseModel
):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['MorphologyMetricsForm.Initialize'] = Field(..., title='Type')
    morphology: (
        ReconstructionMorphologyFromID | list[ReconstructionMorphologyFromID]
    ) = Field(..., description='3. Morphology description', title='Morphology')


class SimulationLength(RootModel[float]):
    root: float = Field(
        ...,
        description='Simulation length in milliseconds (ms).',
        ge=1.0,
        le=5000.0,
        title='Duration',
    )


class SimulationLength1Item(RootModel[float]):
    root: float = Field(..., ge=1.0, le=5000.0)


class SimulationLength1(RootModel[list[SimulationLength1Item]]):
    root: list[SimulationLength1Item] = Field(
        ...,
        description='Simulation length in milliseconds (ms).',
        min_length=1,
        title='Duration',
    )


class ExtracellularCalciumConcentrationItem(DurationItem):
    pass


class ExtracellularCalciumConcentration(RootModel[float]):
    root: float = Field(
        ...,
        description='Extracellular calcium concentration around the synapse in millimoles (mM). Increasing this value increases the probability of synaptic vesicle release, which in turn increases the level of network activity. In vivo values are estimated to be ~0.9-1.2mM, whilst in vitro values are on the order of 2mM.',
        ge=0.0,
        title='Extracellular Calcium Concentration',
    )


class ObiOneScientificSimulationSimulationsSimulationsFormInitialize(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['SimulationsForm.Initialize'] = Field(..., title='Type')
    circuit: list[Circuit] | Circuit | CircuitFromID | list[CircuitFromID] = Field(
        ..., title='Circuit'
    )
    node_set: NeuronSetReference = Field(
        ..., description='Neuron set to simulate.', title='Neuron Set'
    )
    simulation_length: SimulationLength | SimulationLength1 | None = Field(
        default=1000.0,
        description='Simulation length in milliseconds (ms).',
        title='Duration',
    )
    extracellular_calcium_concentration: (
        list[ExtracellularCalciumConcentrationItem]
        | ExtracellularCalciumConcentration
        | None
    ) = Field(
        default=1.1,
        description='Extracellular calcium concentration around the synapse in millimoles (mM). Increasing this value increases the probability of synaptic vesicle release, which in turn increases the level of network activity. In vivo values are estimated to be ~0.9-1.2mM, whilst in vitro values are on the order of 2mM.',
        title='Extracellular Calcium Concentration',
    )
    v_init: list[float] | float | None = Field(
        default=-80.0,
        description='Initial membrane potential in millivolts (mV).',
        title='Initial Voltage',
    )
    random_seed: list[int] | int | None = Field(
        default=1, description='Random seed for the simulation.', title='Random Seed'
    )


class RootGetResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


HealthHealthGetResponse = RootGetResponse


VersionVersionGetResponse = RootGetResponse


class ElectrophysiologyrecordingMetricsEndpointDeclaredElectrophysiologyrecordingMetricsTraceIdGetParametersQuery(
    BaseModel
):
    requested_metrics: (
        list[
            Literal[
                'spike_count',
                'time_to_first_spike',
                'time_to_last_spike',
                'inv_time_to_first_spike',
                'doublet_ISI',
                'inv_first_ISI',
                'ISI_log_slope',
                'ISI_CV',
                'irregularity_index',
                'adaptation_index',
                'mean_frequency',
                'strict_burst_number',
                'strict_burst_mean_freq',
                'spikes_per_burst',
                'AP_height',
                'AP_amplitude',
                'AP1_amp',
                'APlast_amp',
                'AP_duration_half_width',
                'AHP_depth',
                'AHP_time_from_peak',
                'AP_peak_upstroke',
                'AP_peak_downstroke',
                'voltage_base',
                'voltage_after_stim',
                'ohmic_input_resistance_vb_ssse',
                'steady_state_voltage_stimend',
                'sag_amplitude',
                'decay_time_constant_after_stim',
                'depol_block_bool',
            ]
        ]
        | None
    ) = Field(default=None, title='Requested Metrics')
    protocols: (
        list[
            Literal[
                'spontaneous',
                'idrest',
                'idthres',
                'apwaveform',
                'iv',
                'step',
                'spontaps',
                'firepattern',
                'sponnohold30',
                'sponhold30',
                'starthold',
                'startnohold',
                'delta',
                'sahp',
                'idhyperpol',
                'irdepol',
                'irhyperpol',
                'iddepol',
                'ramp',
                'ap_thresh',
                'hyperdepol',
                'negcheops',
                'poscheops',
                'spikerec',
                'sinespec',
            ]
        ]
        | None
    ) = Field(default=None, title='Protocols')
    min_value: float | None = Field(default=None, title='Min Value')
    max_value: float | None = Field(default=None, title='Max Value')


class ConstantCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['ConstantCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    amplitude: float | list[float] | None = Field(
        default=0.1,
        description='The injected current. Given in nanoamps.',
        title='Amplitude',
    )


class FullySynchronousSpikeStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['FullySynchronousSpikeStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    source_neuron_set: NeuronSetReference = Field(..., title='Neuron Set (Source)')
    targeted_neuron_set: NeuronSetReference = Field(..., title='Neuron Set (Target)')
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )


class HTTPValidationError(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    detail: list[ValidationError] | None = Field(default=None, title='Detail')


class HyperpolarizingCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['HyperpolarizingCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )


class NeuronIds(RootModel[list[NamedTuple]]):
    root: list[NamedTuple] = Field(..., min_length=1, title='Neuron Ids')


class IDNeuronSet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['IDNeuronSet'] = Field(..., title='Type')
    sample_percentage: SamplePercentage4 | SamplePercentage5 | None = Field(
        default=100.0,
        description='Percentage of neurons to sample between 0 and 100%',
        title='Sample (Percentage)',
    )
    sample_seed: int | list[int] | None = Field(
        default=1, description='Seed for random sampling.', title='Sample Seed'
    )
    neuron_ids: NamedTuple | NeuronIds = Field(..., title='Neuron Ids')


class LinearCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['LinearCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    amplitude_start: float | list[float] | None = Field(
        default=0.1,
        description='The amount of current initially injected when the stimulus activates. Given in nanoamps.',
        title='Start Amplitude',
    )
    amplitude_end: float | list[float] | None = Field(
        default=0.2,
        description="If given, current is interpolated such that current reaches this value when the stimulus concludes. Otherwise, current stays at 'Start Amplitude'. Given in nanoamps.",
        title='End Amplitude',
    )


class MorphologyMetricsForm(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['MorphologyMetricsForm'] = Field(..., title='Type')
    initialize: ObiOneScientificMorphologyMetricsMorphologyMetricsMorphologyMetricsFormInitialize


class MultiPulseCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['MultiPulseCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    amplitude: float | list[float] | None = Field(
        default=0.1,
        description='The amount of current initially injected when each pulse activates. Given in nanoamps (nA).',
        title='Amplitude',
    )
    width: Width | list[WidthItem] | None = Field(
        default=1.0,
        description='The length of time each pulse lasts. Given in milliseconds (ms).',
        title='Pulse Width',
    )
    frequency: Frequency | list[FrequencyItem] | None = Field(
        default=1.0,
        description='The frequency of pulse trains. Given in Hertz (Hz).',
        title='Pulse Frequency',
    )


class NormallyDistributedCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['NormallyDistributedCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    mean_amplitude: float | list[float] | None = Field(
        default=0.01,
        description='The mean value of current to inject. Given in nanoamps (nA).',
        title='Mean Amplitude',
    )
    variance: Variance | list[VarianceItem] | None = Field(
        default=0.01,
        description='The variance around the mean of current to inject using a                     normal distribution.',
        title='Variance',
    )


class PoissonSpikeStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['PoissonSpikeStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    source_neuron_set: NeuronSetReference = Field(..., title='Neuron Set (Source)')
    targeted_neuron_set: NeuronSetReference = Field(..., title='Neuron Set (Target)')
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1000.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    frequency: Frequency1 | list[FrequencyItem] | None = Field(
        default=1.0,
        description='Mean frequency (Hz) of the Poisson input.',
        title='Frequency',
    )
    random_seed: int | list[int] | None = Field(
        default=0,
        description='Seed for the random number generator to ensure reproducibility of the spike generation.',
        title='Random Seed',
    )


class RelativeConstantCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['RelativeConstantCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    percentage_of_threshold_current: (
        PercentageOfThresholdCurrent | list[PercentageOfThresholdCurrentItem] | None
    ) = Field(
        default=10.0,
        description='The percentage of a cell’s threshold current to inject when the stimulus                     activates.',
        title='Percentage of Threshold Current',
    )


class RelativeLinearCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['RelativeLinearCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    percentage_of_threshold_current_start: (
        PercentageOfThresholdCurrentStart
        | list[PercentageOfThresholdCurrentStartItem]
        | None
    ) = Field(
        default=10.0,
        description="The percentage of a cell's threshold current to inject when the stimulus activates.",
        title='Percentage of Threshold Current (Start)',
    )
    percentage_of_threshold_current_end: (
        PercentageOfThresholdCurrentEnd
        | list[PercentageOfThresholdCurrentEndItem]
        | None
    ) = Field(
        default=100.0,
        description="If given, the percentage of a cell's threshold current is interpolated such that the percentage reaches this value when the stimulus concludes.",
        title='Percentage of Threshold Current (End)',
    )


class RelativeNormallyDistributedCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['RelativeNormallyDistributedCurrentClampSomaticStimulus'] = Field(
        ..., title='Type'
    )
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    mean_percentage_of_threshold_current: (
        MeanPercentageOfThresholdCurrent
        | list[MeanPercentageOfThresholdCurrentItem]
        | None
    ) = Field(
        default=0.01,
        description="The mean value of current to inject as a percentage of a cell's                     threshold current.",
        title='Percentage of Threshold Current (Mean)',
    )
    variance: Variance | list[VarianceItem] | None = Field(
        default=0.01,
        description='The variance around the mean of current to inject using a                     normal distribution.',
        title='Variance',
    )


class SinusoidalCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['SinusoidalCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    maximum_amplitude: float | list[float] | None = Field(
        default=0.1,
        description='The maximum (and starting) amplitude of the sinusoid. Given in nanoamps (nA).',
        title='Maximum Amplitude',
    )
    frequency: Frequency2 | list[FrequencyItem] | None = Field(
        default=1.0,
        description='The frequency of the waveform. Given in Hertz (Hz).',
        title='Frequency',
    )
    dt: Dt | list[DtItem] | None = Field(
        default=0.025,
        description='Timestep of generated signal in milliseconds (ms).',
        title='Timestep',
    )


class SubthresholdCurrentClampSomaticStimulus(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['SubthresholdCurrentClampSomaticStimulus'] = Field(..., title='Type')
    timestamps: TimestampsReference = Field(
        ...,
        description='Timestamps at which the stimulus is applied.',
        title='Timestamps',
    )
    neuron_set: NeuronSetReference = Field(
        ...,
        description='Neuron set to which the stimulus is applied.',
        title='Neuron Set',
    )
    timestamp_offset: float | list[float] | None = Field(
        default=0.0,
        description='The offset of the stimulus relative to each timestamp in milliseconds (ms).',
        title='Timestamp Offset',
    )
    duration: Duration | list[DurationItem] | None = Field(
        default=1.0,
        description='Time duration in milliseconds for how long input is activated.',
        title='Duration',
    )
    percentage_below_threshold: float | list[float] | None = Field(
        default=0.1,
        description="A percentage adjusted from 100 of a cell's threshold current.                         E.g. 20 will apply 80\\% of the threshold current. Using a negative                             value will give more than 100. E.g. -20 will inject 120\\% of the                                 threshold current.",
        title='Percentage Below Threshold',
    )


class SimulationsForm(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Literal['SimulationsForm'] = Field(..., title='Type')
    timestamps: dict[str, SingleTimestamp | RegularTimestamps] | None = Field(
        default=None, description='Timestamps for the simulation.', title='Timestamps'
    )
    stimuli: (
        dict[
            str,
            ConstantCurrentClampSomaticStimulus
            | RelativeConstantCurrentClampSomaticStimulus
            | LinearCurrentClampSomaticStimulus
            | RelativeLinearCurrentClampSomaticStimulus
            | NormallyDistributedCurrentClampSomaticStimulus
            | RelativeNormallyDistributedCurrentClampSomaticStimulus
            | SinusoidalCurrentClampSomaticStimulus
            | SubthresholdCurrentClampSomaticStimulus
            | HyperpolarizingCurrentClampSomaticStimulus
            | MultiPulseCurrentClampSomaticStimulus
            | PoissonSpikeStimulus
            | FullySynchronousSpikeStimulus,
        ]
        | None
    ) = Field(default=None, description='Stimuli for the simulation.', title='Stimuli')
    recordings: (
        dict[str, SomaVoltageRecording | TimeWindowSomaVoltageRecording] | None
    ) = Field(
        default=None, description='Recordings for the simulation.', title='Recordings'
    )
    neuron_sets: (
        dict[
            str,
            AllNeurons
            | ExcitatoryNeurons
            | InhibitoryNeurons
            | IDNeuronSet
            | NbS1VPMInputs
            | NbS1POmInputs,
        ]
        | None
    ) = Field(
        default=None, description='Neuron sets for the simulation.', title='Neuron Sets'
    )
    synaptic_manipulations: (
        dict[str, SynapticMgManipulation | ScaleAcetylcholineUSESynapticManipulation]
        | None
    ) = Field(
        default=None,
        description='Synaptic manipulations for the simulation.',
        title='Synaptic Manipulations',
    )
    initialize: ObiOneScientificSimulationSimulationsSimulationsFormInitialize = Field(
        ...,
        description='Parameters for initializing the simulation.',
        title='Initialization',
    )
    info: Info = Field(..., description='Information about the simulation campaign.')
