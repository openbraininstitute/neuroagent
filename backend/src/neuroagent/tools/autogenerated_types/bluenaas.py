# generated by datamodel-codegen:
#   filename:  https://staging.openbraininstitute.org/api/bluenaas/openapi.json
#   timestamp: 2025-07-02T10:11:49+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Literal
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, RootModel


class BodyPlaceSynapsesApiBluenaasValidationSynapseFormulaPost(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    formula: str = Field(..., title='Formula')


class BrainRegion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., title='Id')
    label: str = Field(..., title='Label')


class DeprecateNexusResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., title='Id')
    deprecated: bool = Field(..., title='Deprecated')
    updated_at: datetime = Field(..., title='Updated At')


class ExclusionRule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    distance_soma_gte: float | None = Field(default=None, title='Distance Soma Gte')
    distance_soma_lte: float | None = Field(default=None, title='Distance Soma Lte')


class ExperimentSetupConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    celsius: float = Field(..., title='Celsius')
    vinit: float = Field(..., title='Vinit')
    hypamp: float = Field(..., title='Hypamp')
    max_time: float = Field(..., le=3000.0, title='Max Time')
    time_step: float = Field(..., title='Time Step')
    seed: int = Field(..., title='Seed')


class RecordingLocation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    section: str = Field(..., title='Section')
    offset: float = Field(..., ge=0.0, le=1.0, title='Offset')


class SectionTarget(RootModel[Literal['apic', 'basal', 'dend', 'soma', 'axon']]):
    root: Literal['apic', 'basal', 'dend', 'soma', 'axon'] = Field(
        ..., title='SectionTarget'
    )


class SimulationStimulusConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    stimulus_type: Literal['current_clamp', 'voltage_clamp', 'conductance'] = Field(
        ..., title='Stimulus Type'
    )
    stimulus_protocol: Literal['ap_waveform', 'idrest', 'iv', 'fire_pattern'] | None = (
        Field(..., title='Stimulus Protocol')
    )
    amplitudes: list[float] | float = Field(..., title='Amplitudes')


class StimulationItemResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    x: list[float] = Field(..., title='X')
    y: list[float] = Field(..., title='Y')
    name: str = Field(..., title='Name')
    amplitude: float = Field(..., title='Amplitude')


class StimulationPlotConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    stimulus_protocol: Literal['ap_waveform', 'idrest', 'iv', 'fire_pattern'] | None = (
        Field(..., title='Stimulus Protocol')
    )
    amplitudes: list[float] = Field(..., title='Amplitudes')


class SynapseConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., title='Id')
    name: str = Field(..., title='Name')
    target: SectionTarget | None = None
    type: int = Field(..., title='Type')
    distribution: Literal['exponential', 'linear', 'formula'] | None = Field(
        default='formula', title='Distribution'
    )
    formula: str | None = Field(default=None, title='Formula')
    soma_synapse_count: int | None = Field(default=None, title='Soma Synapse Count')
    seed: int = Field(..., title='Seed')
    exclusion_rules: list[ExclusionRule] | None = Field(
        default=None, title='Exclusion Rules'
    )


class SynapsePlacementBody(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    seed: int = Field(..., title='Seed')
    config: SynapseConfig


class SynapsePosition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    segment_id: int = Field(..., title='Segment Id')
    coordinates: list[float] = Field(..., title='Coordinates')
    position: float = Field(..., title='Position')


class Frequency(RootModel[float]):
    root: float = Field(..., ge=0.0, title='Frequency')


class FrequencyItem(RootModel[float]):
    root: float = Field(..., ge=0.0)


class SynapseSimulationConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., title='Id')
    delay: int = Field(..., title='Delay')
    duration: int = Field(..., le=3000, title='Duration')
    frequency: Frequency | list[FrequencyItem] = Field(..., title='Frequency')
    weight_scalar: float = Field(..., gt=0.0, title='Weight Scalar')


class UsedModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., title='Id')
    type: Literal['me-model', 'synaptome', 'm-model', 'e-model'] = Field(
        ..., title='Type'
    )
    name: str = Field(..., title='Name')


class ValidationError(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    loc: list[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class RetrieveMorphologyApiBluenaasMorphologyGetParametersQuery(BaseModel):
    model_self: str | None = Field(default='', title='Model Self')


class RetrieveMorphologyDendrogramApiBluenaasMorphologyDendrogramGetParametersQuery(
    BaseModel
):
    model_id: str | None = Field(default='', title='Model Id')


class RunSimulationApiBluenaasSimulationSingleNeuronVirtualLabIdProjectIdRunPostParametersQuery(
    BaseModel
):
    model_id: str = Field(..., title='Model Id')
    realtime: bool | None = Field(default=True, title='Realtime')


class GetAllSimulationsForProjectApiBluenaasSimulationSingleNeuronVirtualLabIdProjectIdGetParametersQuery(
    BaseModel
):
    simulation_type: (
        Literal['single-neuron-simulation', 'synaptome-simulation'] | None
    ) = Field(default=None, title='Simulation Type')
    offset: int | None = Field(default=0, title='Offset')
    page_size: int | None = Field(default=20, title='Page Size')
    created_at_start: datetime | None = Field(
        default=None,
        description='Filter by createdAt date (YYYY-MM-DDTHH:MM:SSZ)',
        title='Created At Start',
    )
    created_at_end: datetime | None = Field(
        default=None,
        description='Filter by createdAt date (YYYY-MM-DDTHH:MM:SSZ)',
        title='Created At End',
    )


class PlaceSynapsesApiBluenaasSynaptomeGeneratePlacementPostParametersQuery(BaseModel):
    model_id: str = Field(..., title='Model Id')


class RetrieveStimulationPlotApiBluenaasGraphDirectCurrentPlotPostParametersQuery(
    BaseModel
):
    model_self: str = Field(..., title='Model Self')


class RetrieveStimulationPlotApiBluenaasGraphDirectCurrentPlotPostResponse(
    RootModel[list[StimulationItemResponse]]
):
    root: list[StimulationItemResponse] = Field(
        ...,
        title='Response Retrieve Stimulation Plot Api Bluenaas Graph Direct Current Plot Post',
    )


class RetrieveNeuronModelsApiBluenaasNeuronModelVirtualLabIdProjectIdMeModelsGetParametersQuery(
    BaseModel
):
    offset: int | None = Field(default=0, title='Offset')
    page_size: int | None = Field(default=20, title='Page Size')
    model_type: Literal['me-model', 'synaptome'] | None = Field(
        default=None, title='Model Type'
    )
    created_at_start: datetime | None = Field(
        default=None,
        description='Filter by createdAt date (YYYY-MM-DDTHH:MM:SSZ)',
        title='Created At Start',
    )
    created_at_end: datetime | None = Field(
        default=None,
        description='Filter by createdAt date (YYYY-MM-DDTHH:MM:SSZ)',
        title='Created At End',
    )


class RetrieveMorphologyApiBluenaasEntitycoreMorphologyGetParametersQuery(BaseModel):
    model_id: UUID = Field(..., title='Model Id')


RetrieveStimulationPlotApiBluenaasEntitycoreGraphDirectCurrentPlotPostParametersQuery = (
    RetrieveMorphologyApiBluenaasEntitycoreMorphologyGetParametersQuery
)


class RetrieveStimulationPlotApiBluenaasEntitycoreGraphDirectCurrentPlotPostResponse(
    RootModel[list[StimulationItemResponse]]
):
    root: list[StimulationItemResponse] = Field(
        ...,
        title='Response Retrieve Stimulation Plot Api Bluenaas Entitycore Graph Direct Current Plot Post',
    )


RunSimulationApiBluenaasEntitycoreSimulationSingleNeuronVirtualLabIdProjectIdRunPostParametersQuery = (
    RetrieveMorphologyApiBluenaasEntitycoreMorphologyGetParametersQuery
)


PlaceSynapsesApiBluenaasEntitycoreSynaptomeGeneratePlacementPostParametersQuery = (
    PlaceSynapsesApiBluenaasSynaptomeGeneratePlacementPostParametersQuery
)


class CurrentInjectionConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    inject_to: str = Field(..., title='Inject To')
    stimulus: SimulationStimulusConfig


class HTTPValidationError(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    detail: list[ValidationError] | None = Field(default=None, title='Detail')


class MEModelResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    type: Literal['me-model', 'synaptome', 'm-model', 'e-model'] = Field(
        ..., title='Type'
    )
    created_by: str = Field(..., title='Created By')
    created_at: datetime = Field(..., title='Created At')
    brain_region: BrainRegion
    m_model: UsedModel
    e_model: UsedModel


class SectionSynapses(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    section_id: str = Field(..., title='Section Id')
    synapses: list[SynapsePosition] = Field(..., title='Synapses')


class SingleNeuronSimulationConfigInput(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    synaptome: list[SynapseSimulationConfig] | None = Field(
        default=None, title='Synaptome'
    )
    current_injection: CurrentInjectionConfig
    record_from: list[RecordingLocation] = Field(..., title='Record From')
    conditions: ExperimentSetupConfig
    type: Literal['single-neuron-simulation', 'synaptome-simulation'] = Field(
        ..., title='Type'
    )
    duration: int = Field(..., title='Duration')


class SingleNeuronSimulationConfigOutput(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    synaptome: list[SynapseSimulationConfig] | None = Field(
        default=None, title='Synaptome'
    )
    current_injection: CurrentInjectionConfig
    record_from: list[RecordingLocation] = Field(..., title='Record From')
    conditions: ExperimentSetupConfig
    type: Literal['single-neuron-simulation', 'synaptome-simulation'] = Field(
        ..., title='Type'
    )
    duration: int = Field(..., title='Duration')
    n_execs: int = Field(
        ...,
        description='Total number of simulation executions required by the configuration given all parameter combinations',
        title='N Execs',
    )


class SynapsePlacementResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    synapses: list[SectionSynapses] = Field(..., title='Synapses')


class SynaptomeModelResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., title='Id')
    name: str = Field(..., title='Name')
    description: str | None = Field(..., title='Description')
    type: Literal['me-model', 'synaptome', 'm-model', 'e-model'] = Field(
        ..., title='Type'
    )
    created_by: str = Field(..., title='Created By')
    created_at: datetime = Field(..., title='Created At')
    brain_region: BrainRegion
    me_model: UsedModel
    synapses: list[SynapseConfig] = Field(..., title='Synapses')


class RetrieveNeuronModelApiBluenaasNeuronModelVirtualLabIdProjectIdModelIdGetResponse(
    RootModel[MEModelResponse | SynaptomeModelResponse]
):
    root: MEModelResponse | SynaptomeModelResponse = Field(
        ...,
        title='Response Retrieve Neuron Model Api Bluenaas Neuron Model  Virtual Lab Id   Project Id   Model Id  Get',
    )


class PaginatedResponseUnionMEModelResponseSynaptomeModelResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    offset: int = Field(..., title='Offset')
    page_size: int = Field(..., title='Page Size')
    total: int = Field(..., title='Total')
    results: list[MEModelResponse | SynaptomeModelResponse] = Field(
        ..., title='Results'
    )


class SimulationDetailsResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(..., title='Id')
    status: Literal['pending', 'started', 'success', 'failure'] | None = Field(
        default=None, title='Status'
    )
    results: dict[str, Any] | None = Field(..., title='Results')
    error: str | None = Field(..., title='Error')
    type: Literal['single-neuron-simulation', 'synaptome-simulation'] = Field(
        ..., title='Type'
    )
    name: str = Field(..., title='Name')
    description: str = Field(..., title='Description')
    created_by: str = Field(..., title='Created By')
    created_at: datetime = Field(..., title='Created At')
    injection_location: str = Field(..., title='Injection Location')
    recording_location: list[str] | str = Field(..., title='Recording Location')
    brain_region: BrainRegion
    config: SingleNeuronSimulationConfigOutput | None = None
    me_model_id: str = Field(..., title='Me Model Id')
    synaptome_model_id: str | None = Field(..., title='Synaptome Model Id')


class PaginatedResponseSimulationDetailsResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    offset: int = Field(..., title='Offset')
    page_size: int = Field(..., title='Page Size')
    total: int = Field(..., title='Total')
    results: list[SimulationDetailsResponse] = Field(..., title='Results')
