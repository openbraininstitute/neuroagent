# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2025-05-19T12:31:23+00:00

from __future__ import annotations

from typing import Any, Optional, Union

from fastapi import FastAPI
from pydantic import BaseModel, conint

from .models import (
    ArticleCountResponse,
    ArticleTypes,
    Authors,
    DateFrom,
    DateTo,
    FieldDatamodelCodeGeneratorRootSpecialGetResponse,
    GenerativeQARequest,
    GenerativeQAResponse,
    HTTPValidationError,
    Journals,
    NumberResults,
    PageArticleMetadata,
    PassthroughRequest,
    PassthroughResponse,
    Regions,
    RetrievalGetResponse,
    SortByDate,
    SuggestionsArticleTypesGetResponse,
    SuggestionsAuthorGetResponse,
    SuggestionsJournalGetResponse,
    Topics,
)


class ReadyzGetParams(BaseModel):
    """Readyz."""


class HealthzHealthzGetParams(BaseModel):
    """Healthz."""


class GenerativeQaQaGenerativePostParams(BaseModel):
    """Generative Qa."""

    article_types: Optional[ArticleTypes] = None
    authors: Optional[Authors] = None
    journals: Optional[Journals] = None
    date_from: Optional[DateFrom] = None
    date_to: Optional[DateTo] = None
    body: GenerativeQARequest = ...


class PassthroughQaPassthroughPostParams(BaseModel):
    """Passthrough."""

    body: PassthroughRequest


class StreamedGenerativeQaQaStreamedGenerativePostParams(BaseModel):
    """Streamed Generative Qa."""

    article_types: Optional[ArticleTypes] = None
    authors: Optional[Authors] = None
    journals: Optional[Journals] = None
    date_from: Optional[DateFrom] = None
    date_to: Optional[DateTo] = None
    body: GenerativeQARequest = ...


class RetrievalRetrievalGetParams(BaseModel):
    """Retrieval."""

    article_types: Optional[ArticleTypes] = None
    authors: Optional[Authors] = None
    journals: Optional[Journals] = None
    date_from: Optional[DateFrom] = None
    date_to: Optional[DateTo] = None
    query: str = ...
    retriever_k: Optional[conint(ge=1, le=1000)] = 100
    use_reranker: Optional[bool] = True
    reranker_k: Optional[conint(ge=1, le=100)] = 8


class ArticleCountRetrievalArticleCountGetParams(BaseModel):
    """Article Count."""

    topics: Optional[Topics] = None
    regions: Optional[Regions] = None
    article_types: Optional[ArticleTypes] = None
    authors: Optional[Authors] = None
    journals: Optional[Journals] = None
    date_from: Optional[DateFrom] = None
    date_to: Optional[DateTo] = None


class ArticleListingRetrievalArticleListingGetParams(BaseModel):
    """Article Listing."""

    topics: Optional[Topics] = None
    regions: Optional[Regions] = None
    number_results: Optional[NumberResults] = 100
    sort_by_date: Optional[SortByDate] = False
    article_types: Optional[ArticleTypes] = None
    authors: Optional[Authors] = None
    journals: Optional[Journals] = None
    date_from: Optional[DateFrom] = None
    date_to: Optional[DateTo] = None
    page: Optional[conint(ge=1)] = 1
    size: Optional[conint(ge=1, le=100)] = 50


class SettingsSettingsGetParams(BaseModel):
    """Settings."""


class ArticleTypesSuggestionsArticleTypesGetParams(BaseModel):
    """Article Types."""


class AuthorSuggestionSuggestionsAuthorGetParams(BaseModel):
    """Author Suggestion."""

    name: str
    limit: Optional[conint(ge=1, le=1000)] = 100


class JournalSuggestionSuggestionsJournalGetParams(BaseModel):
    """Journal Suggestion."""

    keywords: str
    limit: Optional[conint(ge=1, le=10000)] = 100
