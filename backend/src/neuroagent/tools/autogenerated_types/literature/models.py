# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2025-05-19T12:31:23+00:00

from __future__ import annotations

from typing import Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class ArticleCountResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    article_count: int = Field(..., title='Article Count')


class ArticleMetadata(BaseModel):
    article_title: str = Field(..., title='Article Title')
    article_authors: List[str] = Field(..., title='Article Authors')
    article_id: str = Field(..., title='Article Id')
    article_doi: Optional[str] = Field(None, title='Article Doi')
    pubmed_id: Optional[str] = Field(None, title='Pubmed Id')
    date: Optional[str] = Field(None, title='Date')
    article_type: Optional[str] = Field(None, title='Article Type')
    journal_issn: Optional[str] = Field(None, title='Journal Issn')
    journal_name: Optional[str] = Field(None, title='Journal Name')
    cited_by: Optional[int] = Field(None, title='Cited By')
    impact_factor: Optional[float] = Field(None, title='Impact Factor')
    abstract: Optional[str] = Field(None, title='Abstract')


class ArticleTypeSuggestionResponse(BaseModel):
    article_type: str = Field(..., title='Article Type')
    docs_in_db: int = Field(..., title='Docs In Db')


class AuthorSuggestionResponse(BaseModel):
    name: str = Field(..., title='Name')


class GenerativeQARequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    query: str = Field(..., title='Query')
    retriever_k: Optional[conint(ge=1, le=1000)] = Field(100, title='Retriever K')
    use_reranker: Optional[bool] = Field(True, title='Use Reranker')
    reranker_k: Optional[conint(ge=1, le=100)] = Field(8, title='Reranker K')


class JournalSuggestionResponse(BaseModel):
    title: str = Field(..., title='Title')
    citescore: Optional[float] = Field(..., title='Citescore')
    eissn: Optional[str] = Field(..., title='Eissn')
    snip: Optional[float] = Field(..., title='Snip')
    sjr: Optional[float] = Field(..., title='Sjr')
    print_issn: Optional[str] = Field(..., title='Print Issn')


class PageArticleMetadata(BaseModel):
    items: List[ArticleMetadata] = Field(..., title='Items')
    total: Optional[conint(ge=0)] = Field(None, title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class ParagraphMetadata(BaseModel):
    article_title: str = Field(..., title='Article Title')
    article_authors: List[str] = Field(..., title='Article Authors')
    article_id: str = Field(..., title='Article Id')
    article_doi: Optional[str] = Field(None, title='Article Doi')
    pubmed_id: Optional[str] = Field(None, title='Pubmed Id')
    date: Optional[str] = Field(None, title='Date')
    article_type: Optional[str] = Field(None, title='Article Type')
    journal_issn: Optional[str] = Field(None, title='Journal Issn')
    journal_name: Optional[str] = Field(None, title='Journal Name')
    cited_by: Optional[int] = Field(None, title='Cited By')
    impact_factor: Optional[float] = Field(None, title='Impact Factor')
    abstract: Optional[str] = Field(None, title='Abstract')
    paragraph: str = Field(..., title='Paragraph')
    ds_document_id: str = Field(..., title='Ds Document Id')
    section: Optional[str] = Field(None, title='Section')
    context_id: int = Field(..., title='Context Id')
    reranking_score: Optional[float] = Field(None, title='Reranking Score')


class PassthroughRequest(BaseModel):
    query: str = Field(..., title='Query')


class PassthroughResponse(BaseModel):
    answer: str = Field(..., title='Answer')


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class SuggestionsJournalGetResponse(RootModel[List[JournalSuggestionResponse]]):
    root: List[JournalSuggestionResponse] = Field(
        ..., title='Response Journal Suggestion Suggestions Journal Get'
    )


class SuggestionsAuthorGetResponse(RootModel[List[AuthorSuggestionResponse]]):
    root: List[AuthorSuggestionResponse] = Field(
        ..., title='Response Author Suggestion Suggestions Author Get'
    )


class SuggestionsArticleTypesGetResponse(
    RootModel[List[ArticleTypeSuggestionResponse]]
):
    root: List[ArticleTypeSuggestionResponse] = Field(
        ..., title='Response Article Types Suggestions Article Types Get'
    )


class ArticleTypes(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        ..., description='Article types allowed. OR matching', title='Article Types'
    )


class Authors(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        ..., description='List of authors. OR matching.', title='Authors'
    )


class Journals(RootModel[Optional[List[constr(pattern=r'^\d{4}-\d{3}[0-9X]$')]]]):
    root: Optional[List[constr(pattern=r'^\d{4}-\d{3}[0-9X]$')]] = Field(
        ...,
        description='List of journal issn. OR matching. Format: XXXX-XXXX',
        title='Journals',
    )


class DateFrom(
    RootModel[
        Optional[constr(pattern=r'^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$')]
    ]
):
    root: Optional[constr(pattern=r'^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$')] = (
        Field(
            ...,
            description='Date lowerbound. Includes specified date. Format: YYYY-MM-DD',
            title='Date From',
        )
    )


class DateTo(
    RootModel[
        Optional[constr(pattern=r'^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$')]
    ]
):
    root: Optional[constr(pattern=r'^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$')] = (
        Field(
            ...,
            description='Date upperbound. Includes specified date. Format: YYYY-MM-DD',
            title='Date To',
        )
    )


class RetrievalGetResponse(RootModel[List[ParagraphMetadata]]):
    root: List[ParagraphMetadata] = Field(
        ..., title='Response Retrieval Retrieval  Get'
    )


class Topics(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        ...,
        description='Keyword to be matched in text. AND matching (e.g. for TOPICS).',
        title='Topics',
    )


class Regions(RootModel[Optional[List[str]]]):
    root: Optional[List[str]] = Field(
        ...,
        description='Keyword to be matched in text. OR matching (e.g. for BRAIN_REGIONS).',
        title='Regions',
    )


class NumberResults(RootModel[Optional[conint(ge=1, le=10000)]]):
    root: Optional[conint(ge=1, le=10000)] = Field(
        ...,
        description='Number of results to return. Max 10 000.',
        title='Number Results',
    )


class SortByDate(RootModel[Optional[bool]]):
    root: Optional[bool] = Field(
        ...,
        description='Sort by date True or False. If the latter, we sort by relevance',
        title='Sort By Date',
    )


class FieldDatamodelCodeGeneratorRootSpecialGetResponse(
    RootModel[Optional[Dict[str, str]]]
):
    root: Optional[Dict[str, str]] = None


class GenerativeQAResponse(BaseModel):
    answer: Optional[str] = Field(..., title='Answer')
    paragraphs: List[int] = Field(..., title='Paragraphs')
    metadata: List[ParagraphMetadata] = Field(..., title='Metadata')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')
