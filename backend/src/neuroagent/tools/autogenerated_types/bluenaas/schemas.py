# generated by fastapi-codegen:
#   filename:  openapi.json
#   timestamp: 2025-05-19T12:30:25+00:00

from __future__ import annotations

from typing import Any, Optional, Union

from fastapi import FastAPI
from pydantic import BaseModel, conint

from .models import (
    ApiBluenaasGraphDirectCurrentPlotPostResponse,
    ApiBluenaasNeuronModelVirtualLabIdProjectIdModelIdGetResponse,
    BodyPlaceSynapsesApiBluenaasValidationSynapseFormulaPost,
    CreatedAtEnd,
    CreatedAtStart,
    DeprecateNexusResponse,
    HTTPValidationError,
    ModelType1,
    PaginatedResponseSimulationDetailsResponse,
    PaginatedResponseUnionMEModelResponseSynaptomeModelResponse,
    SimulationDetailsResponse,
    SimulationType1,
    SingleNeuronSimulationConfigInput,
    StimulationPlotConfig,
    SynapsePlacementBody,
    SynapsePlacementResponse,
)


class RootApiBluenaasGetParams(BaseModel):
    """Root."""


class RetrieveStimulationPlotApiBluenaasGraphDirectCurrentPlotPostParams(BaseModel):
    """Retrieve Stimulation Plot."""

    model_self: str
    body: StimulationPlotConfig = ...


class HealthApiBluenaasHealthGetParams(BaseModel):
    """Health."""


class RetrieveMorphologyApiBluenaasMorphologyGetParams(BaseModel):
    """Retrieve Morphology."""

    model_self: Optional[str] = ''


class RetrieveMorphologyDendrogramApiBluenaasMorphologyDendrogramGetParams(BaseModel):
    """Retrieve Morphology Dendrogram."""

    model_id: Optional[str] = ''


class RetrieveNeuronModelsApiBluenaasNeuronModelVirtualLabIdProjectIdMeModelsGetParams(
    BaseModel
):
    """Retrieve all me models for a specific project."""

    virtual_lab_id: str
    project_id: str = ...
    offset: Optional[int] = 0
    page_size: Optional[int] = 20
    model_type: Optional[ModelType1] = None
    created_at_start: Optional[CreatedAtStart] = None
    created_at_end: Optional[CreatedAtEnd] = None


class RetrieveNeuronModelApiBluenaasNeuronModelVirtualLabIdProjectIdModelIdGetParams(
    BaseModel
):
    """Retrieve specific model in a project."""

    virtual_lab_id: str
    project_id: str = ...
    model_id: str = ...


class GetAllSimulationsForProjectApiBluenaasSimulationSingleNeuronVirtualLabIdProjectIdGetParams(
    BaseModel
):
    """
    Returns all simulations in the provided project.
    Please note, the data for simulations does not contain simulation results (x, y points)
    or simulation config to not bloat the response.
    Only nexus simulations that conform with the latest schema are returned.
    ."""

    virtual_lab_id: str
    project_id: str = ...
    simulation_type: Optional[SimulationType1] = None
    offset: Optional[int] = 0
    page_size: Optional[int] = 20
    created_at_start: Optional[CreatedAtStart] = None
    created_at_end: Optional[CreatedAtEnd] = None


class RunSimulationApiBluenaasSimulationSingleNeuronVirtualLabIdProjectIdRunPostParams(
    BaseModel
):
    """Run Simulation."""

    virtual_lab_id: str
    project_id: str = ...
    model_id: str = ...
    realtime: Optional[bool] = True
    body: SingleNeuronSimulationConfigInput = ...


class GetSimulationApiBluenaasSimulationSingleNeuronVirtualLabIdProjectIdSimulationIdGetParams(
    BaseModel
):
    """
    Get results & status for a previously started simulation.
    If simulation is not complete the results are null.
    `simulation_id` should be url encoded.
    ."""

    virtual_lab_id: str
    project_id: str = ...
    simulation_id: str = ...


class DeleteSimulationApiBluenaasSimulationSingleNeuronVirtualLabIdProjectIdSimulationIdDeleteParams(
    BaseModel
):
    """Delete simulation resource."""

    virtual_lab_id: str
    project_id: str = ...
    simulation_id: str = ...


class PlaceSynapsesApiBluenaasSynaptomeGeneratePlacementPostParams(BaseModel):
    """Place Synapses."""

    model_id: str
    body: SynapsePlacementBody = ...


class PlaceSynapsesApiBluenaasValidationSynapseFormulaPostParams(BaseModel):
    """Place Synapses."""

    body: BodyPlaceSynapsesApiBluenaasValidationSynapseFormulaPost
