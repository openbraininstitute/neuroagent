# generated by datamodel-codegen:
#   filename:  https://staging.openbraininstitute.org/api/literature/openapi.json
#   timestamp: 2025-07-01T15:13:42+00:00

from __future__ import annotations

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ArticleCountResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    article_count: int = Field(..., title='Article Count')


class ArticleMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    article_title: str = Field(..., title='Article Title')
    article_authors: list[str] = Field(..., title='Article Authors')
    article_id: str = Field(..., title='Article Id')
    article_doi: str | None = Field(default=None, title='Article Doi')
    pubmed_id: str | None = Field(default=None, title='Pubmed Id')
    date: str | None = Field(default=None, title='Date')
    article_type: str | None = Field(default=None, title='Article Type')
    journal_issn: str | None = Field(default=None, title='Journal Issn')
    journal_name: str | None = Field(default=None, title='Journal Name')
    cited_by: int | None = Field(default=None, title='Cited By')
    impact_factor: float | None = Field(default=None, title='Impact Factor')
    abstract: str | None = Field(default=None, title='Abstract')


class ArticleTypeSuggestionResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    article_type: str = Field(..., title='Article Type')
    docs_in_db: int = Field(..., title='Docs In Db')


class AuthorSuggestionResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., title='Name')


class GenerativeQARequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    query: str = Field(..., title='Query')
    retriever_k: int | None = Field(default=100, ge=1, le=1000, title='Retriever K')
    use_reranker: bool | None = Field(default=True, title='Use Reranker')
    reranker_k: int | None = Field(default=8, ge=1, le=100, title='Reranker K')


class JournalSuggestionResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    title: str = Field(..., title='Title')
    citescore: float | None = Field(..., title='Citescore')
    eissn: str | None = Field(..., title='Eissn')
    snip: float | None = Field(..., title='Snip')
    sjr: float | None = Field(..., title='Sjr')
    print_issn: str | None = Field(..., title='Print Issn')


class Total(RootModel[int]):
    root: int = Field(..., ge=0, title='Total')


class Page(RootModel[int]):
    root: int = Field(..., ge=1, title='Page')


class Size(RootModel[int]):
    root: int = Field(..., ge=1, title='Size')


class Pages(RootModel[int]):
    root: int = Field(..., ge=0, title='Pages')


class PageArticleMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    items: list[ArticleMetadata] = Field(..., title='Items')
    total: Total | None = Field(default=None, title='Total')
    page: Page | None = Field(..., title='Page')
    size: Size | None = Field(..., title='Size')
    pages: Pages | None = Field(default=None, title='Pages')


class ParagraphMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    article_title: str = Field(..., title='Article Title')
    article_authors: list[str] = Field(..., title='Article Authors')
    article_id: str = Field(..., title='Article Id')
    article_doi: str | None = Field(default=None, title='Article Doi')
    pubmed_id: str | None = Field(default=None, title='Pubmed Id')
    date: str | None = Field(default=None, title='Date')
    article_type: str | None = Field(default=None, title='Article Type')
    journal_issn: str | None = Field(default=None, title='Journal Issn')
    journal_name: str | None = Field(default=None, title='Journal Name')
    cited_by: int | None = Field(default=None, title='Cited By')
    impact_factor: float | None = Field(default=None, title='Impact Factor')
    abstract: str | None = Field(default=None, title='Abstract')
    paragraph: str = Field(..., title='Paragraph')
    ds_document_id: str = Field(..., title='Ds Document Id')
    section: str | None = Field(default=None, title='Section')
    context_id: int = Field(..., title='Context Id')
    reranking_score: float | None = Field(default=None, title='Reranking Score')


class PassthroughRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    query: str = Field(..., title='Query')


class PassthroughResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    answer: str = Field(..., title='Answer')


class ValidationError(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    loc: list[str | int] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class JournalSuggestionSuggestionsJournalGetParametersQuery(BaseModel):
    keywords: str = Field(..., title='Keywords')
    limit: int | None = Field(default=100, ge=1, le=10000, title='Limit')


class JournalSuggestionSuggestionsJournalGetResponse(
    RootModel[list[JournalSuggestionResponse]]
):
    root: list[JournalSuggestionResponse] = Field(
        ..., title='Response Journal Suggestion Suggestions Journal Get'
    )


class AuthorSuggestionSuggestionsAuthorGetParametersQuery(BaseModel):
    name: str = Field(..., title='Name')
    limit: int | None = Field(default=100, ge=1, le=1000, title='Limit')


class AuthorSuggestionSuggestionsAuthorGetResponse(
    RootModel[list[AuthorSuggestionResponse]]
):
    root: list[AuthorSuggestionResponse] = Field(
        ..., title='Response Author Suggestion Suggestions Author Get'
    )


class ArticleTypesSuggestionsArticleTypesGetResponse(
    RootModel[list[ArticleTypeSuggestionResponse]]
):
    root: list[ArticleTypeSuggestionResponse] = Field(
        ..., title='Response Article Types Suggestions Article Types Get'
    )


class Journal(RootModel[str]):
    root: str = Field(..., pattern='^\\d{4}-\\d{3}[0-9X]$')


class DateFrom(RootModel[str]):
    root: str = Field(
        ...,
        description='Date lowerbound. Includes specified date. Format: YYYY-MM-DD',
        pattern='^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$',
        title='Date From',
    )


class DateTo(RootModel[str]):
    root: str = Field(
        ...,
        description='Date upperbound. Includes specified date. Format: YYYY-MM-DD',
        pattern='^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$',
        title='Date To',
    )


class GenerativeQaQaGenerativePostParametersQuery(BaseModel):
    article_types: list[str] | None = Field(
        default=None,
        description='Article types allowed. OR matching',
        title='Article Types',
    )
    authors: list[str] | None = Field(
        default=None, description='List of authors. OR matching.', title='Authors'
    )
    journals: list[Journal] | None = Field(
        default=None,
        description='List of journal issn. OR matching. Format: XXXX-XXXX',
        title='Journals',
    )
    date_from: DateFrom | None = Field(
        default=None,
        description='Date lowerbound. Includes specified date. Format: YYYY-MM-DD',
        title='Date From',
    )
    date_to: DateTo | None = Field(
        default=None,
        description='Date upperbound. Includes specified date. Format: YYYY-MM-DD',
        title='Date To',
    )


StreamedGenerativeQaQaStreamedGenerativePostParametersQuery = (
    GenerativeQaQaGenerativePostParametersQuery
)


class RetrievalRetrievalGetParametersQuery(BaseModel):
    article_types: list[str] | None = Field(
        default=None,
        description='Article types allowed. OR matching',
        title='Article Types',
    )
    authors: list[str] | None = Field(
        default=None, description='List of authors. OR matching.', title='Authors'
    )
    journals: list[Journal] | None = Field(
        default=None,
        description='List of journal issn. OR matching. Format: XXXX-XXXX',
        title='Journals',
    )
    date_from: DateFrom | None = Field(
        default=None,
        description='Date lowerbound. Includes specified date. Format: YYYY-MM-DD',
        title='Date From',
    )
    date_to: DateTo | None = Field(
        default=None,
        description='Date upperbound. Includes specified date. Format: YYYY-MM-DD',
        title='Date To',
    )
    query: str = Field(..., title='Query')
    retriever_k: int | None = Field(default=100, ge=1, le=1000, title='Retriever K')
    use_reranker: bool | None = Field(default=True, title='Use Reranker')
    reranker_k: int | None = Field(default=8, ge=1, le=100, title='Reranker K')


class RetrievalRetrievalGetResponse(RootModel[list[ParagraphMetadata]]):
    root: list[ParagraphMetadata] = Field(
        ..., title='Response Retrieval Retrieval  Get'
    )


class ArticleCountRetrievalArticleCountGetParametersQuery(BaseModel):
    topics: list[str] | None = Field(
        default=None,
        description='Keyword to be matched in text. AND matching (e.g. for TOPICS).',
        title='Topics',
    )
    regions: list[str] | None = Field(
        default=None,
        description='Keyword to be matched in text. OR matching (e.g. for BRAIN_REGIONS).',
        title='Regions',
    )
    article_types: list[str] | None = Field(
        default=None,
        description='Article types allowed. OR matching',
        title='Article Types',
    )
    authors: list[str] | None = Field(
        default=None, description='List of authors. OR matching.', title='Authors'
    )
    journals: list[Journal] | None = Field(
        default=None,
        description='List of journal issn. OR matching. Format: XXXX-XXXX',
        title='Journals',
    )
    date_from: DateFrom | None = Field(
        default=None,
        description='Date lowerbound. Includes specified date. Format: YYYY-MM-DD',
        title='Date From',
    )
    date_to: DateTo | None = Field(
        default=None,
        description='Date upperbound. Includes specified date. Format: YYYY-MM-DD',
        title='Date To',
    )


class NumberResults(RootModel[int]):
    root: int = Field(
        ...,
        description='Number of results to return. Max 10 000.',
        ge=1,
        le=10000,
        title='Number Results',
    )


class ArticleListingRetrievalArticleListingGetParametersQuery(BaseModel):
    topics: list[str] | None = Field(
        default=None,
        description='Keyword to be matched in text. AND matching (e.g. for TOPICS).',
        title='Topics',
    )
    regions: list[str] | None = Field(
        default=None,
        description='Keyword to be matched in text. OR matching (e.g. for BRAIN_REGIONS).',
        title='Regions',
    )
    number_results: NumberResults | None = Field(
        default=100,
        description='Number of results to return. Max 10 000.',
        title='Number Results',
    )
    sort_by_date: bool | None = Field(
        default=False,
        description='Sort by date True or False. If the latter, we sort by relevance',
        title='Sort By Date',
    )
    article_types: list[str] | None = Field(
        default=None,
        description='Article types allowed. OR matching',
        title='Article Types',
    )
    authors: list[str] | None = Field(
        default=None, description='List of authors. OR matching.', title='Authors'
    )
    journals: list[Journal] | None = Field(
        default=None,
        description='List of journal issn. OR matching. Format: XXXX-XXXX',
        title='Journals',
    )
    date_from: DateFrom | None = Field(
        default=None,
        description='Date lowerbound. Includes specified date. Format: YYYY-MM-DD',
        title='Date From',
    )
    date_to: DateTo | None = Field(
        default=None,
        description='Date upperbound. Includes specified date. Format: YYYY-MM-DD',
        title='Date To',
    )
    page: int | None = Field(default=1, description='Page number', ge=1, title='Page')
    size: int | None = Field(
        default=50, description='Page size', ge=1, le=100, title='Size'
    )


class ReadyzGetResponse(RootModel[dict[str, str] | None]):
    root: dict[str, str] | None = None


class GenerativeQAResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    answer: str | None = Field(..., title='Answer')
    paragraphs: list[int] = Field(..., title='Paragraphs')
    metadata: list[ParagraphMetadata] = Field(..., title='Metadata')


class HTTPValidationError(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    detail: list[ValidationError] | None = Field(default=None, title='Detail')
