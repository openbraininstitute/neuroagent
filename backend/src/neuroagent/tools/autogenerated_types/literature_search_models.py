# generated by datamodel-codegen:
#   filename:  http://127.0.0.1:8000/openapi.json
#   timestamp: 2025-03-03T10:41:37+00:00
"""Pydantic models for the Literature search API."""

from __future__ import annotations

from typing import Annotated, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ArticleCountResponse(BaseModel):
    """Placeholder."""

    model_config = ConfigDict(
        extra="forbid",
    )
    article_count: Annotated[int, Field(title="Article Count")]


class ArticleMetadata(BaseModel):
    """Placeholder."""

    article_title: Annotated[str, Field(title="Article Title")]
    article_authors: Annotated[List[str], Field(title="Article Authors")]
    article_id: Annotated[str, Field(title="Article Id")]
    article_doi: Annotated[Optional[str], Field(title="Article Doi")] = None
    pubmed_id: Annotated[Optional[str], Field(title="Pubmed Id")] = None
    date: Annotated[Optional[str], Field(title="Date")] = None
    article_type: Annotated[Optional[str], Field(title="Article Type")] = None
    journal_issn: Annotated[Optional[str], Field(title="Journal Issn")] = None
    journal_name: Annotated[Optional[str], Field(title="Journal Name")] = None
    cited_by: Annotated[Optional[int], Field(title="Cited By")] = None
    impact_factor: Annotated[Optional[float], Field(title="Impact Factor")] = None
    abstract: Annotated[Optional[str], Field(title="Abstract")] = None


class ArticleTypeSuggestionResponse(BaseModel):
    """Placeholder."""

    article_type: Annotated[str, Field(title="Article Type")]
    docs_in_db: Annotated[int, Field(title="Docs In Db")]


class AuthorSuggestionResponse(BaseModel):
    """Placeholder."""

    name: Annotated[str, Field(title="Name")]


class GenerativeQARequest(BaseModel):
    """Placeholder."""

    model_config = ConfigDict(
        extra="forbid",
    )
    query: Annotated[str, Field(title="Query")]
    retriever_k: Annotated[Optional[int], Field(ge=1, le=1000, title="Retriever K")] = (
        500
    )
    use_reranker: Annotated[Optional[bool], Field(title="Use Reranker")] = True
    reranker_k: Annotated[Optional[int], Field(ge=1, le=100, title="Reranker K")] = 8


class JournalSuggestionResponse(BaseModel):
    """Placeholder."""

    title: Annotated[str, Field(title="Title")]
    citescore: Annotated[Optional[float], Field(title="Citescore")] = None
    eissn: Annotated[Optional[str], Field(title="Eissn")] = None
    snip: Annotated[Optional[float], Field(title="Snip")] = None
    sjr: Annotated[Optional[float], Field(title="Sjr")] = None
    print_issn: Annotated[Optional[str], Field(title="Print Issn")] = None


class Total(RootModel[int]):
    """Placeholder."""

    root: Annotated[int, Field(ge=0, title="Total")]


class Page(RootModel[int]):
    """Placeholder."""

    root: Annotated[int, Field(ge=1, title="Page")]


class Size(RootModel[int]):
    """Placeholder."""

    root: Annotated[int, Field(ge=1, title="Size")]


class Pages(RootModel[int]):
    """Placeholder."""

    root: Annotated[int, Field(ge=0, title="Pages")]


class PageArticleMetadata(BaseModel):
    """Placeholder."""

    items: Annotated[List[ArticleMetadata], Field(title="Items")]
    total: Annotated[Optional[Total], Field(title="Total")] = None
    page: Annotated[Optional[Page], Field(title="Page")] = None
    size: Annotated[Optional[Size], Field(title="Size")] = None
    pages: Annotated[Optional[Pages], Field(title="Pages")] = None


class ParagraphMetadata(BaseModel):
    """Placeholder."""

    article_title: Annotated[str, Field(title="Article Title")]
    article_authors: Annotated[List[str], Field(title="Article Authors")]
    article_id: Annotated[str, Field(title="Article Id")]
    article_doi: Annotated[Optional[str], Field(title="Article Doi")] = None
    pubmed_id: Annotated[Optional[str], Field(title="Pubmed Id")] = None
    date: Annotated[Optional[str], Field(title="Date")] = None
    article_type: Annotated[Optional[str], Field(title="Article Type")] = None
    journal_issn: Annotated[Optional[str], Field(title="Journal Issn")] = None
    journal_name: Annotated[Optional[str], Field(title="Journal Name")] = None
    cited_by: Annotated[Optional[int], Field(title="Cited By")] = None
    impact_factor: Annotated[Optional[float], Field(title="Impact Factor")] = None
    abstract: Annotated[Optional[str], Field(title="Abstract")] = None
    paragraph: Annotated[str, Field(title="Paragraph")]
    ds_document_id: Annotated[str, Field(title="Ds Document Id")]
    section: Annotated[Optional[str], Field(title="Section")] = None
    context_id: Annotated[int, Field(title="Context Id")]
    reranking_score: Annotated[Optional[float], Field(title="Reranking Score")] = None


class PassthroughRequest(BaseModel):
    """Placeholder."""

    query: Annotated[str, Field(title="Query")]


class PassthroughResponse(BaseModel):
    """Placeholder."""

    answer: Annotated[str, Field(title="Answer")]


class RetrievalRequest(GenerativeQARequest):
    """Placeholder."""

    pass


class ValidationError(BaseModel):
    """Placeholder."""

    loc: Annotated[List[Union[str, int]], Field(title="Location")]
    msg: Annotated[str, Field(title="Message")]
    type: Annotated[str, Field(title="Error Type")]


class GenerativeQAResponse(BaseModel):
    """Placeholder."""

    answer: Annotated[Optional[str], Field(title="Answer")] = None
    paragraphs: Annotated[List[int], Field(title="Paragraphs")]
    metadata: Annotated[List[ParagraphMetadata], Field(title="Metadata")]


class HTTPValidationError(BaseModel):
    """Placeholder."""

    detail: Annotated[Optional[List[ValidationError]], Field(title="Detail")] = None
