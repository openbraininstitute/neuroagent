"""Generated types from obi one."""
# generated by datamodel-codegen:
#   filename:  https://staging.openbraininstitute.org/api/obi-one/openapi.json
#   timestamp: 2025-05-09T09:33:59+00:00

from __future__ import annotations

from typing import Annotated, Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Circuit(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["Circuit"], Field(title="Type")]
    name: Annotated[str, Field(title="Name")]
    path: Annotated[str, Field(title="Path")]


class Name(RootModel[str]):
    """Placeholder."""

    root: Annotated[str, Field(min_length=1, title="Name")]


class NodeSet(RootModel[str]):
    """Placeholder."""

    root: Annotated[str, Field(min_length=1)]


class NodeSets(RootModel[List[NodeSet]]):
    """Placeholder."""

    root: Annotated[List[NodeSet], Field(min_length=1, title="Node Sets")]


class NodeSets1ItemItem(NodeSet):
    """Placeholder."""

    pass


class NodeSets1Item(RootModel[List[NodeSets1ItemItem]]):
    """Placeholder."""

    root: Annotated[List[NodeSets1ItemItem], Field(min_length=1)]


class NodeSets1(RootModel[List[NodeSets1Item]]):
    """Placeholder."""

    root: Annotated[List[NodeSets1Item], Field(min_length=1, title="Node Sets")]


class CombinedNeuronSet(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["CombinedNeuronSet"], Field(title="Type")]
    name: Annotated[Optional[Name], Field(title="Name")] = None
    random_sample: Annotated[
        Optional[Union[int, float, List[Optional[Union[int, float]]]]],
        Field(title="Random Sample"),
    ] = None
    random_seed: Annotated[
        Optional[Union[int, List[int]]], Field(title="Random Seed")
    ] = 0
    node_sets: Annotated[Union[NodeSets, NodeSets1], Field(title="Node Sets")]


class NeuronIds(RootModel[List[int]]):
    """Placeholder."""

    root: Annotated[List[int], Field(min_length=1, title="Neuron Ids")]


class NeuronIds1Item(RootModel[List[int]]):
    """Placeholder."""

    root: Annotated[List[int], Field(min_length=1)]


class NeuronIds1(RootModel[List[NeuronIds1Item]]):
    """Placeholder."""

    root: Annotated[List[NeuronIds1Item], Field(min_length=1, title="Neuron Ids")]


class IDNeuronSet(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["IDNeuronSet"], Field(title="Type")]
    name: Annotated[Optional[Name], Field(title="Name")] = None
    random_sample: Annotated[
        Optional[Union[int, float, List[Optional[Union[int, float]]]]],
        Field(title="Random Sample"),
    ] = None
    random_seed: Annotated[
        Optional[Union[int, List[int]]], Field(title="Random Seed")
    ] = 0
    neuron_ids: Annotated[Union[NeuronIds, NeuronIds1], Field(title="Neuron Ids")]


class IDSynapseSet(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["IDSynapseSet"], Field(title="Type")]
    circuit: Circuit
    synapse_ids: Annotated[
        Union[List[int], List[List[int]]], Field(title="Synapse Ids")
    ]


class MorphologyMetricsOutput(BaseModel):
    """Placeholder."""

    aspect_ratio: Annotated[
        float,
        Field(
            description="Calculates the min/max ratio of the principal direction extents                 along the plane.",
            title="aspect_ratio",
        ),
    ]
    circularity: Annotated[
        float,
        Field(
            description="Calculates the circularity of the morphology points along the plane.",
            title="circularity",
        ),
    ]
    length_fraction_above_soma: Annotated[
        float,
        Field(
            description="Returns the length fraction of the segments that have their midpoints                             higher than the soma.",
            title="length_fraction_above_soma",
        ),
    ]
    max_radial_distance: Annotated[
        float,
        Field(
            description="Get the maximum radial distances of the termination sections.",
            title="max_radial_distance",
        ),
    ]
    number_of_neurites: Annotated[
        int,
        Field(description="Number of neurites in a morph.", title="number_of_neurites"),
    ]
    soma_radius: Annotated[
        float,
        Field(
            description="The radius of the soma in micrometers.",
            title="soma_radius [μm]",
        ),
    ]
    soma_surface_area: Annotated[
        float,
        Field(
            description="The surface area of the soma in square micrometers.",
            title="soma_surface_area [μm^2]",
        ),
    ]


class NamedPath(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["NamedPath"], Field(title="Type")]
    name: Annotated[str, Field(title="Name")]
    path: Annotated[str, Field(title="Path")]


class NodeSet1(RootModel[str]):
    """Placeholder."""

    root: Annotated[str, Field(min_length=1, title="Node Set")]


class NodeSet2Item(NodeSet):
    """Placeholder."""

    pass


class NodeSet2(RootModel[List[NodeSet2Item]]):
    """Placeholder."""

    root: Annotated[List[NodeSet2Item], Field(min_length=1, title="Node Set")]


class PredefinedNeuronSet(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["PredefinedNeuronSet"], Field(title="Type")]
    name: Annotated[Optional[Name], Field(title="Name")] = None
    random_sample: Annotated[
        Optional[Union[int, float, List[Optional[Union[int, float]]]]],
        Field(title="Random Sample"),
    ] = None
    random_seed: Annotated[
        Optional[Union[int, List[int]]], Field(title="Random Seed")
    ] = 0
    node_set: Annotated[Union[NodeSet1, NodeSet2], Field(title="Node Set")]


class PropertySpecs(RootModel[List[Dict[str, Any]]]):
    """Placeholder."""

    root: Annotated[List[Dict[str, Any]], Field(min_length=1, title="Property Specs")]


class NodeSet3(NodeSet):
    """Placeholder."""

    pass


class NodeSets2Item(NodeSet):
    """Placeholder."""

    pass


class NodeSets2(RootModel[List[List[NodeSets2Item]]]):
    """Placeholder."""

    root: Annotated[List[List[NodeSets2Item]], Field(min_length=1, title="Node Sets")]


class PropertyNeuronSet(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["PropertyNeuronSet"], Field(title="Type")]
    name: Annotated[Optional[Name], Field(title="Name")] = None
    random_sample: Annotated[
        Optional[Union[int, float, List[Optional[Union[int, float]]]]],
        Field(title="Random Sample"),
    ] = None
    random_seed: Annotated[
        Optional[Union[int, List[int]]], Field(title="Random Seed")
    ] = 0
    property_specs: Annotated[
        Union[Dict[str, Any], PropertySpecs], Field(title="Property Specs")
    ]
    node_sets: Annotated[
        Optional[Union[List[NodeSet3], NodeSets2]], Field(title="Node Sets")
    ] = []


class ReconstructionMorphologyFromID(BaseModel):
    """Placeholder."""

    model_config = ConfigDict(
        extra="allow",
    )
    id_str: Annotated[
        str, Field(description="ID of the entity in string format.", title="Id Str")
    ]


class RegularTimestamps(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["RegularTimestamps"], Field(title="Type")]
    start_time: Annotated[Union[float, List[float]], Field(title="Start Time")]
    number_of_repetitions: Annotated[
        Union[int, List[int]], Field(title="Number Of Repetitions")
    ]
    interval: Annotated[Union[float, List[float]], Field(title="Interval")]


class RelativeConstantCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[
        Literal["RelativeConstantCurrentClampSomaticStimulus"], Field(title="Type")
    ]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    percentage_of_threshold_current: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The percentage of a cell’s threshold current to inject when the stimulus                     activates.",
            title="Percentage Of Threshold Current",
        ),
    ] = 10.0


class RelativeLinearCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[
        Literal["RelativeLinearCurrentClampSomaticStimulus"], Field(title="Type")
    ]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    percentage_of_threshold_current_start: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The percentage of a cell's threshold current to inject when the stimulus activates.",
            title="Percentage Of Threshold Current Start",
        ),
    ] = 10.0
    percentage_of_threshold_current_end: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="If given, the percentage of a cell's threshold current is interpolated such that the percentage reaches this value when the stimulus concludes.",
            title="Percentage Of Threshold Current End",
        ),
    ] = 100.0


class SectionIntracellularLocationSet(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["SectionIntracellularLocationSet"], Field(title="Type")]
    neuron_ids: Annotated[Union[List[int], List[List[int]]], Field(title="Neuron Ids")]
    section: Annotated[Union[str, List[str]], Field(title="Section")]


class SinusoidalCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[
        Literal["SinusoidalCurrentClampSomaticStimulus"], Field(title="Type")
    ]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    peak_amplitude: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The peak amplitude of the sinusoid. Given in nA.",
            title="Peak Amplitude",
        ),
    ] = 0.1
    frequency: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The frequency of the waveform. Given in Hz.", title="Frequency"
        ),
    ] = 1.0
    dt: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Timestep of generated signal in ms. Default is 0.025 ms.",
            title="Dt",
        ),
    ] = 0.025


class SubthresholdCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[
        Literal["SubthresholdCurrentClampSomaticStimulus"], Field(title="Type")
    ]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    percentage_below_threshold: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="A percentage adjusted from 100 of a cell's threshold current. \\\n                        E.g. 20 will apply 80% of the threshold current. Using a negative \\\n                            value will give more than 100. E.g. -20 will inject 120% of the \\\n                                threshold current.",
            title="Percentage Below Threshold",
        ),
    ] = 0.1


class SynchronousSingleSpikeStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["SynchronousSingleSpikeStimulus"], Field(title="Type")]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    spike_probability: Annotated[
        Union[float, List[float]], Field(title="Spike Probability")
    ]


class ValidationError(BaseModel):
    """Placeholder."""

    loc: Annotated[List[Union[str, int]], Field(title="Location")]
    msg: Annotated[str, Field(title="Message")]
    type: Annotated[str, Field(title="Error Type")]


class XyzLocation(RootModel[List[Any]]):
    """Placeholder."""

    root: Annotated[List[Any], Field(max_length=3, min_length=3)]


class XYZExtracellularLocationSet(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["XYZExtracellularLocationSet"], Field(title="Type")]
    xyz_locations: Annotated[
        Optional[Union[List[XyzLocation], List[List[XyzLocation]]]],
        Field(title="Xyz Locations"),
    ] = [[0.0, 0.0, 0.0]]  # type: ignore


class ObiOneScientificBasicConnectivityPlotsBasicConnectivityPlotsBasicConnectivityPlotsInitialize(
    BaseModel
):
    """Placeholder."""

    type: Annotated[Literal["BasicConnectivityPlots.Initialize"], Field(title="Type")]
    matrix_path: Annotated[
        Union[NamedPath, List[NamedPath]], Field(title="Matrix Path")
    ]
    plot_formats: Annotated[Optional[List[str]], Field(title="Plot Formats")] = [
        "png",
        "pdf",
        "svg",
    ]
    plot_types: Annotated[Optional[List[str]], Field(title="Plot Types")] = [
        "nodes",
        "connectivity_global",
        "connectivity_pathway",
    ]
    dpi: Annotated[Optional[int], Field(title="Dpi")] = 300


class ObiOneScientificCircuitExtractionCircuitExtractionCircuitExtractionsInitialize(
    BaseModel
):
    """Placeholder."""

    type: Annotated[Literal["CircuitExtractions.Initialize"], Field(title="Type")]
    circuit_path: Annotated[
        Union[NamedPath, List[NamedPath]], Field(title="Circuit Path")
    ]
    node_set: Annotated[Union[str, List[str]], Field(title="Node Set")]


class ObiOneScientificConnectivityMatrixExtractionConnectivityMatrixExtractionConnectivityMatrixExtractionsInitialize(
    BaseModel
):
    """Placeholder."""

    type: Annotated[
        Literal["ConnectivityMatrixExtractions.Initialize"], Field(title="Type")
    ]
    circuit_path: Annotated[
        Union[NamedPath, List[NamedPath]], Field(title="Circuit Path")
    ]
    edge_population: Annotated[
        Optional[Union[str, List[Optional[str]]]], Field(title="Edge Population")
    ] = None
    node_attributes: Annotated[
        Optional[Union[List[str], List[Optional[List[str]]]]],
        Field(title="Node Attributes"),
    ] = None


class ObiOneScientificFolderCompressionFolderCompressionFolderCompressionsInitialize(
    BaseModel
):
    """Placeholder."""

    type: Annotated[Literal["FolderCompressions.Initialize"], Field(title="Type")]
    folder_path: Annotated[
        Union[NamedPath, List[NamedPath]], Field(title="Folder Path")
    ]
    file_format: Annotated[
        Optional[Union[str, List[Optional[str]]]], Field(title="File Format")
    ] = "gz"
    file_name: Annotated[
        Optional[Union[str, List[Optional[str]]]], Field(title="File Name")
    ] = "compressed"


class ObiOneScientificMorphologyContainerizationMorphologyContainerizationMorphologyContainerizationsFormInitialize(
    BaseModel
):
    """Placeholder."""

    type: Annotated[
        Literal["MorphologyContainerizationsForm.Initialize"], Field(title="Type")
    ]
    circuit_path: Annotated[
        Union[NamedPath, List[NamedPath]], Field(title="Circuit Path")
    ]
    hoc_template_old: Annotated[str, Field(title="Hoc Template Old")]
    hoc_template_new: Annotated[str, Field(title="Hoc Template New")]


class ObiOneScientificMorphologyMetricsMorphologyMetricsMorphologyMetricsFormInitialize(
    BaseModel
):
    """Placeholder."""

    type: Annotated[Literal["MorphologyMetricsForm.Initialize"], Field(title="Type")]
    morphology: Annotated[
        Union[ReconstructionMorphologyFromID, List[ReconstructionMorphologyFromID]],
        Field(description="3. Morphology description", title="Morphology"),
    ]


class ObiOneScientificSimulationSimulationsSimulationsFormInitialize(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["SimulationsForm.Initialize"], Field(title="Type")]
    circuit: Annotated[Union[List[Circuit], Circuit], Field(title="Circuit")]
    simulation_length: Annotated[
        Optional[Union[List[float], float]], Field(title="Simulation Length")
    ] = 100.0
    node_set: Annotated[
        Union[PredefinedNeuronSet, CombinedNeuronSet, IDNeuronSet, PropertyNeuronSet],
        Field(title="Node Set"),
    ]
    random_seed: Annotated[
        Optional[Union[List[int], int]], Field(title="Random Seed")
    ] = 1
    extracellular_calcium_concentration: Annotated[
        Optional[Union[List[float], float]],
        Field(title="Extracellular Calcium Concentration"),
    ] = 1.1
    v_init: Annotated[
        Optional[Union[List[float], float]], Field(title="V Init")
    ] = -80.0
    sonata_version: Annotated[
        Optional[Union[List[int], int]], Field(title="Sonata Version")
    ] = 1
    target_simulator: Annotated[
        Optional[Union[List[str], str]], Field(title="Target Simulator")
    ] = "CORENEURON"
    timestep: Annotated[
        Optional[Union[List[float], float]], Field(title="Timestep")
    ] = 0.025


class ObiOneScientificTestFormsTestFormSingleBlockSingleBlockEntityTestFormInitialize(
    BaseModel
):
    """Placeholder."""

    type: Annotated[
        Literal["SingleBlockEntityTestForm.Initialize"], Field(title="Type")
    ]
    morphology: Annotated[
        Union[ReconstructionMorphologyFromID, List[ReconstructionMorphologyFromID]],
        Field(title="Morphology"),
    ]


class ObiOneScientificTestFormsTestFormSingleBlockSingleBlockGenerateTestFormInitialize(
    BaseModel
):
    """Placeholder."""

    type: Annotated[
        Literal["SingleBlockGenerateTestForm.Initialize"], Field(title="Type")
    ]
    morphology_path: Annotated[
        Union[NamedPath, List[NamedPath]], Field(title="Morphology Path")
    ]


class BasicConnectivityPlots(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["BasicConnectivityPlots"], Field(title="Type")]
    initialize: ObiOneScientificBasicConnectivityPlotsBasicConnectivityPlotsBasicConnectivityPlotsInitialize


class CircuitExtractions(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["CircuitExtractions"], Field(title="Type")]
    initialize: (
        ObiOneScientificCircuitExtractionCircuitExtractionCircuitExtractionsInitialize
    )


class ConnectivityMatrixExtractions(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["ConnectivityMatrixExtractions"], Field(title="Type")]
    initialize: ObiOneScientificConnectivityMatrixExtractionConnectivityMatrixExtractionConnectivityMatrixExtractionsInitialize


class ConstantCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["ConstantCurrentClampSomaticStimulus"], Field(title="Type")]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    amplitude: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="The injected current. Given in nA.", title="Amplitude"),
    ] = 0.1


class FolderCompressions(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["FolderCompressions"], Field(title="Type")]
    initialize: (
        ObiOneScientificFolderCompressionFolderCompressionFolderCompressionsInitialize
    )


class HTTPValidationError(BaseModel):
    """Placeholder."""

    detail: Annotated[Optional[List[ValidationError]], Field(title="Detail")] = None


class HyperpolarizingCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[
        Literal["HyperpolarizingCurrentClampSomaticStimulus"], Field(title="Type")
    ]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False


class IntracellularLocationSetVoltageRecording(BaseModel):
    """Placeholder."""

    type: Annotated[
        Literal["IntracellularLocationSetVoltageRecording"], Field(title="Type")
    ]
    start_time: Annotated[Union[float, List[float]], Field(title="Start Time")]
    end_time: Annotated[Union[float, List[float]], Field(title="End Time")]
    recording_type: Annotated[Optional[str], Field(title="Recording Type")] = "voltage"
    dt: Annotated[Optional[Union[float, List[float]]], Field(title="Dt")] = 0.1
    intracellular_location_set: SectionIntracellularLocationSet


class LinearCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["LinearCurrentClampSomaticStimulus"], Field(title="Type")]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    amplitude_start: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The amount of current initially injected when the stimulus activates. Given in nA.",
            title="Amplitude Start",
        ),
    ] = 0.1
    amplitude_end: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="If given, current is interpolated such that current reaches this value when the stimulus concludes. Otherwise, current stays at amp_start. Given in nA",
            title="Amplitude End",
        ),
    ] = 0.2


class MorphologyContainerizationsForm(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["MorphologyContainerizationsForm"], Field(title="Type")]
    initialize: ObiOneScientificMorphologyContainerizationMorphologyContainerizationMorphologyContainerizationsFormInitialize


class MorphologyMetricsForm(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["MorphologyMetricsForm"], Field(title="Type")]
    initialize: ObiOneScientificMorphologyMetricsMorphologyMetricsMorphologyMetricsFormInitialize


class MultiPulseCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[
        Literal["MultiPulseCurrentClampSomaticStimulus"], Field(title="Type")
    ]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    amplitude: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The amount of current initially injected when each pulse activates. Given in nA.",
            title="Amplitude",
        ),
    ] = 0.1
    width: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The length of time each pulse lasts. Given in ms.",
            title="Width",
        ),
    ] = 1.0
    frequency: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The frequency of pulse trains. Given in Hz.", title="Frequency"
        ),
    ] = 1.0


class NoiseCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["NoiseCurrentClampSomaticStimulus"], Field(title="Type")]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    mean_amplitude: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The mean value of current to inject. Given in nA.",
            title="Mean Amplitude",
        ),
    ] = 0.01
    variance: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The variance around the mean of current to inject using a                     normal distribution.",
            title="Variance",
        ),
    ] = 0.01


class PercentageNoiseCurrentClampSomaticStimulus(BaseModel):
    """Placeholder."""

    type: Annotated[
        Literal["PercentageNoiseCurrentClampSomaticStimulus"], Field(title="Type")
    ]
    name: Annotated[str, Field(description="Name of the stimulus.", title="Name")]
    timestamps: RegularTimestamps
    delay: Annotated[
        Optional[Union[float, List[float]]],
        Field(description="Time in ms when input is activated.", title="Delay"),
    ] = 0.0
    duration: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="Time duration in ms for how long input is activated.",
            title="Duration",
        ),
    ] = 1.0
    neuron_set: Annotated[
        Union[
            PredefinedNeuronSet,
            CombinedNeuronSet,
            IDNeuronSet,
            PropertyNeuronSet,
            List[
                Union[
                    PredefinedNeuronSet,
                    CombinedNeuronSet,
                    IDNeuronSet,
                    PropertyNeuronSet,
                ]
            ],
        ],
        Field(
            description="Neuron set to which the stimulus is applied.",
            title="Neuron Set",
        ),
    ]
    represents_physical_electrode: Annotated[
        Optional[bool],
        Field(
            description="Default is False. If True, the signal will be implemented                         using a NEURON IClamp mechanism. The IClamp produce an                         electrode current which is not included in the calculation of                         extracellular signals, so this option should be used to                         represent a physical electrode. If the noise signal represents                         synaptic input, represents_physical_electrode should be set to                         False, in which case the signal will be implemented using a                         MembraneCurrentSource mechanism, which is identical to IClamp,                         but produce a membrane current, which is included in the                         calculation of the extracellular signal.",
            title="Represents Physical Electrode",
        ),
    ] = False
    mean_percentage_of_threshold_current: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The mean value of current to inject as a percentage of a cell's                     threshold current.",
            title="Mean Percentage Of Threshold Current",
        ),
    ] = 0.01
    variance: Annotated[
        Optional[Union[float, List[float]]],
        Field(
            description="The variance around the mean of current to inject using a                     normal distribution.",
            title="Variance",
        ),
    ] = 0.01


class SimulationsForm(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["SimulationsForm"], Field(title="Type")]
    timestamps: Annotated[
        Dict[str, RegularTimestamps],
        Field(description="Timestamps for the simulation", title="Timestamps"),
    ]
    stimuli: Annotated[
        Dict[
            str,
            Union[
                SynchronousSingleSpikeStimulus,
                ConstantCurrentClampSomaticStimulus,
                LinearCurrentClampSomaticStimulus,
                RelativeConstantCurrentClampSomaticStimulus,
                MultiPulseCurrentClampSomaticStimulus,
                SinusoidalCurrentClampSomaticStimulus,
                SubthresholdCurrentClampSomaticStimulus,
                HyperpolarizingCurrentClampSomaticStimulus,
                NoiseCurrentClampSomaticStimulus,
                PercentageNoiseCurrentClampSomaticStimulus,
                RelativeLinearCurrentClampSomaticStimulus,
            ],
        ],
        Field(title="Stimuli"),
    ]
    recordings: Annotated[
        Dict[str, IntracellularLocationSetVoltageRecording], Field(title="Recordings")
    ]
    neuron_sets: Annotated[
        Dict[
            str,
            Union[
                PredefinedNeuronSet, CombinedNeuronSet, IDNeuronSet, PropertyNeuronSet
            ],
        ],
        Field(title="Neuron Sets"),
    ]
    synapse_sets: Annotated[Dict[str, IDSynapseSet], Field(title="Synapse Sets")]
    intracellular_location_sets: Annotated[
        Dict[str, SectionIntracellularLocationSet],
        Field(title="Intracellular Location Sets"),
    ]
    extracellular_location_sets: Annotated[
        Dict[str, XYZExtracellularLocationSet],
        Field(title="Extracellular Location Sets"),
    ]
    initialize: ObiOneScientificSimulationSimulationsSimulationsFormInitialize


class SingleBlockEntityTestForm(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["SingleBlockEntityTestForm"], Field(title="Type")]
    initialize: (
        ObiOneScientificTestFormsTestFormSingleBlockSingleBlockEntityTestFormInitialize
    )


class SingleBlockGenerateTestForm(BaseModel):
    """Placeholder."""

    type: Annotated[Literal["SingleBlockGenerateTestForm"], Field(title="Type")]
    initialize: ObiOneScientificTestFormsTestFormSingleBlockSingleBlockGenerateTestFormInitialize
