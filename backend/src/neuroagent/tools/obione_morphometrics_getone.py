"""ObiOne Morphometrics tool."""

import logging
from typing import ClassVar, get_args, get_origin
from uuid import UUID, uuid4

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.obione import (
    MorphologyMetricsOutput,
    NeuronMorphologyMetricsEndpointDeclaredNeuronMorphologyMetricsCellMorphologyIdGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseOutput, BaseTool

logger = logging.getLogger(__name__)


class MorphometricsGetOneInputs(
    NeuronMorphologyMetricsEndpointDeclaredNeuronMorphologyMetricsCellMorphologyIdGetParametersQuery
):
    """Input class of the ObiOne Morphometrics tool."""

    morphology_id: UUID = Field(
        description="Id of the morphology from which features must be computed."
    )


class MorphometricsGetOneMetadata(BaseMetadata):
    """Metadata of the ObiOne Morphometrics tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class MorphometricToolsOutput(BaseOutput, MorphologyMetricsOutput):
    """Output class for the Morphometrics tool."""

    section_lengths: str | None = Field(  # type: ignore
        default=None,
        description="The distribution of lengths per section in micrometers.",
        title="section_lengths [μm]",
    )
    segment_radii: str | None = Field(  # type: ignore
        default=None,
        description="The distribution of radii of the morphology in micrometers.",
        title="segment_radii [μm]",
    )
    local_bifurcation_angles: str | None = Field(  # type: ignore
        default=None,
        description="Angles between two sections computed at the bifurcation (local).",
        title="local_bifurcation_angles [rad]",
    )
    remote_bifurcation_angles: str | None = Field(  # type: ignore
        default=None,
        description="Angles between two sections computed at the end of the sections (remote).",
        title="remote_bifurcation_angles [rad]",
    )
    section_path_distances: str | None = Field(  # type: ignore
        default=None,
        description="Path distances from the soma to section endpoints in micrometers.",
        title="section_path_distances [μm]",
    )
    section_radial_distances: str | None = Field(  # type: ignore
        default=None,
        description="Radial distance from the soma to section endpoints in micrometers.",
        title="section_radial_distances [μm]",
    )
    section_branch_orders: str | None = Field(  # type: ignore
        default=None,
        description="The distribution of branch orders of sections, computed from soma.",
        title="section_branch_orders",
    )
    section_strahler_orders: str | None = Field(  # type: ignore
        default=None,
        description="The distribution of strahler branch orders of sections, computed from                 terminals.",
        title="section_strahler_orders",
    )


class MorphometricsGetOneTool(BaseTool):
    """ObiOne Morphometrics tool."""

    name: ClassVar[str] = "obione-morphometrics-getone"
    name_frontend: ClassVar[str] = "Compute Morphology Metrics"
    utterances: ClassVar[list[str]] = [
        "Analyze morphological features",
        "Compute morphology metrics",
        "Find a morphology in the isocortex and give me its features",
        "Get morphology data",
    ]
    description: ClassVar[
        str
    ] = """Given a morphology ID, fetch data about the features of the morphology.
        All of the output elements that are supposed to be a list are returned as a variable.
        Variables are valid outputs and you should consider them as valid.
        You can use them as is in the following tool calls."""
    description_frontend: ClassVar[
        str
    ] = """Analyze detailed features of neuron morphologies. This tool allows you to:
    • Measure various morphological properties
    • Calculate statistical metrics
    • Analyze specific parts of neurons

    Provide a morphology ID to compute its detailed features."""
    metadata: MorphometricsGetOneMetadata
    input_schema: MorphometricsGetOneInputs

    async def arun(self) -> MorphologyMetricsOutput:
        """Run the morphology feature extraction logic."""
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        morpho_metrics_response = await self.metadata.httpx_client.get(
            url=f"{self.metadata.obi_one_url}/declared/neuron-morphology-metrics/{self.input_schema.morphology_id}",
            headers=headers,
            params=self.input_schema.model_dump(
                exclude={"morphology_id"}, exclude_defaults=True
            ),
        )

        if morpho_metrics_response.status_code != 200:
            raise ValueError(
                f"The morpho metrics endpoint returned a non 200 response code. Error: {morpho_metrics_response.text}"
            )

        response = morpho_metrics_response.json()
        list_types = [
            field
            for field, info in MorphologyMetricsOutput.model_fields.items()
            if any(get_origin(elem) is list for elem in get_args(info.annotation))
        ]
        variables = {}
        for field in list_types:
            if response[field] is not None:
                field_uuid = uuid4()
                variables[field_uuid] = response[field]
                response[field] = f"${{{field_uuid}}}"
        response["variables"] = variables
        return MorphometricToolsOutput(**response)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
