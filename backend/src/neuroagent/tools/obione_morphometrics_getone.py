"""ObiOne Morphometrics tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.obione import (
    MorphologyMetricsOutput,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class MorphometricsGetOneInputs(BaseModel):
    """Input class of the ObiOne Morphometrics tool."""

    morphology_id: str = Field(
        description="Id of the morphology from which features must be computed."
    )


class MorphometricsGetOneMetadata(BaseMetadata):
    """Metadata of the ObiOne Morphometrics tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class MorphometricsGetOneTool(BaseTool):
    """ObiOne Morphometrics tool."""

    name: ClassVar[str] = "obione-morphometrics-getone"
    name_frontend: ClassVar[str] = "Compute Morphology Metrics"
    description: ClassVar[str] = (
        """Given a morphology ID, fetch data about the features of the morphology."""
    )
    description_frontend: ClassVar[
        str
    ] = """Analyze detailed features of neuron morphologies. This tool allows you to:
    • Measure various morphological properties
    • Calculate statistical metrics
    • Analyze specific parts of neurons

    Provide a morphology ID to compute its detailed features."""
    metadata: MorphometricsGetOneMetadata
    input_schema: MorphometricsGetOneInputs

    async def arun(self) -> MorphologyMetricsOutput:
        """Run the morphology feature extraction logic."""
        logger.info(
            f"Entering ObiOne Morphometrics tool. Inputs: {self.input_schema.model_dump()}"
        )
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        morpho_metrics_response = await self.metadata.httpx_client.get(
            url=f"{self.metadata.obi_one_url}/declared/neuron-morphology-metrics/{self.input_schema.morphology_id}",
            headers=headers,
        )

        if morpho_metrics_response.status_code != 200:
            raise ValueError(
                f"The morpho metrics endpoint returned a non 200 response code. Error: {morpho_metrics_response.text}"
            )
        return MorphologyMetricsOutput(**morpho_metrics_response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
