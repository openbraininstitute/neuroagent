"""Get Brain Region tool."""

from typing import ClassVar

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseBrainRegionRead,
    ReadManyBrainRegionGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class BrainRegionGetAllInput(ReadManyBrainRegionGetParametersQuery):
    """Inputs for the brain region get all tool."""

    page_size: int = Field(
        ge=1,
        le=10,
        default=5,
        description="Number of items per page",
    )


class BrainRegionGetAllMetadata(BaseMetadata):
    """Metadata class for BrainRegionGetAllTool."""

    httpx_client: AsyncClient
    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class BrainRegionGetAllTool(BaseTool):
    """Class defining the Get Brain Region logic."""

    name: ClassVar[str] = "entitycore-brainregion-getall"
    name_frontend: ClassVar[str] = "Get All Brain Regions"
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve brain regions.
    The output is a list of brain regions, containing:
    - The brain region ID
    - The brain region name
    - The brain region acronym
    - The brain region annotation value
    - The brain region color hex triplet
    - The brain region hierarchy information
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve brain regions. Use this tool to:
    • Find brain regions by name or acronym
    • Access detailed brain region data
    • Filter brain regions by various criteria

    Specify optional criteria to find relevant brain regions."""
    metadata: BrainRegionGetAllMetadata
    input_schema: BrainRegionGetAllInput

    async def arun(self) -> ListResponseBrainRegionRead:
        """Extract brain regions.

        Returns
        -------
            list of brain regions and their metadata, or an error dict.
        """
        query_params = self.input_schema.model_dump(exclude_defaults=True, mode="json")
        if "page_size" not in query_params:
            query_params["page_size"] = 5

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/brain-region",
            headers=headers,
            params=query_params,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The brain-region endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        return ListResponseBrainRegionRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
