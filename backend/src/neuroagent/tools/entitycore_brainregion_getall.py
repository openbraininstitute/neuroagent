"""Get Brain Region tool."""

from typing import ClassVar

from httpx import AsyncClient
from pydantic import Field
from pydantic.json_schema import SkipJsonSchema

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseBrainRegionRead,
    ReadManyBrainRegionGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata


class BrainRegionGetAllInput(ReadManyBrainRegionGetParametersQuery):
    """Inputs for the brain region get all tool."""

    page_size: int = Field(
        ge=1,
        le=10,
        default=5,
        description="Number of items per page",
    )
    semantic_search: str | None = Field(
        default=None,
        title="Brain Region Name Search",
        description="Perform semantic search to find brain regions by their names. Enter any text related to a brain region name (e.g., 'hippocampus', 'frontal cortex', 'amygdala') and receive results ranked by semantic similarity to your query.",
    )
    name: SkipJsonSchema[None] = Field(default=None, exclude=True)
    name__in: SkipJsonSchema[None] = Field(default=None, exclude=True)
    name__ilike: SkipJsonSchema[None] = Field(default=None, exclude=True)


class BrainRegionGetAllTool(BaseTool):
    """Class defining the Get Brain Region logic."""

    name: ClassVar[str] = "entitycore-brainregion-getall"
    name_frontend: ClassVar[str] = "Get All Brain Regions"
    utterances: ClassVar[list[str]] = [
        "Find a morphology in the isocortex and give me its features",
        "Find brain regions",
        "Show me available brain regions",
        "What brain regions are there?",
    ]
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve brain regions.
    The output is a list of brain regions, containing:
    - The brain region ID
    - The brain region name
    - The brain region acronym
    - The brain region annotation value
    - The brain region color hex triplet
    - The brain region hierarchy information

    Note: The semantic_search parameter will always return results even for irrelevant queries - critically evaluate whether returned brain regions are actually related to your search terms.
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve brain regions. Use this tool to:
    • Find brain regions by name or acronym
    • Access detailed brain region data
    • Filter brain regions by various criteria

    Specify optional criteria to find relevant brain regions."""
    metadata: EntitycoreMetadata
    input_schema: BrainRegionGetAllInput

    async def arun(self) -> ListResponseBrainRegionRead:
        """Extract brain regions.

        Returns
        -------
            list of brain regions and their metadata, or an error dict.
        """
        query_params = self.input_schema.model_dump(exclude_defaults=True, mode="json")
        query_params["page_size"] = self.input_schema.page_size

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/brain-region",
            headers=headers,
            params=query_params,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The brain-region endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        return ListResponseBrainRegionRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
