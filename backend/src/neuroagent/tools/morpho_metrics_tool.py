"""MorphoMetrics tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.obione.models import (
    MorphologyMetricsOutput,
    ProjectId,
    VirtualLabId,
)
from neuroagent.tools.autogenerated_types.obione.schemas import (
    NeuronMorphologyMetricsEndpointDeclaredNeuronMorphologyMetricsReconstructionMorphologyIdGetParams,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class MorphoMetricsInputs(BaseModel):
    """Input class of the MorphoMetrics tool."""

    morphology_id: str = Field(
        description="Id of the morphology from which features must be computed."
    )


class MorphoMetricsMetadata(BaseMetadata):
    """Metadata of the MorphoMetrics tool."""

    token: str
    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class MorphoMetricsTool(BaseTool):
    """Morphometrics tool."""

    name: ClassVar[str] = "morpho-metrics-tool"
    name_frontend: ClassVar[str] = "MorphoMetrics"
    description: ClassVar[str] = (
        """Given a morphology ID, fetch data about the features of the morphology."""
    )
    description_frontend: ClassVar[
        str
    ] = """Analyze detailed features of neuron morphologies. This tool allows you to:
    • Measure various morphological properties
    • Calculate statistical metrics
    • Analyze specific parts of neurons

    Provide a morphology ID to compute its detailed features."""
    metadata: MorphoMetricsMetadata
    input_schema: MorphoMetricsInputs

    async def arun(self) -> MorphologyMetricsOutput:
        """Run the morphology feature extraction logic."""
        logger.info(
            f"Entering MorphoMetrics tool. Inputs: {self.input_schema.model_dump()}"
        )
        params = NeuronMorphologyMetricsEndpointDeclaredNeuronMorphologyMetricsReconstructionMorphologyIdGetParams(
            reconstruction_morphology_id=self.input_schema.morphology_id,
            virtual_lab_id=VirtualLabId(self.metadata.vlab_id),
            project_id=ProjectId(self.metadata.project_id),
        )

        morpho_metrics_response = await self.metadata.httpx_client.get(
            url=f"{self.metadata.obi_one_url}/declared/neuron-morphology-metrics/{params.reconstruction_morphology_id}",
            headers={
                "Authorization": f"Bearer {self.metadata.token}",
                **{
                    k: str(v)
                    for k, v in params.model_dump(
                        exclude={"reconstruction_morphology_id"}
                    ).items()
                    if v is not None
                },
            },
        )

        if morpho_metrics_response.status_code != 200:
            raise ValueError(
                f"The morpho metrics endpoint returned a non 200 response code. Error: {morpho_metrics_response.text}"
            )
        logger.info(morpho_metrics_response.json())
        return MorphologyMetricsOutput(**morpho_metrics_response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
