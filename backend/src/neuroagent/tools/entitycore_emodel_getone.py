"""Get One EModel tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.schemas import EntitycoreMetadata
from neuroagent.tools.autogenerated_types.entitycore import (
    EModelReadExpanded,
)
from neuroagent.tools.base_tool import BaseTool

logger = logging.getLogger(__name__)


class EModelGetOneInput(BaseModel):
    """Inputs of the knowledge graph API."""

    emodel_id: UUID = Field(description="ID of the e-model of interest in UUID format.")


class EModelGetOneTool(BaseTool):
    """Class defining the Get One EModel logic."""

    name: ClassVar[str] = "entitycore-emodel-getone"
    name_frontend: ClassVar[str] = "Get One E-Model"
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific e-model from the knowledge graph.
    Requires an 'emodel_id' which is the ID of the e-model of interest as registered in the knowledge graph.
    The output contains detailed information about the e-model, including:
    - The e-model ID
    - The e-model name
    - The e-model description
    - The e-model iteration
    - The e-model score
    - The associated species
    - The associated brain region
    - The associated e-types and m-types
    - Creation and update date
    - Assets
    - Ion channel models
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific e-model. Use this tool to:
    • View complete e-model details
    • Access associated metadata
    • Get species and brain region information
    • View associated e-types and m-types

    Specify the e-model ID to retrieve its full details."""
    metadata: EntitycoreMetadata
    input_schema: EModelGetOneInput

    async def arun(self) -> EModelReadExpanded:
        """From an e-model ID, extract detailed e-model information.

        Returns
        -------
            EModelReadExpanded containing detailed e-model information, or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/emodel/{self.input_schema.emodel_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The emodel endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()

        return EModelReadExpanded(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
