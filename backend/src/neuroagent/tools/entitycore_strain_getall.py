"""Get Strain tool."""

from typing import ClassVar

from httpx import AsyncClient

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseStrainRead,
    ReadManyStrainGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class StrainGetAllMetadata(BaseMetadata):
    """Metadata class for StrainGetAllTool."""

    httpx_client: AsyncClient
    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class StrainGetAllTool(BaseTool):
    """Class defining the Get Strain logic."""

    name: ClassVar[str] = "entitycore-strain-getall"
    name_frontend: ClassVar[str] = "Get All Strains"
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve strains.
    The output is a list of strains, containing:
    - The strain ID
    - The strain name
    - The strain taxonomy ID
    - The species ID
    - Creation and update dates
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve strains. Use this tool to:
    • Find strains by name
    • Access detailed strain data

    Specify optional criteria to find relevant strains."""
    metadata: StrainGetAllMetadata
    input_schema: ReadManyStrainGetParametersQuery

    async def arun(self) -> ListResponseStrainRead:
        """Extract strains.

        Returns
        -------
            list of strains and their metadata, or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/strain",
            headers=headers,
            params=self.input_schema.model_dump(exclude_defaults=True, mode="json"),
        )
        if response.status_code != 200:
            raise ValueError(
                f"The strain endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        return ListResponseStrainRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
