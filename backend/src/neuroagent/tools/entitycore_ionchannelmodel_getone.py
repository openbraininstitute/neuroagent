"""Get One Ion Channel Model tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    IonChannelModelRead,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class IonChannelModelGetOneInput(BaseModel):
    """Inputs of the ion channel model get one tool."""

    ion_channel_model_id: UUID = Field(
        description="ID of the ion channel model of interest in UUID format."
    )


class IonChannelModelGetOneMetadata(BaseMetadata):
    """Metadata class for IonChannelModelGetOneTool."""

    entitycore_url: str
    httpx_client: AsyncClient
    vlab_id: str | None
    project_id: str | None


class IonChannelModelGetOneTool(BaseTool):
    """Class defining the Get One Ion Channel Model logic."""

    name: ClassVar[str] = "entitycore-ionchannelmodel-getone"
    name_frontend: ClassVar[str] = "Get One Ion Channel Model"
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific ion channel model from the knowledge graph.
    Requires an 'ion_channel_model_id' which is the ID of the ion channel model of interest as registered in the knowledge graph.
    The output contains detailed information about the ion channel model, including:
    - The ion channel model ID
    - The ion channel model name
    - The ion channel model description
    - The subject information
    - The measurements
    - The assets
    - The contributions
    - The brain region information
    - The mtypes
    - Any additional metadata
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific ion channel model. Use this tool to:
    • View complete ion channel model details
    • Access associated metadata
    • Get brain region and subject information
    • Access ion channel model assets and measurements

    Specify the ion channel model ID to retrieve its full details."""
    metadata: IonChannelModelGetOneMetadata
    input_schema: IonChannelModelGetOneInput

    async def arun(self) -> IonChannelModelRead:
        """From an ion channel model ID, extract detailed ion channel model information.

        Returns
        -------
            IonChannelModelRead containing detailed ion channel model information, or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/ion-channel-model/{self.input_schema.ion_channel_model_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The ion channel model endpoint returned a non 200 response code. Error: {response.text}"
            )
        return IonChannelModelRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
