"""Get All Electrical Cell Recordings tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ListResponseElectricalCellRecordingRead,
    ReadManyElectricalCellRecordingGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class ElectricalCellRecordingGetAllInput(BaseModel):
    """Inputs for the electrical cell recording get all tool."""

    brain_region_id: str = Field(
        description="ID of the brain region of interest in UUID format. To find the ID use the resolve-brain-region-tool first."
    )
    page_size: int = Field(default=10, description="Number of results per page.")
    page: int = Field(default=1, description="Page number for pagination.")
    recording_type: str | None = Field(
        default=None,
        description="Type of recording (e.g. current_clamp, voltage_clamp, etc.)",
    )
    recording_origin: str | None = Field(
        default=None,
        description="Origin of recording (e.g. in_vivo, in_vitro, in_silico)",
    )


class ElectricalCellRecordingGetAllMetadata(BaseMetadata):
    """Metadata class for ElectricalCellRecordingGetAllTool."""

    httpx_client: AsyncClient
    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class ElectricalCellRecordingGetAllTool(BaseTool):
    """Class defining the Get All Electrical Cell Recordings logic."""

    name: ClassVar[str] = "entitycore-electricalcellrecording-getall"
    name_frontend: ClassVar[str] = "Get All Electrical Cell Recordings"
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve electrical cell recordings.
    Requires a 'brain_region_id' which is the ID of the brain region of interest as registered in the knowledge graph.
    Optionally accepts recording_type and recording_origin filters.
    The output is a list of electrical cell recordings, containing:
    - The brain region ID.
    - The brain region name.
    - The subject species name.
    - The recording ID.
    - The recording name.
    - The recording description.
    - The recording type.
    - The recording origin.
    - The recording location.
    - The liquid junction potential.
    - Any additional metadata.

    We explicitly exclude the assets and the legacy id but you can access them using the Get One Electrical Cell Recording tool.
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve electrical cell recordings. Use this tool to:
    • Find recordings in specific brain regions
    • Filter by recording type and origin
    • Access detailed recording data

    Specify brain region and optional criteria to find relevant recordings."""
    metadata: ElectricalCellRecordingGetAllMetadata
    input_schema: ElectricalCellRecordingGetAllInput

    async def arun(self) -> ListResponseElectricalCellRecordingRead:
        """From a brain region ID, extract electrical cell recordings.

        Returns
        -------
            list of ElectricalCellRecordingRead to describe the recordings and their metadata, or an error dict.
        """
        logger.info(
            f"Entering Get All Electrical Cell Recordings tool. Inputs: {self.input_schema.model_dump()}"
        )

        query_params = ReadManyElectricalCellRecordingGetParametersQuery(
            page_size=self.input_schema.page_size,
            page=self.input_schema.page,
            within_brain_region_hierarchy_id=UUID(
                "e3e70682-c209-4cac-a29f-6fbed82c07cd"
            ),
            within_brain_region_brain_region_id=UUID(self.input_schema.brain_region_id),
            within_brain_region_ascendants=False,
            recording_type=self.input_schema.recording_type,
            recording_origin=self.input_schema.recording_origin,
        )

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/electrical-cell-recording",
            headers=headers,
            params=query_params.model_dump(exclude_defaults=True),
        )
        if response.status_code != 200:
            raise ValueError(
                f"The electrical cell recording endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()
        # Set assets and legacy_id to empty lists for each recording
        for recording in response_data["data"]:
            recording["assets"] = []
            recording["legacy_id"] = []

        return ListResponseElectricalCellRecordingRead(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
