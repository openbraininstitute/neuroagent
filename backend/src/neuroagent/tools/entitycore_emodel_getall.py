"""Get EModel tool."""

import logging
from typing import Any, ClassVar

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.entitycore import (
    EModelReadExpanded,
    ListResponseEModelReadExpanded,
    ReadManyEmodelGetParametersQuery,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class EModelReadExpandedModified(EModelReadExpanded):
    """Modified EModelReadExpanded to exclude assets and ion_channel_models."""

    assets: Any = Field(exclude=True)
    ion_channel_models: Any = Field(exclude=True)


class EModelGetAllMetadata(BaseMetadata):
    """Metadata class for EModelGetAllTool."""

    httpx_client: AsyncClient
    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class EModelGetAllTool(BaseTool):
    """Class defining the Get EModel logic."""

    name: ClassVar[str] = "entitycore-emodel-getall"
    name_frontend: ClassVar[str] = "Get All E-Models"
    description: ClassVar[
        str
    ] = """Searches a neuroscience based knowledge graph to retrieve e-models.
    The output is a list of e-models, containing:
    - The e-model ID
    - The e-model name
    - The e-model description
    - The e-model iteration
    - The e-model score
    - The associated species
    - The associated brain region
    - The associated e-types and m-types
    - Creation and update dates

    We explicitly exclude the assets and ion channel models but you can access them using the Get One E-Model tool.
    """
    description_frontend: ClassVar[
        str
    ] = """Search and retrieve e-models. Use this tool to:
    • Find e-models by name
    • Filter by brain region
    • Filter by species
    • Access detailed e-model data

    Specify optional criteria to find relevant e-models."""
    metadata: EModelGetAllMetadata
    input_schema: ReadManyEmodelGetParametersQuery

    async def arun(self) -> ListResponseEModelReadExpanded:
        """Extract e-models.

        Returns
        -------
            list of e-models and their metadata, or an error dict.
        """
        logger.info(
            f"Entering Get EModel tool. Inputs: {self.input_schema.model_dump()}"
        )

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/") + "/emodel",
            headers={
                **(
                    {"virtual-lab-id": self.metadata.vlab_id}
                    if self.metadata.vlab_id is not None
                    else {}
                ),
                **(
                    {"project-id": self.metadata.project_id}
                    if self.metadata.project_id is not None
                    else {}
                ),
            },
            params=self.input_schema.model_dump(exclude_defaults=True),
        )
        if response.status_code != 200:
            raise ValueError(
                f"The emodel endpoint returned a non 200 response code. Error: {response.text}"
            )

        response_data = response.json()

        return ListResponseEModelReadExpanded(
            data=[
                EModelReadExpandedModified(**emodel) for emodel in response_data["data"]
            ],
            pagination=response_data["pagination"],
            facets=response_data["facets"],
        )

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
