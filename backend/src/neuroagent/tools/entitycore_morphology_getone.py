"""Get One Morphology tool."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    ReadOneReconstructionMorphologyIdGetResponse,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


class MorphologyGetOneInput(BaseModel):
    """Inputs of the knowledge graph API."""

    morphology_id: str = Field(
        description="ID of the morphology of interest in UUID format."
    )


class MorphologyGetOneMetadata(BaseMetadata):
    """Metadata class for MorphologyGetOneTool."""

    entitycore_url: str
    vlab_id: str | None
    project_id: str | None


class MorphologyGetOneTool(BaseTool):
    """Class defining the Get One Morphology logic."""

    name: ClassVar[str] = "entitycore-morphology-getone"
    name_frontend: ClassVar[str] = "Get One Morphology"
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific neuron morphology from the knowledge graph.
    Requires a 'morphology_id' which is the ID of the morphology of interest as registered in the knowledge graph.
    The output contains detailed information about the morphology, including:
    - The morphology ID (it is the `id` field in the response - ignore other IDs).
    - The morphology name
    - The morphology description
    - Associated brain region information
    - Subject species information
    - Any additional metadata
    - Assets
    - Legacy ID
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific neuron morphology. Use this tool to:
    • View complete morphology details
    • Access associated metadata
    • Get brain region and species information

    Specify the morphology ID to retrieve its full details."""
    metadata: MorphologyGetOneMetadata
    input_schema: MorphologyGetOneInput

    async def arun(self) -> ReadOneReconstructionMorphologyIdGetResponse:
        """From a morphology ID, extract detailed morphology information.

        Returns
        -------
            ReconstructionMorphologyIdGetResponse containing detailed morphology information, or an error dict.
        """
        logger.info(
            f"Entering Get One Morphology tool. Inputs: {self.input_schema.model_dump()}"
        )

        # Validate the UUID format
        morphology_id = UUID(self.input_schema.morphology_id)

        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/reconstruction-morphology/{morphology_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The morphology endpoint returned a non 200 response code. Error: {response.text}"
            )
        return ReadOneReconstructionMorphologyIdGetResponse(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
