"""OBI GraphQL Query Executor tool."""

import logging
from pathlib import Path
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, ConfigDict, Field

from neuroagent.tools.base_tool import BaseMetadata, BaseTool

logger = logging.getLogger(__name__)


def _load_graphql_schema() -> str:
    """Load the GraphQL schema from the file."""
    schema_path = Path(__file__).parent / "autogenerated_types" / "obione.graphql"
    try:
        with open(schema_path, "r") as f:
            return f.read()
    except FileNotFoundError:
        return "GraphQL schema file not found."


# Load the schema at module level
GRAPHQL_SCHEMA = _load_graphql_schema()


class GraphQLResponse(BaseModel):
    """Response model for GraphQL queries."""

    model_config = ConfigDict(extra="allow")


class ObiGraphQLInputs(BaseModel):
    """Input class of the OBI GraphQL tool."""

    graphql_query: str = Field(
        description="The GraphQL query string to execute against the ObiOne API."
    )
    variables: dict | None = Field(
        description="Optional variables for the GraphQL query.",
        default=None,
    )


class ObiGraphQLMetadata(BaseMetadata):
    """Metadata of the OBI GraphQL tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class ObiGraphQLTool(BaseTool):
    """OBI GraphQL Query Executor tool."""

    name: ClassVar[str] = "obi_graphql"
    name_frontend: ClassVar[str] = "Execute GraphQL Query"
    utterances: ClassVar[list[str]] = [
        "Execute a GraphQL query",
        "Run GraphQL query against ObiOne API",
        "Query morphology metrics",
        "Get data using GraphQL",
        "Execute GraphQL mutation",
    ]
    description: ClassVar[
        str
    ] = f"""Execute GraphQL queries against the ObiOne API. This tool allows you to run GraphQL queries to fetch data from the ObiOne service. The schema includes detailed information about morphology metrics and other available data structures. Attention, the `values` fiels will contain large arrays so only query it when the user specifically requests it.

GraphQL Schema:
{GRAPHQL_SCHEMA}"""
    description_frontend: ClassVar[
        str
    ] = """Execute GraphQL queries against the ObiOne API. This tool allows you to:
    • Run custom GraphQL queries
    • Fetch morphology metrics data
    • Query any available data types
    • Execute mutations if supported

    Provide a GraphQL query string to execute against the ObiOne service."""
    metadata: ObiGraphQLMetadata
    input_schema: ObiGraphQLInputs

    async def arun(self) -> GraphQLResponse:
        """Run the GraphQL query execution logic."""
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        # Prepare GraphQL request payload
        payload = {
            "query": self.input_schema.graphql_query,
            "variables": self.input_schema.variables or {},
        }

        graphql_response = await self.metadata.httpx_client.post(
            url=f"{self.metadata.obi_one_url.rstrip('/')}/graphql",
            headers=headers,
            json=payload,
        )

        if graphql_response.status_code != 200:
            raise ValueError(
                f"The GraphQL endpoint returned a non 200 response code. Error: {graphql_response.text}"
            )

        response_data = graphql_response.json()

        return GraphQLResponse(**response_data)

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
