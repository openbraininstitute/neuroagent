"""Obi-one circuit nodesets tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.obione import CircuitNodesetsResponse
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class CircuitNodesetsGetOneToolInput(BaseModel):
    """Input class of the circuit nodesets tool."""

    circuit_id: UUID = Field(
        description="ID of the circuit from which the nodesets should be retrieved."
    )


class CircuitNodesetsGetOneToolMetadata(BaseMetadata):
    """Metadata class of the circuit nodesets tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class CircuitNodesetsGetOneTool(BaseTool):
    """Tool to get the circuit nodesets."""

    name: ClassVar[str] = "obione-circuitnodesets-getone"
    name_frontend: ClassVar[str] = "Get Circuit Nodesets"
    utterances: ClassVar[list[str]] = [
        "Get the circuit nodesets",
        "Retrieve nodesets data for this circuit",
        "Show me the nodesets of this circuit",
    ]
    description: ClassVar[str] = "Given a circuit ID, retrieve the nodesets of it."
    description_frontend: ClassVar[str] = (
        """Retrieve the nodesets data for a circuit, and get insights into its composition."""
    )
    metadata: CircuitNodesetsGetOneToolMetadata
    input_schema: CircuitNodesetsGetOneToolInput

    async def arun(self) -> CircuitNodesetsResponse:
        """Run the circuit nodesets retrieval."""
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual_lab_id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project_id"] = str(self.metadata.project_id)

        circuit_nodesets_response = await self.metadata.httpx_client.get(
            url=f"{self.metadata.obi_one_url}/declared/circuit/{self.input_schema.circuit_id}/nodesets",
            headers=headers,
        )

        if circuit_nodesets_response.status_code != 200:
            raise ValueError(
                f"The circuit nodesets endpoint returned a non 200 response code. Error: {circuit_nodesets_response.text}"
            )
        return CircuitNodesetsResponse(**circuit_nodesets_response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
