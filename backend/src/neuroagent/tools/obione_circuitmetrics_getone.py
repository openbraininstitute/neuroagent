"""Obi-one circuit metrics tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import Field

from neuroagent.tools.autogenerated_types.obione import (
    CircuitMetricsEndpointDeclaredCircuitMetricsCircuitIdGetParametersQuery,
    CircuitMetricsOutput,
)
from neuroagent.tools.base_tool import BaseMetadata, BaseTool


class CircuitMetricGetOneToolIntput(
    CircuitMetricsEndpointDeclaredCircuitMetricsCircuitIdGetParametersQuery
):
    """Input class of the circuit metrics tool."""

    circuit_id: UUID = Field(
        description="ID of the circuit from which the metrics should be computed."
    )


class CircuitMetricGetOneToolMetadata(BaseMetadata):
    """Metadata class of the circuit metrics tool."""

    httpx_client: AsyncClient
    obi_one_url: str
    vlab_id: UUID | None
    project_id: UUID | None


class CircuitMetricGetOneTool(BaseTool):
    """Tool to compute the circuit metrics."""

    name: ClassVar[str] = "obione-circuitmetrics-getone"
    name_frontend: ClassVar[str] = "Compute Circuit Metrics"
    utterances: ClassVar[list[str]] = [
        "Analyze the circuit features",
        "Compute metrics for this circuit",
        "Get some more information about this circuit",
    ]
    description: ClassVar[str] = (
        "Given a circuit ID, compute the features of it. "
        "This tool returns comprehensive circuit metadata including node populations, edge populations, and available filterable properties.\n\n"
        "## Top-Level Output Fields\n\n"
        "### Node Populations\n"
        "- **biophysical_node_populations**: Contains biophysical neuron populations with detailed properties including:\n"
        "  - `property_names`: List of available column names for filtering (e.g., 'layer', 'mtype', 'synapse_class')\n"
        "  - `property_unique_values`: For categorical columns, shows all unique values available for filtering\n"
        "  - `property_value_counts`: Count of occurrences for each unique value\n"
        "- **virtual_node_populations**: Contains virtual/artificial neuron populations with similar property structure\n"
        "- **names_of_nodesets**: Predefined node sets that can be referenced in connectivity analysis\n\n"
        "### Edge Populations\n"
        "- **chemical_edge_populations**: Chemical synaptic connections between populations with properties like:\n"
        "  - Synaptic properties (conductance, delay, decay_time, etc.)\n"
        "  - Spatial properties (afferent/efferent coordinates, section info)\n"
        "  - Connection statistics and degree metrics\n"
        "- **electrical_edge_populations**: Electrical gap junction connections (if present)\n\n"
        "### Usage for Connectivity Analysis\n"
        "The `property_names` and `property_unique_values` from node populations are essential for:\n"
        "- Building `pre_selection` and `post_selection` filters in connectivity metrics tools\n"
        "- Understanding available categorical values for filtering (e.g., layer values, mtype values)\n"
        "- Identifying which properties can be used for grouping and analysis\n\n"
        "Example: Use `level_of_detail_nodes=1` to get detailed property information for filtering in connectivity analysis."
    )
    description_frontend: ClassVar[str] = (
        """Analyze a circuit, and get more insights into its properties."""
    )
    metadata: CircuitMetricGetOneToolMetadata
    input_schema: CircuitMetricGetOneToolIntput

    async def arun(self) -> CircuitMetricsOutput:
        """Run the circuit metrics calculations."""
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual_lab_id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project_id"] = str(self.metadata.project_id)

        query_params = self.input_schema.model_dump(
            exclude_defaults=True, exclude={"circuit_id"}
        )

        circuit_metrics_response = await self.metadata.httpx_client.get(
            url=f"{self.metadata.obi_one_url}/declared/circuit-metrics/{self.input_schema.circuit_id}",
            headers=headers,
            params=query_params,
        )

        if circuit_metrics_response.status_code != 200:
            raise ValueError(
                f"The circuit metrics endpoint returned a non 200 response code. Error: {circuit_metrics_response.text}"
            )
        return CircuitMetricsOutput(**circuit_metrics_response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, obi_one_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{obi_one_url.rstrip('/')}/health",
        )
        return response.status_code == 200
