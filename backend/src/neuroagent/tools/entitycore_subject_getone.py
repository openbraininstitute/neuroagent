"""Get One Subject tool."""

from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import (
    SubjectRead,
)
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata


class SubjectGetOneInput(BaseModel):
    """Inputs for the subject get one tool."""

    subject_id: UUID = Field(
        description="The ID of the subject to retrieve",
    )


class SubjectGetOneTool(BaseTool):
    """Class defining the Get One Subject logic."""

    name: ClassVar[str] = "entitycore-subject-getone"
    name_frontend: ClassVar[str] = "Get One Subject"
    utterances: ClassVar[list[str]] = [
        "Get details for this subject",
        "Show me information about this subject",
        "What are the properties of this subject?",
    ]
    description: ClassVar[
        str
    ] = """Retrieves detailed information about a specific subject from the knowledge graph.
    Requires a 'subject_id' which is the ID of the subject of interest as registered in the knowledge graph.
    The output contains detailed information about the subject, including:
    - The subject ID
    - The subject name
    - The subject description
    - The strain information
    - The species information
    - Any additional metadata
    """
    description_frontend: ClassVar[
        str
    ] = """Get detailed information about a specific subject. Use this tool to:
    • View complete subject details
    • Access associated metadata
    • Get strain and species information

    Specify the subject ID to retrieve its full details."""
    metadata: EntitycoreMetadata
    input_schema: SubjectGetOneInput

    async def arun(self) -> SubjectRead:
        """From a subject ID, extract detailed subject information.

        Returns
        -------
            SubjectRead containing detailed subject information, or an error dict.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/subject/{self.input_schema.subject_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The subject endpoint returned a non 200 response code. Error: {response.text}"
            )
        return SubjectRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
