"""Get one Me-Models."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import MEModelRead
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata

logger = logging.getLogger(__name__)


class MeModelGetOneInput(BaseModel):
    """Input for the me model get one tool."""

    me_model_id: UUID = Field(
        description=("""ID of the Me model of interest in UUID format."""),
    )


class MeModelGetOneTool(BaseTool):
    """Definition of the MeModel get one tool."""

    name: ClassVar[str] = "entitycore-memodel-getone"
    name_frontend: ClassVar[str] = "Get one Me Model"
    description: ClassVar[str] = (
        """Retrieve a single Me Model by its UUID from the EntityCore service. Retrieves more data than the correspoding get all endpoint."""
    )
    description_frontend: ClassVar[str] = (
        """Fetch a specific Me Model using its unique ID. Useful for accessing detailed Me Model data."""
    )
    metadata: EntitycoreMetadata
    input_schema: MeModelGetOneInput

    async def arun(self) -> MEModelRead:
        """Get one me-model from the entitycore database.

        Returns
        -------
            MEModelRead descibing the ME model and its metadata.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = self.metadata.vlab_id
        if self.metadata.project_id is not None:
            headers["project-id"] = self.metadata.project_id

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/memodel/{self.input_schema.me_model_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The me-model endpoint returned a non 200 response code. Error: {response.text}"
            )

        return MEModelRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
