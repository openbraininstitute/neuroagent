"""Get one Me-Model."""

import logging
from typing import ClassVar
from uuid import UUID

from httpx import AsyncClient
from pydantic import BaseModel, Field

from neuroagent.tools.autogenerated_types.entitycore import MEModelRead
from neuroagent.tools.base_tool import BaseTool, EntitycoreMetadata

logger = logging.getLogger(__name__)


class MEModelGetOneInput(BaseModel):
    """Input for the ME-Model get one tool."""

    me_model_id: UUID = Field(
        description=("""ID of the ME-Model of interest in UUID format."""),
    )


class MEModelGetOneTool(BaseTool):
    """Definition of the MeModel get one tool."""

    name: ClassVar[str] = "entitycore-memodel-getone"
    name_frontend: ClassVar[str] = "Get one ME-Model"
    description: ClassVar[str] = (
        """Retrieve a single ME-Model by its UUID from the EntityCore service. Retrieves more data than the correspoding get all endpoint."""
    )
    description_frontend: ClassVar[str] = (
        """Fetch a specific ME-Model using its unique ID. Useful for accessing detailed ME-Model data."""
    )
    metadata: EntitycoreMetadata
    input_schema: MEModelGetOneInput

    async def arun(self) -> MEModelRead:
        """Get one ME-Model from the entitycore database.

        Returns
        -------
            MEModelRead descibing the ME-Model and its metadata.
        """
        headers: dict[str, str] = {}
        if self.metadata.vlab_id is not None:
            headers["virtual-lab-id"] = str(self.metadata.vlab_id)
        if self.metadata.project_id is not None:
            headers["project-id"] = str(self.metadata.project_id)

        response = await self.metadata.httpx_client.get(
            url=self.metadata.entitycore_url.rstrip("/")
            + f"/memodel/{self.input_schema.me_model_id}",
            headers=headers,
        )
        if response.status_code != 200:
            raise ValueError(
                f"The ME-Model endpoint returned a non 200 response code. Error: {response.text}"
            )

        return MEModelRead(**response.json())

    @classmethod
    async def is_online(cls, *, httpx_client: AsyncClient, entitycore_url: str) -> bool:
        """Check if the tool is online."""
        response = await httpx_client.get(
            f"{entitycore_url.rstrip('/')}/health",
        )
        return response.status_code == 200
