"""Switch to offset-aware datetimes

Revision ID: 7122d2f48028
Revises: 02aab0a6eef4
Create Date: 2025-07-21 15:49:04.684816

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "7122d2f48028"
down_revision: Union[str, None] = "02aab0a6eef4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # First, convert existing naive timestamps to UTC by adding timezone info
    # This assumes existing timestamps are in UTC (adjust if they're in a different timezone)
    op.execute("UPDATE messages SET creation_date = creation_date AT TIME ZONE 'UTC'")
    op.execute("UPDATE threads SET creation_date = creation_date AT TIME ZONE 'UTC'")
    op.execute("UPDATE threads SET update_date = update_date AT TIME ZONE 'UTC'")

    # Then alter the column types to timezone-aware
    op.alter_column(
        "messages",
        "creation_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "threads",
        "creation_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    op.alter_column(
        "threads",
        "update_date",
        existing_type=postgresql.TIMESTAMP(),
        type_=sa.DateTime(timezone=True),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # First alter the column types back to timezone-naive
    op.alter_column(
        "threads",
        "update_date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "threads",
        "creation_date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column(
        "messages",
        "creation_date",
        existing_type=sa.DateTime(timezone=True),
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )

    # Then convert timezone-aware timestamps back to naive timestamps (removing timezone info)
    # This converts to UTC and removes the timezone designation
    op.execute("UPDATE messages SET creation_date = creation_date AT TIME ZONE 'UTC'")
    op.execute("UPDATE threads SET creation_date = creation_date AT TIME ZONE 'UTC'")
    op.execute("UPDATE threads SET update_date = update_date AT TIME ZONE 'UTC'")
    # ### end Alembic commands ###
