/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Root
     * @description Root endpoint.
     */
    get: operations["root__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health
     * @description Health endpoint.
     */
    get: operations["health_health_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Version
     * @description Version endpoint.
     */
    get: operations["version_version_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/{entity_route}/{entity_id}/assets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Entity Assets
     * @description Return the list of assets associated with a specific entity.
     */
    get: operations["get_entity_assets__entity_route___entity_id__assets_get"];
    put?: never;
    /**
     * Upload Entity Asset
     * @description Upload an asset to be associated with the specified entity.
     *
     *     To be used only for small files. Use delegation for big files.
     */
    post: operations["upload_entity_asset__entity_route___entity_id__assets_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/{entity_route}/{entity_id}/assets/{asset_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Entity Asset
     * @description Return the metadata of an assets associated with a specific entity.
     */
    get: operations["get_entity_asset__entity_route___entity_id__assets__asset_id__get"];
    put?: never;
    post?: never;
    /**
     * Delete Entity Asset
     * @description Delete an assets associated with a specific entity.
     *
     *     The asset record is not deleted from the database, but its status is changed.
     *     The file is actually deleted from S3, unless using a versioning-enabled bucket.
     */
    delete: operations["delete_entity_asset__entity_route___entity_id__assets__asset_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/{entity_route}/{entity_id}/assets/{asset_id}/download": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Download Entity Asset */
    get: operations["download_entity_asset__entity_route___entity_id__assets__asset_id__download_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brain-region": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_brain_region_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brain-region/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_brain_region__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brain-region-hierarchy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_brain_region_hierarchy_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brain-region-hierarchy/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_brain_region_hierarchy__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brain-region-hierarchy/{id_}/hierarchy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Hierarchy */
    get: operations["read_hierarchy_brain_region_hierarchy__id___hierarchy_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/cell-composition": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Return the old style cellCompositionSummary_payload_prod.json.
     */
    get: operations["get_cell_composition_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contribution": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_contribution_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_contribution_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contribution/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_contribution__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/electrical-cell-recording": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_electrical_cell_recording_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_electrical_cell_recording_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/electrical-cell-recording/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_electrical_cell_recording__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/emodel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_emodel_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_emodel_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/emodel/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_emodel__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/experimental-bouton-density": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_experimental_bouton_density_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_experimental_bouton_density_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/experimental-bouton-density/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_experimental_bouton_density__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/experimental-neuron-density": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_experimental_neuron_density_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_experimental_neuron_density_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/experimental-neuron-density/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_experimental_neuron_density__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/experimental-synapses-per-connection": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_experimental_synapses_per_connection_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_experimental_synapses_per_connection_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/experimental-synapses-per-connection/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_experimental_synapses_per_connection__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/license": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_license_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_license_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/license/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_license__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/measurement-annotation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_measurement_annotation_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_measurement_annotation_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/measurement-annotation/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_measurement_annotation__id___get"];
    put?: never;
    post?: never;
    /** Delete One */
    delete: operations["delete_one_measurement_annotation__id___delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/memodel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_memodel_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_memodel_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/memodel/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_memodel__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/reconstruction-morphology": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_reconstruction_morphology_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_reconstruction_morphology_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/reconstruction-morphology/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_reconstruction_morphology__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mtype": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_mtype_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/mtype/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_mtype__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organization": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_organization_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_organization_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organization/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_organization__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/person": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_person_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_person_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/person/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_person__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/role": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_role_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_role_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/role/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_role__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/single-neuron-simulation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_single_neuron_simulation_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_single_neuron_simulation_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/single-neuron-simulation/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_single_neuron_simulation__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/single-neuron-synaptome": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_single_neuron_synaptome_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_single_neuron_synaptome_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/single-neuron-synaptome/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_single_neuron_synaptome__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/single-neuron-synaptome-simulation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_single_neuron_synaptome_simulation_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_single_neuron_synaptome_simulation_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/single-neuron-synaptome-simulation/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_single_neuron_synaptome_simulation__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/species": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_species_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_species_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/species/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_species__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/strain": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_strain_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_strain_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/strain/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_strain__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subject": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_subject_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_subject_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/subject/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_subject__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ion-channel-model": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read Many */
    get: operations["read_many_ion_channel_model_get"];
    put?: never;
    /** Create One */
    post: operations["create_one_ion_channel_model_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ion-channel-model/{id_}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Read One */
    get: operations["read_one_ion_channel_model__id___get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AgePeriod
     * @enum {string}
     */
    AgePeriod: "prenatal" | "postnatal" | "unknown";
    AgentRead:
      | components["schemas"]["PersonRead"]
      | components["schemas"]["OrganizationRead"];
    /** Annotation */
    Annotation: {
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Pref Label */
      pref_label: string;
      /** Alt Label */
      alt_label: string;
      /** Definition */
      definition: string;
    };
    /**
     * ApiErrorCode
     * @description API Error codes.
     * @enum {string}
     */
    ApiErrorCode:
      | "GENERIC_ERROR"
      | "NOT_AUTHENTICATED"
      | "NOT_AUTHORIZED"
      | "INVALID_REQUEST"
      | "ENTITY_NOT_FOUND"
      | "ENTITY_FORBIDDEN"
      | "ENTITY_DUPLICATED"
      | "ASSET_NOT_FOUND"
      | "ASSET_DUPLICATED"
      | "ASSET_INVALID_FILE"
      | "ASSET_MISSING_PATH"
      | "ASSET_INVALID_PATH"
      | "ASSET_NOT_A_DIRECTORY"
      | "ASSET_INVALID_SCHEMA"
      | "ION_NAME_NOT_FOUND";
    /**
     * AssetLabel
     * @enum {string}
     */
    AssetLabel: "neurolucida" | "swc" | "hdf5";
    /**
     * AssetRead
     * @description Asset model for responses.
     */
    AssetRead: {
      /** Path */
      path: string;
      /** Full Path */
      full_path: string;
      /** Is Directory */
      is_directory: boolean;
      /** Content Type */
      content_type: string;
      /** Size */
      size: number;
      /** Sha256 Digest */
      sha256_digest: string | null;
      /** Meta */
      meta: Record<string, never>;
      label?: components["schemas"]["AssetLabel"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      status: components["schemas"]["AssetStatus"];
    };
    /**
     * AssetStatus
     * @enum {string}
     */
    AssetStatus: "created" | "deleted";
    /** Body_upload_entity_asset__entity_route___entity_id__assets_post */
    Body_upload_entity_asset__entity_route___entity_id__assets_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      /** Meta */
      meta?: Record<string, never> | null;
      label?: components["schemas"]["AssetLabel"] | null;
    };
    /** BrainRegionHierarchyRead */
    BrainRegionHierarchyRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
    };
    /** BrainRegionRead */
    BrainRegionRead: {
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Annotation Value */
      annotation_value: number;
      /** Name */
      name: string;
      /** Acronym */
      acronym: string;
      /** Color Hex Triplet */
      color_hex_triplet: string;
      /** Parent Structure Id */
      parent_structure_id: string | null;
      /**
       * Hierarchy Id
       * Format: uuid
       */
      hierarchy_id: string;
    };
    /** ContributionCreate */
    ContributionCreate: {
      /**
       * Agent Id
       * Format: uuid
       */
      agent_id: string;
      /**
       * Role Id
       * Format: uuid
       */
      role_id: string;
      /**
       * Entity Id
       * Format: uuid
       */
      entity_id: string;
    };
    /** ContributionRead */
    ContributionRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      agent: components["schemas"]["AgentRead"];
      role: components["schemas"]["RoleRead"];
      entity: components["schemas"]["EntityRead"];
    };
    /** ContributionReadWithoutEntity */
    ContributionReadWithoutEntity: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      agent: components["schemas"]["AgentRead"];
      role: components["schemas"]["RoleRead"];
    };
    /** EModelCreate */
    EModelCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Iteration */
      iteration: string;
      /** Score */
      score: number;
      /** Seed */
      seed: number;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
      /** Strain Id */
      strain_id?: string | null;
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
      /**
       * Exemplar Morphology Id
       * Format: uuid
       */
      exemplar_morphology_id: string;
    };
    /** EModelRead */
    EModelRead: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Iteration */
      iteration: string;
      /** Score */
      score: number;
      /** Seed */
      seed: number;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["SpeciesRead"];
      strain: components["schemas"]["StrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      exemplar_morphology: components["schemas"]["ExemplarMorphology"];
    };
    /** EModelReadExpanded */
    EModelReadExpanded: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Iteration */
      iteration: string;
      /** Score */
      score: number;
      /** Seed */
      seed: number;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["SpeciesRead"];
      strain: components["schemas"]["StrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      exemplar_morphology: components["schemas"]["ExemplarMorphology"];
      /** Ion Channel Models */
      ion_channel_models: components["schemas"]["IonChannelModelWAssets"][];
    };
    /** ElectricalCellRecordingCreate */
    ElectricalCellRecordingCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** License Id */
      license_id?: string | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Liquid Junction Potential
       * @description Correction applied to the voltage trace, in mV
       * @default 0
       */
      ljp: number;
      /**
       * Recording Location
       * @description Location on the cell where recording was performed, in hoc-compatible format.
       */
      recording_location: string[];
      /**
       * Recording Type
       * @description Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]
       */
      recording_type: components["schemas"]["ElectricalRecordingType"];
      /**
       * Recording Origin
       * @description Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]
       */
      recording_origin: components["schemas"]["ElectricalRecordingOrigin"];
      /**
       * Comment
       * @description Comment with further details.
       */
      comment?: string | null;
      /** Legacy Id */
      legacy_id?: string[] | null;
      /**
       * Subject Id
       * Format: uuid
       */
      subject_id: string;
      /** Brain Region Id */
      brain_region_id?: string | null;
    };
    /** ElectricalCellRecordingRead */
    ElectricalCellRecordingRead: {
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Liquid Junction Potential
       * @description Correction applied to the voltage trace, in mV
       * @default 0
       */
      ljp: number;
      /**
       * Recording Location
       * @description Location on the cell where recording was performed, in hoc-compatible format.
       */
      recording_location: string[];
      /**
       * Recording Type
       * @description Recording type. One of: [<ElectricalRecordingStimulusType.conductance_clamp: 'conductance_clamp'>, <ElectricalRecordingStimulusType.current_clamp: 'current_clamp'>, <ElectricalRecordingStimulusType.extracellular: 'extracellular'>, <ElectricalRecordingStimulusType.other: 'other'>, <ElectricalRecordingStimulusType.unknown: 'unknown'>, <ElectricalRecordingStimulusType.voltage_clamp: 'voltage_clamp'>]
       */
      recording_type: components["schemas"]["ElectricalRecordingType"];
      /**
       * Recording Origin
       * @description Recording origin. One of: [<ElectricalRecordingOrigin.in_silico: 'in_silico'>, <ElectricalRecordingOrigin.in_vitro: 'in_vitro'>, <ElectricalRecordingOrigin.in_vivo: 'in_vivo'>, <ElectricalRecordingOrigin.unknown: 'unknown'>]
       */
      recording_origin: components["schemas"]["ElectricalRecordingOrigin"];
      /**
       * Comment
       * @description Comment with further details.
       */
      comment?: string | null;
      /** Legacy Id */
      legacy_id?: string[] | null;
      subject: components["schemas"]["SubjectRead"];
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      /**
       * Electrical Recording Stimuli
       * @description List of stimuli applied to the cell with their respective time steps
       */
      stimuli?:
        | components["schemas"]["ElectricalRecordingStimulusRead"][]
        | null;
    };
    /**
     * ElectricalRecordingOrigin
     * @enum {string}
     */
    ElectricalRecordingOrigin: "in_vivo" | "in_vitro" | "in_silico" | "unknown";
    /** ElectricalRecordingStimulusRead */
    ElectricalRecordingStimulusRead: {
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Dt */
      dt?: number | null;
      injection_type: components["schemas"]["ElectricalRecordingStimulusType"];
      shape: components["schemas"]["ElectricalRecordingStimulusShape"];
      /** Start Time */
      start_time?: number | null;
      /** End Time */
      end_time?: number | null;
    };
    /**
     * ElectricalRecordingStimulusShape
     * @enum {string}
     */
    ElectricalRecordingStimulusShape:
      | "cheops"
      | "constant"
      | "pulse"
      | "step"
      | "ramp"
      | "noise"
      | "sinusoidal"
      | "other"
      | "two_steps"
      | "unknown";
    /**
     * ElectricalRecordingStimulusType
     * @enum {string}
     */
    ElectricalRecordingStimulusType:
      | "voltage_clamp"
      | "current_clamp"
      | "conductance_clamp"
      | "extracellular"
      | "other"
      | "unknown";
    /**
     * ElectricalRecordingType
     * @enum {string}
     */
    ElectricalRecordingType:
      | "intracellular"
      | "extracellular"
      | "both"
      | "unknown";
    /** EntityRead */
    EntityRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Type */
      type: string;
      createdBy: components["schemas"]["AgentRead"] | null;
      updatedBy: components["schemas"]["AgentRead"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /** Authorized Public */
      authorized_public: boolean;
    };
    /**
     * EntityRoute
     * @enum {string}
     */
    EntityRoute:
      | "age"
      | "analysis-software-source-code"
      | "emodel"
      | "experimental-bouton-density"
      | "experimental-neuron-density"
      | "experimental-synapses-per-connection"
      | "memodel"
      | "mesh"
      | "reconstruction-morphology"
      | "electrical-cell-recording"
      | "electrical-recording-stimulus"
      | "single-neuron-simulation"
      | "single-neuron-synaptome"
      | "single-neuron-synaptome-simulation"
      | "ion-channel-model"
      | "subject"
      | "synaptic-pathway";
    /**
     * EntityType
     * @description Entity types.
     * @enum {string}
     */
    EntityType:
      | "age"
      | "analysis_software_source_code"
      | "emodel"
      | "experimental_bouton_density"
      | "experimental_neuron_density"
      | "experimental_synapses_per_connection"
      | "memodel"
      | "mesh"
      | "reconstruction_morphology"
      | "electrical_cell_recording"
      | "electrical_recording_stimulus"
      | "single_neuron_simulation"
      | "single_neuron_synaptome"
      | "single_neuron_synaptome_simulation"
      | "ion_channel_model"
      | "subject"
      | "synaptic_pathway";
    /**
     * ErrorResponse
     * @description ErrorResponse.
     */
    ErrorResponse: {
      error_code: components["schemas"]["ApiErrorCode"];
      /** Message */
      message: string;
      /** Details */
      details?: unknown;
    };
    /** ExemplarMorphology */
    ExemplarMorphology: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
    };
    /** ExperimentalBoutonDensityCreate */
    ExperimentalBoutonDensityCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** License Id */
      license_id?: string | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Subject Id
       * Format: uuid
       */
      subject_id: string;
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
      /** Legacy Id */
      legacy_id: string | null;
    };
    /** ExperimentalBoutonDensityRead */
    ExperimentalBoutonDensityRead: {
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      subject: components["schemas"]["SubjectRead"];
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Measurements */
      measurements: components["schemas"]["MeasurementRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
    };
    /** ExperimentalNeuronDensityCreate */
    ExperimentalNeuronDensityCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** License Id */
      license_id?: string | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Subject Id
       * Format: uuid
       */
      subject_id: string;
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
      /** Legacy Id */
      legacy_id: string | null;
    };
    /** ExperimentalNeuronDensityRead */
    ExperimentalNeuronDensityRead: {
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      subject: components["schemas"]["SubjectRead"];
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Measurements */
      measurements: components["schemas"]["MeasurementRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
    };
    /** ExperimentalSynapsesPerConnectionCreate */
    ExperimentalSynapsesPerConnectionCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** License Id */
      license_id?: string | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Subject Id
       * Format: uuid
       */
      subject_id: string;
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
      /** Legacy Id */
      legacy_id: string | null;
      /**
       * Synaptic Pathway Id
       * Format: uuid
       */
      synaptic_pathway_id: string;
    };
    /** ExperimentalSynapsesPerConnectionRead */
    ExperimentalSynapsesPerConnectionRead: {
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      subject: components["schemas"]["SubjectRead"];
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Measurements */
      measurements: components["schemas"]["MeasurementRead"][] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      synaptic_pathway: components["schemas"]["SynapticPathwayRead"];
    };
    /** Facet */
    Facet: {
      /** Id */
      id: string | number;
      /** Label */
      label: string;
      /** Count */
      count: number;
      /** Type */
      type: string | null;
    };
    Facets: {
      [key: string]: components["schemas"]["Facet"][];
    };
    /** IonChannelModelCreate */
    IonChannelModelCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Nmodl Suffix */
      nmodl_suffix: string;
      /**
       * Is Ljp Corrected
       * @default false
       */
      is_ljp_corrected: boolean;
      /**
       * Is Temperature Dependent
       * @default false
       */
      is_temperature_dependent: boolean;
      /** Temperature Celsius */
      temperature_celsius: number;
      /**
       * Is Stochastic
       * @default false
       */
      is_stochastic: boolean;
      neuron_block: components["schemas"]["NeuronBlock"];
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
      /** Strain Id */
      strain_id?: string | null;
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
    };
    /** IonChannelModelExpanded */
    IonChannelModelExpanded: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Nmodl Suffix */
      nmodl_suffix: string;
      /**
       * Is Ljp Corrected
       * @default false
       */
      is_ljp_corrected: boolean;
      /**
       * Is Temperature Dependent
       * @default false
       */
      is_temperature_dependent: boolean;
      /** Temperature Celsius */
      temperature_celsius: number;
      /**
       * Is Stochastic
       * @default false
       */
      is_stochastic: boolean;
      neuron_block: components["schemas"]["NeuronBlock"];
      species: components["schemas"]["SpeciesRead"];
      strain: components["schemas"]["StrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Contributions */
      contributions: components["schemas"]["ContributionReadWithoutEntity"][];
    };
    /** IonChannelModelRead */
    IonChannelModelRead: {
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Nmodl Suffix */
      nmodl_suffix: string;
      /**
       * Is Ljp Corrected
       * @default false
       */
      is_ljp_corrected: boolean;
      /**
       * Is Temperature Dependent
       * @default false
       */
      is_temperature_dependent: boolean;
      /** Temperature Celsius */
      temperature_celsius: number;
      /**
       * Is Stochastic
       * @default false
       */
      is_stochastic: boolean;
      neuron_block: components["schemas"]["NeuronBlock"];
      species: components["schemas"]["SpeciesRead"];
      strain: components["schemas"]["StrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
    };
    /** IonChannelModelWAssets */
    IonChannelModelWAssets: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Description */
      description: string;
      /** Name */
      name: string;
      /** Nmodl Suffix */
      nmodl_suffix: string;
      /**
       * Is Ljp Corrected
       * @default false
       */
      is_ljp_corrected: boolean;
      /**
       * Is Temperature Dependent
       * @default false
       */
      is_temperature_dependent: boolean;
      /** Temperature Celsius */
      temperature_celsius: number;
      /**
       * Is Stochastic
       * @default false
       */
      is_stochastic: boolean;
      neuron_block: components["schemas"]["NeuronBlock"];
      species: components["schemas"]["SpeciesRead"];
      strain: components["schemas"]["StrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
    };
    /** LicenseCreate */
    LicenseCreate: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Label */
      label: string;
    };
    /** LicenseRead */
    LicenseRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Label */
      label: string;
    };
    /** ListResponse[Annotation] */
    ListResponse_Annotation_: {
      /** Data */
      data: components["schemas"]["Annotation"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[AssetRead] */
    ListResponse_AssetRead_: {
      /** Data */
      data: components["schemas"]["AssetRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[BrainRegionHierarchyRead] */
    ListResponse_BrainRegionHierarchyRead_: {
      /** Data */
      data: components["schemas"]["BrainRegionHierarchyRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[ContributionRead] */
    ListResponse_ContributionRead_: {
      /** Data */
      data: components["schemas"]["ContributionRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[EModelRead] */
    ListResponse_EModelRead_: {
      /** Data */
      data: components["schemas"]["EModelRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[ElectricalCellRecordingRead] */
    ListResponse_ElectricalCellRecordingRead_: {
      /** Data */
      data: components["schemas"]["ElectricalCellRecordingRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[ExperimentalBoutonDensityRead] */
    ListResponse_ExperimentalBoutonDensityRead_: {
      /** Data */
      data: components["schemas"]["ExperimentalBoutonDensityRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[ExperimentalNeuronDensityRead] */
    ListResponse_ExperimentalNeuronDensityRead_: {
      /** Data */
      data: components["schemas"]["ExperimentalNeuronDensityRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[ExperimentalSynapsesPerConnectionRead] */
    ListResponse_ExperimentalSynapsesPerConnectionRead_: {
      /** Data */
      data: components["schemas"]["ExperimentalSynapsesPerConnectionRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[IonChannelModelRead] */
    ListResponse_IonChannelModelRead_: {
      /** Data */
      data: components["schemas"]["IonChannelModelRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[LicenseRead] */
    ListResponse_LicenseRead_: {
      /** Data */
      data: components["schemas"]["LicenseRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[MEModelRead] */
    ListResponse_MEModelRead_: {
      /** Data */
      data: components["schemas"]["MEModelRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[MeasurementAnnotationRead] */
    ListResponse_MeasurementAnnotationRead_: {
      /** Data */
      data: components["schemas"]["MeasurementAnnotationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[OrganizationRead] */
    ListResponse_OrganizationRead_: {
      /** Data */
      data: components["schemas"]["OrganizationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[PersonRead] */
    ListResponse_PersonRead_: {
      /** Data */
      data: components["schemas"]["PersonRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[ReconstructionMorphologyRead] */
    ListResponse_ReconstructionMorphologyRead_: {
      /** Data */
      data: components["schemas"]["ReconstructionMorphologyRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[RoleRead] */
    ListResponse_RoleRead_: {
      /** Data */
      data: components["schemas"]["RoleRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[SingleNeuronSimulationRead] */
    ListResponse_SingleNeuronSimulationRead_: {
      /** Data */
      data: components["schemas"]["SingleNeuronSimulationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[SingleNeuronSynaptomeRead] */
    ListResponse_SingleNeuronSynaptomeRead_: {
      /** Data */
      data: components["schemas"]["SingleNeuronSynaptomeRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[SingleNeuronSynaptomeSimulationRead] */
    ListResponse_SingleNeuronSynaptomeSimulationRead_: {
      /** Data */
      data: components["schemas"]["SingleNeuronSynaptomeSimulationRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[SpeciesRead] */
    ListResponse_SpeciesRead_: {
      /** Data */
      data: components["schemas"]["SpeciesRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[StrainRead] */
    ListResponse_StrainRead_: {
      /** Data */
      data: components["schemas"]["StrainRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** ListResponse[SubjectRead] */
    ListResponse_SubjectRead_: {
      /** Data */
      data: components["schemas"]["SubjectRead"][];
      pagination: components["schemas"]["PaginationResponse"];
      facets?: components["schemas"]["Facets"] | null;
    };
    /** MEModelCreate */
    MEModelCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default created */
      validation_status: components["schemas"]["ValidationStatus"];
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
      /**
       * Morphology Id
       * Format: uuid
       */
      morphology_id: string;
      /**
       * Emodel Id
       * Format: uuid
       */
      emodel_id: string;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
      /** Strain Id */
      strain_id?: string | null;
    };
    /** MEModelRead */
    MEModelRead: {
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default created */
      validation_status: components["schemas"]["ValidationStatus"];
      /**
       * Id
       * Format: uuid
       */
      id: string;
      species: components["schemas"]["SpeciesRead"];
      strain: components["schemas"]["StrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
      morphology: components["schemas"]["ReconstructionMorphologyRead"];
      emodel: components["schemas"]["EModelRead"];
    };
    /**
     * MeasurableEntity
     * @enum {string}
     */
    MeasurableEntity: "reconstruction_morphology";
    /** MeasurementAnnotationCreate */
    MeasurementAnnotationCreate: {
      /**
       * Entity Id
       * Format: uuid
       */
      entity_id: string;
      entity_type: components["schemas"]["MeasurableEntity"];
      /** Measurement Kinds */
      measurement_kinds: components["schemas"]["MeasurementKindCreate"][];
    };
    /** MeasurementAnnotationRead */
    MeasurementAnnotationRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Entity Id
       * Format: uuid
       */
      entity_id: string;
      entity_type: components["schemas"]["MeasurableEntity"];
      /** Measurement Kinds */
      measurement_kinds: components["schemas"]["MeasurementKindRead"][];
    };
    /** MeasurementItem */
    MeasurementItem: {
      name: components["schemas"]["MeasurementStatistic"] | null;
      unit: components["schemas"]["MeasurementUnit"] | null;
      /** Value */
      value: number | null;
    };
    /** MeasurementKindCreate */
    MeasurementKindCreate: {
      structural_domain?: components["schemas"]["StructuralDomain"] | null;
      /** Measurement Items */
      measurement_items: components["schemas"]["MeasurementItem"][];
      /** Pref Label */
      pref_label: string;
    };
    /** MeasurementKindRead */
    MeasurementKindRead: {
      structural_domain?: components["schemas"]["StructuralDomain"] | null;
      /** Measurement Items */
      measurement_items: components["schemas"]["MeasurementItem"][];
      /** Pref Label */
      pref_label: string;
    };
    /** MeasurementRead */
    MeasurementRead: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      unit: components["schemas"]["MeasurementUnit"];
      /** Value */
      value: number;
    };
    /**
     * MeasurementStatistic
     * @enum {string}
     */
    MeasurementStatistic:
      | "mean"
      | "median"
      | "mode"
      | "variance"
      | "data_point"
      | "sample_size"
      | "standard_error"
      | "standard_deviation"
      | "raw"
      | "minimum"
      | "maximum"
      | "sum";
    /**
     * MeasurementUnit
     * @enum {string}
     */
    MeasurementUnit:
      | "dimensionless"
      | "1/μm"
      | "1/mm³"
      | "μm"
      | "μm²"
      | "μm³"
      | "radian";
    /** NestedMEModel */
    NestedMEModel: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @default created */
      validation_status: components["schemas"]["ValidationStatus"];
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      /** Etypes */
      etypes: components["schemas"]["Annotation"][] | null;
    };
    /** NestedSynaptome */
    NestedSynaptome: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
    };
    /** NeuronBlock */
    NeuronBlock: {
      /**
       * Global
       * @default []
       */
      global: {
        [key: string]: string | null;
      }[];
      /**
       * Range
       * @default []
       */
      range: {
        [key: string]: string | null;
      }[];
      /**
       * Useion
       * @default []
       */
      useion: components["schemas"]["UseIon"][];
      /**
       * Nonspecific
       * @default []
       */
      nonspecific: {
        [key: string]: string | null;
      }[];
    };
    /** OrganizationCreate */
    OrganizationCreate: {
      /** Pref Label */
      pref_label: string;
      /** Alternative Name */
      alternative_name?: string | null;
      /** Legacy Id */
      legacy_id?: string | null;
    };
    /** OrganizationRead */
    OrganizationRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Pref Label */
      pref_label: string;
      /** Alternative Name */
      alternative_name?: string | null;
      /** Type */
      type: string;
    };
    /** PaginationResponse */
    PaginationResponse: {
      /** Page */
      page: number;
      /** Page Size */
      page_size: number;
      /** Total Items */
      total_items: number;
    };
    /** PersonCreate */
    PersonCreate: {
      /** Givenname */
      givenName: string;
      /** Familyname */
      familyName: string;
      /** Pref Label */
      pref_label: string;
      /** Legacy Id */
      legacy_id?: string | null;
    };
    /** PersonRead */
    PersonRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Givenname */
      givenName: string;
      /** Familyname */
      familyName: string;
      /** Pref Label */
      pref_label: string;
      /** Type */
      type: string;
    };
    /** PointLocationBase */
    PointLocationBase: {
      /** X */
      x: number;
      /** Y */
      y: number;
      /** Z */
      z: number;
    };
    /** ReconstructionMorphologyAnnotationExpandedRead */
    ReconstructionMorphologyAnnotationExpandedRead: {
      type?: components["schemas"]["EntityType"] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      species: components["schemas"]["SpeciesRead"];
      strain: components["schemas"]["StrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
      measurement_annotation:
        | components["schemas"]["MeasurementAnnotationRead"]
        | null;
    };
    /** ReconstructionMorphologyCreate */
    ReconstructionMorphologyCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** License Id */
      license_id?: string | null;
      /** Name */
      name: string;
      /** Description */
      description: string;
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id?: string[] | null;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
      /** Strain Id */
      strain_id?: string | null;
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
    };
    /** ReconstructionMorphologyRead */
    ReconstructionMorphologyRead: {
      type?: components["schemas"]["EntityType"] | null;
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      license: components["schemas"]["LicenseRead"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      location: components["schemas"]["PointLocationBase"] | null;
      /** Legacy Id */
      legacy_id: string[] | null;
      species: components["schemas"]["SpeciesRead"];
      strain: components["schemas"]["StrainRead"] | null;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      /** Mtypes */
      mtypes: components["schemas"]["Annotation"][] | null;
    };
    /** RoleCreate */
    RoleCreate: {
      /** Name */
      name: string;
      /** Role Id */
      role_id: string;
    };
    /** RoleRead */
    RoleRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Role Id */
      role_id: string;
    };
    /**
     * Sex
     * @enum {string}
     */
    Sex: "male" | "female" | "unknown";
    /** SingleNeuronSimulationCreate */
    SingleNeuronSimulationCreate: {
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      status: components["schemas"]["SingleNeuronSimulationStatus"];
      /** Injectionlocation */
      injectionLocation: string[];
      /** Recordinglocation */
      recordingLocation: string[];
      /**
       * Me Model Id
       * Format: uuid
       */
      me_model_id: string;
    };
    /** SingleNeuronSimulationRead */
    SingleNeuronSimulationRead: {
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      status: components["schemas"]["SingleNeuronSimulationStatus"];
      /** Injectionlocation */
      injectionLocation: string[];
      /** Recordinglocation */
      recordingLocation: string[];
      me_model: components["schemas"]["NestedMEModel"];
    };
    /**
     * SingleNeuronSimulationStatus
     * @enum {string}
     */
    SingleNeuronSimulationStatus: "started" | "failure" | "success";
    /** SingleNeuronSynaptomeCreate */
    SingleNeuronSynaptomeCreate: {
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      /**
       * Me Model Id
       * Format: uuid
       */
      me_model_id: string;
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
    };
    /** SingleNeuronSynaptomeRead */
    SingleNeuronSynaptomeRead: {
      /** Assets */
      assets: components["schemas"]["AssetRead"][] | null;
      type?: components["schemas"]["EntityType"] | null;
      /** Contributions */
      contributions:
        | components["schemas"]["ContributionReadWithoutEntity"][]
        | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      me_model: components["schemas"]["NestedMEModel"];
      brain_region: components["schemas"]["BrainRegionRead"];
      createdBy: components["schemas"]["AgentRead"] | null;
      updatedBy: components["schemas"]["AgentRead"] | null;
    };
    /** SingleNeuronSynaptomeSimulationCreate */
    SingleNeuronSynaptomeSimulationCreate: {
      /**
       * Brain Region Id
       * Format: uuid
       */
      brain_region_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      status: components["schemas"]["SingleNeuronSimulationStatus"];
      /** Injectionlocation */
      injectionLocation: string[];
      /** Recordinglocation */
      recordingLocation: string[];
      /**
       * Synaptome Id
       * Format: uuid
       */
      synaptome_id: string;
    };
    /** SingleNeuronSynaptomeSimulationRead */
    SingleNeuronSynaptomeSimulationRead: {
      type?: components["schemas"]["EntityType"] | null;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      brain_region: components["schemas"]["BrainRegionRead"];
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** Seed */
      seed: number;
      status: components["schemas"]["SingleNeuronSimulationStatus"];
      /** Injectionlocation */
      injectionLocation: string[];
      /** Recordinglocation */
      recordingLocation: string[];
      synaptome: components["schemas"]["NestedSynaptome"];
    };
    /** SpeciesCreate */
    SpeciesCreate: {
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
    };
    /** SpeciesRead */
    SpeciesRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
    };
    /** StrainCreate */
    StrainCreate: {
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
    };
    /** StrainRead */
    StrainRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Taxonomy Id */
      taxonomy_id: string;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
    };
    /**
     * StructuralDomain
     * @enum {string}
     */
    StructuralDomain: "apical_dendrite" | "basal_dendrite" | "axon";
    /** SubjectCreate */
    SubjectCreate: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      /**
       * Sex
       * @description Sex of the subject
       */
      sex: components["schemas"]["Sex"];
      /**
       * Weight
       * @description Weight in grams
       */
      weight?: number | null;
      /**
       * Age value
       * @description Age value interval.
       */
      age_value?: number | null;
      /**
       * Minimum age range
       * @description Minimum age range
       */
      age_min?: number | null;
      /**
       * Maximum age range
       * @description Maximum age range
       */
      age_max?: number | null;
      age_period?: components["schemas"]["AgePeriod"] | null;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Species Id
       * Format: uuid
       */
      species_id: string;
    };
    /** SubjectRead */
    SubjectRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Authorized Project Id
       * Format: uuid4
       */
      authorized_project_id: string;
      /**
       * Authorized Public
       * @default false
       */
      authorized_public: boolean;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      /** @description Sex of the subject */
      sex: components["schemas"]["Sex"];
      /**
       * Weight
       * @description Weight in grams
       */
      weight?: number | null;
      /**
       * Age value
       * @description Age value interval.
       */
      age_value?: number | null;
      /**
       * Minimum age range
       * @description Minimum age range
       */
      age_min?: number | null;
      /**
       * Maximum age range
       * @description Maximum age range
       */
      age_max?: number | null;
      age_period?: components["schemas"]["AgePeriod"] | null;
      species: components["schemas"]["SpeciesRead"];
    };
    /** SynapticPathwayRead */
    SynapticPathwayRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Creation Date
       * Format: date-time
       */
      creation_date: string;
      /**
       * Update Date
       * Format: date-time
       */
      update_date: string;
      pre_mtype: components["schemas"]["Annotation"];
      post_mtype: components["schemas"]["Annotation"];
      pre_region: components["schemas"]["BrainRegionRead"];
      post_region: components["schemas"]["BrainRegionRead"];
    };
    /** UseIon */
    UseIon: {
      /** Ion Name */
      ion_name: string;
      /**
       * Read
       * @default []
       */
      read: string[];
      /**
       * Write
       * @default []
       */
      write: string[];
      /** Valence */
      valence?: number | null;
      /** Main Ion */
      main_ion?: boolean | null;
    };
    /**
     * ValidationStatus
     * @enum {string}
     */
    ValidationStatus: "created" | "initialized" | "running" | "done" | "error";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  root__get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  health_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  version_version_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  get_entity_assets__entity_route___entity_id__assets_get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        entity_route: components["schemas"]["EntityRoute"];
        entity_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_AssetRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  upload_entity_asset__entity_route___entity_id__assets_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        entity_route: components["schemas"]["EntityRoute"];
        entity_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_entity_asset__entity_route___entity_id__assets_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AssetRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  get_entity_asset__entity_route___entity_id__assets__asset_id__get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        entity_route: components["schemas"]["EntityRoute"];
        entity_id: string;
        asset_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AssetRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  delete_entity_asset__entity_route___entity_id__assets__asset_id__delete: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        entity_route: components["schemas"]["EntityRoute"];
        entity_id: string;
        asset_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AssetRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  download_entity_asset__entity_route___entity_id__assets__asset_id__download_get: {
    parameters: {
      query?: {
        asset_path?: string | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        entity_route: components["schemas"]["EntityRoute"];
        entity_id: string;
        asset_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_brain_region_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        acronym?: string | null;
        annotation_value?: number | null;
        hierarchy_id?: string | null;
        order_by?: string | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_brain_region__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrainRegionRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_brain_region_hierarchy_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        order_by?: string | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_BrainRegionHierarchyRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_brain_region_hierarchy__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrainRegionHierarchyRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_hierarchy_brain_region_hierarchy__id___hierarchy_get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  get_cell_composition_get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_contribution_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_ContributionRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_contribution_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContributionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContributionRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_contribution__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContributionRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_electrical_cell_recording_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        subject__name?: string | null;
        subject__name__in?: string | null;
        subject__name__ilike?: string | null;
        subject__species_id_in?: string | null;
        subject__id?: string | null;
        subject__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        search?: string | null;
        with_facets?: boolean;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_ElectricalCellRecordingRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_electrical_cell_recording_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ElectricalCellRecordingCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElectricalCellRecordingRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_electrical_cell_recording__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ElectricalCellRecordingRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_emodel_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        species_id_in?: string | null;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        score__lte?: number | null;
        score__gte?: number | null;
        order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        etype__id?: string | null;
        etype__pref_label?: string | null;
        etype__pref_label__in?: string | null;
        etype__order_by?: string | null;
        mtype__id?: string | null;
        mtype__pref_label?: string | null;
        mtype__pref_label__in?: string | null;
        mtype__order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        exemplar_morphology__creation_date__lte?: string | null;
        exemplar_morphology__creation_date__gte?: string | null;
        exemplar_morphology__update_date__lte?: string | null;
        exemplar_morphology__update_date__gte?: string | null;
        exemplar_morphology__name?: string | null;
        exemplar_morphology__name__in?: string | null;
        exemplar_morphology__name__ilike?: string | null;
        exemplar_morphology__id?: string | null;
        exemplar_morphology__id__in?: string | null;
        exemplar_morphology__species_id_in?: string | null;
        exemplar_morphology__order_by?: string | null;
        measurement_annotation__creation_date__lte?: string | null;
        measurement_annotation__creation_date__gte?: string | null;
        measurement_annotation__update_date__lte?: string | null;
        measurement_annotation__update_date__gte?: string | null;
        measurement_kind__pref_label?: string | null;
        measurement_kind__definition?: string | null;
        measurement_kind__structural_domain?:
          | components["schemas"]["StructuralDomain"]
          | null;
        measurement_item__name?:
          | components["schemas"]["MeasurementStatistic"]
          | null;
        measurement_item__unit?:
          | components["schemas"]["MeasurementUnit"]
          | null;
        measurement_item__value__gte?: number | null;
        measurement_item__value__lte?: number | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        search?: string | null;
        with_facets?: boolean;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_EModelRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_emodel_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EModelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EModelRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_emodel__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EModelReadExpanded"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_experimental_bouton_density_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        species_id_in?: string | null;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        order_by?: string | null;
        mtype__id?: string | null;
        mtype__pref_label?: string | null;
        mtype__pref_label__in?: string | null;
        mtype__order_by?: string | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        search?: string | null;
        with_facets?: boolean;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_ExperimentalBoutonDensityRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_experimental_bouton_density_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperimentalBoutonDensityCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExperimentalBoutonDensityRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_experimental_bouton_density__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExperimentalBoutonDensityRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_experimental_neuron_density_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        species_id_in?: string | null;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        order_by?: string | null;
        etype__id?: string | null;
        etype__pref_label?: string | null;
        etype__pref_label__in?: string | null;
        etype__order_by?: string | null;
        mtype__id?: string | null;
        mtype__pref_label?: string | null;
        mtype__pref_label__in?: string | null;
        mtype__order_by?: string | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        search?: string | null;
        with_facets?: boolean;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_ExperimentalNeuronDensityRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_experimental_neuron_density_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperimentalNeuronDensityCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExperimentalNeuronDensityRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_experimental_neuron_density__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExperimentalNeuronDensityRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_experimental_synapses_per_connection_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        species_id_in?: string | null;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        order_by?: string | null;
        synaptic_pathway__order_by?: string | null;
        pre_mtype__id?: string | null;
        pre_mtype__pref_label?: string | null;
        pre_mtype__pref_label__in?: string | null;
        pre_mtype__order_by?: string | null;
        post_mtype__id?: string | null;
        post_mtype__pref_label?: string | null;
        post_mtype__pref_label__in?: string | null;
        post_mtype__order_by?: string | null;
        pre_region__name?: string | null;
        pre_region__name__in?: string | null;
        pre_region__name__ilike?: string | null;
        pre_region__id?: number | null;
        pre_region__id__in?: string | null;
        pre_region__acronym?: string | null;
        pre_region__acronym__in?: string | null;
        pre_region__order_by?: string | null;
        post_region__name?: string | null;
        post_region__name__in?: string | null;
        post_region__name__ilike?: string | null;
        post_region__id?: number | null;
        post_region__id__in?: string | null;
        post_region__acronym?: string | null;
        post_region__acronym__in?: string | null;
        post_region__order_by?: string | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        search?: string | null;
        with_facets?: boolean;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_ExperimentalSynapsesPerConnectionRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_experimental_synapses_per_connection_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExperimentalSynapsesPerConnectionCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExperimentalSynapsesPerConnectionRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_experimental_synapses_per_connection__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ExperimentalSynapsesPerConnectionRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_license_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_LicenseRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_license_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LicenseCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LicenseRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_license__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LicenseRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_measurement_annotation_get: {
    parameters: {
      query?: {
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        id__in?: string | null;
        entity_id?: string | null;
        entity_type?: components["schemas"]["MeasurableEntity"] | null;
        order_by?: string | null;
        measurement_kind__pref_label?: string | null;
        measurement_kind__definition?: string | null;
        measurement_kind__structural_domain?:
          | components["schemas"]["StructuralDomain"]
          | null;
        measurement_item__name?:
          | components["schemas"]["MeasurementStatistic"]
          | null;
        measurement_item__unit?:
          | components["schemas"]["MeasurementUnit"]
          | null;
        measurement_item__value__gte?: number | null;
        measurement_item__value__lte?: number | null;
        page?: number;
        page_size?: number;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_MeasurementAnnotationRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_measurement_annotation_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MeasurementAnnotationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MeasurementAnnotationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_measurement_annotation__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MeasurementAnnotationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  delete_one_measurement_annotation__id___delete: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MeasurementAnnotationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_memodel_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        species_id_in?: string | null;
        validation_status?: components["schemas"]["ValidationStatus"] | null;
        order_by?: string | null;
        etype__id?: string | null;
        etype__pref_label?: string | null;
        etype__pref_label__in?: string | null;
        etype__order_by?: string | null;
        mtype__id?: string | null;
        mtype__pref_label?: string | null;
        mtype__pref_label__in?: string | null;
        mtype__order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        morphology__creation_date__lte?: string | null;
        morphology__creation_date__gte?: string | null;
        morphology__update_date__lte?: string | null;
        morphology__update_date__gte?: string | null;
        morphology__name?: string | null;
        morphology__name__in?: string | null;
        morphology__name__ilike?: string | null;
        morphology__id?: string | null;
        morphology__id__in?: string | null;
        morphology__species_id_in?: string | null;
        morphology__order_by?: string | null;
        measurement_annotation__creation_date__lte?: string | null;
        measurement_annotation__creation_date__gte?: string | null;
        measurement_annotation__update_date__lte?: string | null;
        measurement_annotation__update_date__gte?: string | null;
        measurement_kind__pref_label?: string | null;
        measurement_kind__definition?: string | null;
        measurement_kind__structural_domain?:
          | components["schemas"]["StructuralDomain"]
          | null;
        measurement_item__name?:
          | components["schemas"]["MeasurementStatistic"]
          | null;
        measurement_item__unit?:
          | components["schemas"]["MeasurementUnit"]
          | null;
        measurement_item__value__gte?: number | null;
        measurement_item__value__lte?: number | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        emodel__species_id_in?: string | null;
        emodel__creation_date__lte?: string | null;
        emodel__creation_date__gte?: string | null;
        emodel__update_date__lte?: string | null;
        emodel__update_date__gte?: string | null;
        emodel__name?: string | null;
        emodel__name__in?: string | null;
        emodel__name__ilike?: string | null;
        emodel__id?: string | null;
        emodel__id__in?: string | null;
        emodel__score__lte?: number | null;
        emodel__score__gte?: number | null;
        emodel__order_by?: string | null;
        exemplar_morphology__creation_date__lte?: string | null;
        exemplar_morphology__creation_date__gte?: string | null;
        exemplar_morphology__update_date__lte?: string | null;
        exemplar_morphology__update_date__gte?: string | null;
        exemplar_morphology__name?: string | null;
        exemplar_morphology__name__in?: string | null;
        exemplar_morphology__name__ilike?: string | null;
        exemplar_morphology__id?: string | null;
        exemplar_morphology__id__in?: string | null;
        exemplar_morphology__species_id_in?: string | null;
        exemplar_morphology__order_by?: string | null;
        search?: string | null;
        with_facets?: boolean;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_MEModelRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_memodel_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MEModelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MEModelRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_memodel__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MEModelRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_reconstruction_morphology_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        species_id_in?: string | null;
        order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        measurement_annotation__creation_date__lte?: string | null;
        measurement_annotation__creation_date__gte?: string | null;
        measurement_annotation__update_date__lte?: string | null;
        measurement_annotation__update_date__gte?: string | null;
        measurement_kind__pref_label?: string | null;
        measurement_kind__definition?: string | null;
        measurement_kind__structural_domain?:
          | components["schemas"]["StructuralDomain"]
          | null;
        measurement_item__name?:
          | components["schemas"]["MeasurementStatistic"]
          | null;
        measurement_item__unit?:
          | components["schemas"]["MeasurementUnit"]
          | null;
        measurement_item__value__gte?: number | null;
        measurement_item__value__lte?: number | null;
        mtype__id?: string | null;
        mtype__pref_label?: string | null;
        mtype__pref_label__in?: string | null;
        mtype__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        search?: string | null;
        with_facets?: boolean;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_ReconstructionMorphologyRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_reconstruction_morphology_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReconstructionMorphologyCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ReconstructionMorphologyRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_reconstruction_morphology__id___get: {
    parameters: {
      query?: {
        expand?: string[] | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["ReconstructionMorphologyRead"]
            | components["schemas"]["ReconstructionMorphologyAnnotationExpandedRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_mtype_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        id?: string | null;
        pref_label?: string | null;
        pref_label__in?: string | null;
        order_by?: string | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_Annotation_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_mtype__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Annotation"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_organization_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_OrganizationRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_organization_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrganizationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_organization__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["OrganizationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_person_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_PersonRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_person_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PersonCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PersonRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_person__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PersonRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_role_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_RoleRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_role_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RoleCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_role__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_single_neuron_simulation_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        status?: components["schemas"]["SingleNeuronSimulationStatus"] | null;
        order_by?: string | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        me_type__creation_date__lte?: string | null;
        me_type__creation_date__gte?: string | null;
        me_type__update_date__lte?: string | null;
        me_type__update_date__gte?: string | null;
        me_type__name?: string | null;
        me_type__name__in?: string | null;
        me_type__name__ilike?: string | null;
        me_type__id?: string | null;
        me_type__id__in?: string | null;
        me_type__species_id_in?: string | null;
        me_type__validation_status?:
          | components["schemas"]["ValidationStatus"]
          | null;
        me_type__order_by?: string | null;
        etype__id?: string | null;
        etype__pref_label?: string | null;
        etype__pref_label__in?: string | null;
        etype__order_by?: string | null;
        mtype__id?: string | null;
        mtype__pref_label?: string | null;
        mtype__pref_label__in?: string | null;
        mtype__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        morphology__creation_date__lte?: string | null;
        morphology__creation_date__gte?: string | null;
        morphology__update_date__lte?: string | null;
        morphology__update_date__gte?: string | null;
        morphology__name?: string | null;
        morphology__name__in?: string | null;
        morphology__name__ilike?: string | null;
        morphology__id?: string | null;
        morphology__id__in?: string | null;
        morphology__species_id_in?: string | null;
        morphology__order_by?: string | null;
        measurement_annotation__creation_date__lte?: string | null;
        measurement_annotation__creation_date__gte?: string | null;
        measurement_annotation__update_date__lte?: string | null;
        measurement_annotation__update_date__gte?: string | null;
        measurement_kind__pref_label?: string | null;
        measurement_kind__definition?: string | null;
        measurement_kind__structural_domain?:
          | components["schemas"]["StructuralDomain"]
          | null;
        measurement_item__name?:
          | components["schemas"]["MeasurementStatistic"]
          | null;
        measurement_item__unit?:
          | components["schemas"]["MeasurementUnit"]
          | null;
        measurement_item__value__gte?: number | null;
        measurement_item__value__lte?: number | null;
        emodel__species_id_in?: string | null;
        emodel__creation_date__lte?: string | null;
        emodel__creation_date__gte?: string | null;
        emodel__update_date__lte?: string | null;
        emodel__update_date__gte?: string | null;
        emodel__name?: string | null;
        emodel__name__in?: string | null;
        emodel__name__ilike?: string | null;
        emodel__id?: string | null;
        emodel__id__in?: string | null;
        emodel__score__lte?: number | null;
        emodel__score__gte?: number | null;
        emodel__order_by?: string | null;
        exemplar_morphology__creation_date__lte?: string | null;
        exemplar_morphology__creation_date__gte?: string | null;
        exemplar_morphology__update_date__lte?: string | null;
        exemplar_morphology__update_date__gte?: string | null;
        exemplar_morphology__name?: string | null;
        exemplar_morphology__name__in?: string | null;
        exemplar_morphology__name__ilike?: string | null;
        exemplar_morphology__id?: string | null;
        exemplar_morphology__id__in?: string | null;
        exemplar_morphology__species_id_in?: string | null;
        exemplar_morphology__order_by?: string | null;
        search?: string | null;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
        with_facets?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_SingleNeuronSimulationRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_single_neuron_simulation_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SingleNeuronSimulationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SingleNeuronSimulationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_single_neuron_simulation__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SingleNeuronSimulationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_single_neuron_synaptome_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        me_type__creation_date__lte?: string | null;
        me_type__creation_date__gte?: string | null;
        me_type__update_date__lte?: string | null;
        me_type__update_date__gte?: string | null;
        me_type__name?: string | null;
        me_type__name__in?: string | null;
        me_type__name__ilike?: string | null;
        me_type__id?: string | null;
        me_type__id__in?: string | null;
        me_type__species_id_in?: string | null;
        me_type__validation_status?:
          | components["schemas"]["ValidationStatus"]
          | null;
        me_type__order_by?: string | null;
        etype__id?: string | null;
        etype__pref_label?: string | null;
        etype__pref_label__in?: string | null;
        etype__order_by?: string | null;
        mtype__id?: string | null;
        mtype__pref_label?: string | null;
        mtype__pref_label__in?: string | null;
        mtype__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        morphology__creation_date__lte?: string | null;
        morphology__creation_date__gte?: string | null;
        morphology__update_date__lte?: string | null;
        morphology__update_date__gte?: string | null;
        morphology__name?: string | null;
        morphology__name__in?: string | null;
        morphology__name__ilike?: string | null;
        morphology__id?: string | null;
        morphology__id__in?: string | null;
        morphology__species_id_in?: string | null;
        morphology__order_by?: string | null;
        measurement_annotation__creation_date__lte?: string | null;
        measurement_annotation__creation_date__gte?: string | null;
        measurement_annotation__update_date__lte?: string | null;
        measurement_annotation__update_date__gte?: string | null;
        measurement_kind__pref_label?: string | null;
        measurement_kind__definition?: string | null;
        measurement_kind__structural_domain?:
          | components["schemas"]["StructuralDomain"]
          | null;
        measurement_item__name?:
          | components["schemas"]["MeasurementStatistic"]
          | null;
        measurement_item__unit?:
          | components["schemas"]["MeasurementUnit"]
          | null;
        measurement_item__value__gte?: number | null;
        measurement_item__value__lte?: number | null;
        emodel__species_id_in?: string | null;
        emodel__creation_date__lte?: string | null;
        emodel__creation_date__gte?: string | null;
        emodel__update_date__lte?: string | null;
        emodel__update_date__gte?: string | null;
        emodel__name?: string | null;
        emodel__name__in?: string | null;
        emodel__name__ilike?: string | null;
        emodel__id?: string | null;
        emodel__id__in?: string | null;
        emodel__score__lte?: number | null;
        emodel__score__gte?: number | null;
        emodel__order_by?: string | null;
        exemplar_morphology__creation_date__lte?: string | null;
        exemplar_morphology__creation_date__gte?: string | null;
        exemplar_morphology__update_date__lte?: string | null;
        exemplar_morphology__update_date__gte?: string | null;
        exemplar_morphology__name?: string | null;
        exemplar_morphology__name__in?: string | null;
        exemplar_morphology__name__ilike?: string | null;
        exemplar_morphology__id?: string | null;
        exemplar_morphology__id__in?: string | null;
        exemplar_morphology__species_id_in?: string | null;
        exemplar_morphology__order_by?: string | null;
        search?: string | null;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
        with_facets?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_SingleNeuronSynaptomeRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_single_neuron_synaptome_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SingleNeuronSynaptomeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SingleNeuronSynaptomeRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_single_neuron_synaptome__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SingleNeuronSynaptomeRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_single_neuron_synaptome_simulation_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        id__in?: string | null;
        status?: components["schemas"]["SingleNeuronSimulationStatus"] | null;
        order_by?: string | null;
        brain_region__name?: string | null;
        brain_region__name__in?: string | null;
        brain_region__name__ilike?: string | null;
        brain_region__id?: number | null;
        brain_region__id__in?: string | null;
        brain_region__acronym?: string | null;
        brain_region__acronym__in?: string | null;
        brain_region__order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        synaptome__creation_date__lte?: string | null;
        synaptome__creation_date__gte?: string | null;
        synaptome__update_date__lte?: string | null;
        synaptome__update_date__gte?: string | null;
        synaptome__name?: string | null;
        synaptome__name__in?: string | null;
        synaptome__name__ilike?: string | null;
        synaptome__id?: string | null;
        synaptome__id__in?: string | null;
        synaptome__order_by?: string | null;
        me_type__creation_date__lte?: string | null;
        me_type__creation_date__gte?: string | null;
        me_type__update_date__lte?: string | null;
        me_type__update_date__gte?: string | null;
        me_type__name?: string | null;
        me_type__name__in?: string | null;
        me_type__name__ilike?: string | null;
        me_type__id?: string | null;
        me_type__id__in?: string | null;
        me_type__species_id_in?: string | null;
        me_type__validation_status?:
          | components["schemas"]["ValidationStatus"]
          | null;
        me_type__order_by?: string | null;
        etype__id?: string | null;
        etype__pref_label?: string | null;
        etype__pref_label__in?: string | null;
        etype__order_by?: string | null;
        mtype__id?: string | null;
        mtype__pref_label?: string | null;
        mtype__pref_label__in?: string | null;
        mtype__order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        morphology__creation_date__lte?: string | null;
        morphology__creation_date__gte?: string | null;
        morphology__update_date__lte?: string | null;
        morphology__update_date__gte?: string | null;
        morphology__name?: string | null;
        morphology__name__in?: string | null;
        morphology__name__ilike?: string | null;
        morphology__id?: string | null;
        morphology__id__in?: string | null;
        morphology__species_id_in?: string | null;
        morphology__order_by?: string | null;
        measurement_annotation__creation_date__lte?: string | null;
        measurement_annotation__creation_date__gte?: string | null;
        measurement_annotation__update_date__lte?: string | null;
        measurement_annotation__update_date__gte?: string | null;
        measurement_kind__pref_label?: string | null;
        measurement_kind__definition?: string | null;
        measurement_kind__structural_domain?:
          | components["schemas"]["StructuralDomain"]
          | null;
        measurement_item__name?:
          | components["schemas"]["MeasurementStatistic"]
          | null;
        measurement_item__unit?:
          | components["schemas"]["MeasurementUnit"]
          | null;
        measurement_item__value__gte?: number | null;
        measurement_item__value__lte?: number | null;
        emodel__species_id_in?: string | null;
        emodel__creation_date__lte?: string | null;
        emodel__creation_date__gte?: string | null;
        emodel__update_date__lte?: string | null;
        emodel__update_date__gte?: string | null;
        emodel__name?: string | null;
        emodel__name__in?: string | null;
        emodel__name__ilike?: string | null;
        emodel__id?: string | null;
        emodel__id__in?: string | null;
        emodel__score__lte?: number | null;
        emodel__score__gte?: number | null;
        emodel__order_by?: string | null;
        exemplar_morphology__creation_date__lte?: string | null;
        exemplar_morphology__creation_date__gte?: string | null;
        exemplar_morphology__update_date__lte?: string | null;
        exemplar_morphology__update_date__gte?: string | null;
        exemplar_morphology__name?: string | null;
        exemplar_morphology__name__in?: string | null;
        exemplar_morphology__name__ilike?: string | null;
        exemplar_morphology__id?: string | null;
        exemplar_morphology__id__in?: string | null;
        exemplar_morphology__species_id_in?: string | null;
        exemplar_morphology__order_by?: string | null;
        search?: string | null;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
        with_facets?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_SingleNeuronSynaptomeSimulationRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_single_neuron_synaptome_simulation_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SingleNeuronSynaptomeSimulationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SingleNeuronSynaptomeSimulationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_single_neuron_synaptome_simulation__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SingleNeuronSynaptomeSimulationRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_species_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        order_by?: string | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_SpeciesRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_species_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SpeciesCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpeciesRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_species__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SpeciesRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_strain_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        id?: string | null;
        order_by?: string | null;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_StrainRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_strain_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StrainCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StrainRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_strain__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StrainRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_subject_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        name?: string | null;
        name__in?: string | null;
        name__ilike?: string | null;
        species_id_in?: string | null;
        id?: string | null;
        order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        strain__name?: string | null;
        strain__name__in?: string | null;
        strain__name__ilike?: string | null;
        strain__id?: string | null;
        strain__order_by?: string | null;
        contribution__id?: string | null;
        contribution__pref_label?: string | null;
        contribution__pref_label__in?: string | null;
        contribution__order_by?: string | null;
        search?: string | null;
        with_facets?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_SubjectRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_subject_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubjectCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubjectRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_subject__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubjectRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_many_ion_channel_model_get: {
    parameters: {
      query?: {
        page?: number;
        page_size?: number;
        search?: string | null;
        creation_date__lte?: string | null;
        creation_date__gte?: string | null;
        update_date__lte?: string | null;
        update_date__gte?: string | null;
        name__ilike?: string | null;
        nmodl_suffix?: string | null;
        brain_region_id?: number | null;
        species_id__in?: string | null;
        is_ljp_corrected?: boolean | null;
        is_temperature_dependent?: boolean | null;
        temperature_celsius__lte?: number | null;
        temperature_celsius__gte?: number | null;
        is_stochastic?: boolean | null;
        order_by?: string | null;
        species__name?: string | null;
        species__name__in?: string | null;
        species__name__ilike?: string | null;
        species__id?: string | null;
        species__order_by?: string | null;
        within_brain_region_hierachy_id?: string | null;
        within_brain_region_brain_region_id?: string | null;
        within_brain_region_ascendants?: boolean;
      };
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListResponse_IonChannelModelRead_"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  create_one_ion_channel_model_post: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IonChannelModelCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IonChannelModelRead"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  read_one_ion_channel_model__id___get: {
    parameters: {
      query?: never;
      header?: {
        "virtual-lab-id"?: string | null;
        "project-id"?: string | null;
      };
      path: {
        id_: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IonChannelModelExpanded"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
}
