name: Autogen

on:
  pull_request:
  push:
    branches: [main]

jobs:
  autogen-checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5  # Updated to v5
        with:
          python-version: "3.11"

      - name: Install datamodel-code-generator
        run: |
          pip install datamodel-code-generator[http]

      - name: Run autogen commands
        run: |
          # Define base URL and output directory
          BASE_URL="https://staging.openbraininstitute.org/api"
          OUTPUT_DIR="src/neuroagent/tools/autogenerated_types"

          # Array of services and their corresponding output files
          declare -A SERVICES=(
            ["entitycore"]="entitycore.py"
            ["obi-one"]="obione.py"
            ["literature"]="literature.py"
            ["bluenaas"]="bluenaas.py"
            ["thumbnail-generation"]="thumbnail_generation.py"
          )

          for service in "${!SERVICES[@]}"; do
              datamodel-codegen \
                --enum-field-as-literal=all \
                --target-python-version=3.11 \
                --reuse-model \
                --field-constraints \
                --input-file-type=openapi \
                --output-model-type=pydantic_v2.BaseModel \
                --openapi-scopes {schemas,paths,parameters} \
                --use-standard-collections \
                --use-union-operator \
                --use-default-kwarg \
                --use-operation-id-as-name \
                --extra-fields=forbid \
                --url="${BASE_URL}/${service}/openapi.json" \
                --output="${OUTPUT_DIR}/${SERVICES[$service]}"
            done

      - name: Check for meaningful changes
        run: |
          # Debug: Show what files git thinks have changed
          echo "=== Debug: Files with any changes ==="
          git diff --name-only HEAD -- src/neuroagent/tools/autogenerated_types/ || echo "No files found by git diff --name-only"

          echo "=== Debug: Git status ==="
          git status --porcelain src/neuroagent/tools/autogenerated_types/

          echo "=== Debug: Full diff ==="
          git diff HEAD -- src/neuroagent/tools/autogenerated_types/

          # Check if there are any changes at all
          if ! git diff --quiet HEAD -- src/neuroagent/tools/autogenerated_types/; then
            echo "Checking for meaningful changes (ignoring timestamps)..."

            # Get list of changed files with better error handling
            CHANGED_FILES=()
            HAS_MEANINGFUL_CHANGES=false

            # More robust way to get changed files
            while IFS= read -r file; do
              if [ -n "$file" ]; then
                echo "=== Processing file: '$file' ==="

                # Get the diff for this specific file, excluding timestamp lines
                FILE_DIFF=$(git diff HEAD -- "$file" | \
                  sed '/^[+-]#   timestamp:/d' | \
                  grep -E '^[+-]' | \
                  grep -v -E '^(\+\+\+|---|\@@)' || true)

                echo "Filtered diff for $file:"
                echo "$FILE_DIFF"

                if [ -n "$FILE_DIFF" ]; then
                  CHANGED_FILES+=("$file")
                  HAS_MEANINGFUL_CHANGES=true
                  echo "-> This file has meaningful changes"
                else
                  echo "-> This file has no meaningful changes"
                fi
              fi
            done < <(git diff --name-only HEAD -- src/neuroagent/tools/autogenerated_types/)

            if [ "$HAS_MEANINGFUL_CHANGES" = true ]; then
              echo "❌ Autogenerated files are outdated!"
              echo ""
              echo "Files with meaningful changes:"
              for file in "${CHANGED_FILES[@]}"; do
                echo "  - $file"
              done
              echo ""
              echo "Please run the autogen commands locally and commit the changes."
              exit 1
            else
              echo "✅ All autogenerated files are up to date (only timestamps changed)"
            fi
          else
            echo "✅ No changes detected in autogenerated files"
          fi
